(29)<android.telephony.SignalStrength: boolean isGsm()>[normal]    ---->    <android.telephony.SignalStrength: java.util.List<android.telephony.CellSignalStrength> getCellSignalStrengths()>[normal]
(29)<android.telephony.SignalStrength: int getCdmaEcio()>[normal]    ---->    <android.telephony.CellSignalStrengthCdma: int getCdmaEcio()>[normal]
(29)<android.telephony.SignalStrength: int getEvdoDbm()>[normal]    ---->    <android.telephony.CellSignalStrengthCdma: int getEvdoDbm()>[normal]
(29)<android.telephony.SignalStrength: int getCdmaDbm()>[normal]    ---->    <android.telephony.CellSignalStrengthCdma: int getCdmaDbm()>[normal]
(29)<android.telephony.SignalStrength: int getGsmLevel()>[normal]    ---->    <android.telephony.CellSignalStrengthGsm: int getLevel()>[normal]
(29)<android.telephony.SignalStrength: int getTdScdmaAsuLevel()>[normal]    ---->    <android.telephony.CellSignalStrengthTdscdma: int getAsuLevel()>[normal]
(29)<android.telephony.SignalStrength: int getGsmAsuLevel()>[normal]    ---->    <android.telephony.CellSignalStrengthGsm: int getAsuLevel()>[normal]
(29)<android.telephony.SignalStrength: int getCdmaLevel()>[normal]    ---->    <android.telephony.CellSignalStrengthCdma: int getLevel()>[normal]
(29)<android.telephony.SignalStrength: int getGsmSignalStrength()>[normal]    ---->    <android.telephony.CellSignalStrengthGsm: int getAsuLevel()>[normal]
(29)<android.telephony.SignalStrength: int getEvdoEcio()>[normal]    ---->    <android.telephony.CellSignalStrengthCdma: int getEvdoEcio()>[normal]
(29)<android.telephony.SignalStrength: int getGsmBitErrorRate()>[normal]    ---->    <android.telephony.CellSignalStrengthCdma: int getBitErrorRate()>[normal]
(29)<android.telephony.SignalStrength: int getEvdoSnr()>[normal]    ---->    <android.telephony.CellSignalStrengthCdma: int getEvdoSnr()>[normal]
(29)<android.provider.MediaStore.Images.Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,long,int,android.graphics.BitmapFactory.Options)>[normal]    ---->    <android.content.ContentResolver: android.graphics.Bitmap loadThumbnail(android.net.Uri,android.util.Size,android.os.CancellationSignal)>[normal]
(29)<android.provider.MediaStore.Images.Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,int,android.graphics.BitmapFactory.Options)>[normal]    ---->    <android.content.ContentResolver: android.graphics.Bitmap loadThumbnail(android.net.Uri,android.util.Size,android.os.CancellationSignal)>[normal]
(29)<android.provider.MediaStore.Video.Thumbnails: void cancelThumbnailRequest(android.content.ContentResolver,long)>[normal]    ---->    <android.content.ContentResolver: android.graphics.Bitmap loadThumbnail(android.net.Uri,android.util.Size,android.os.CancellationSignal)>[normal]
(29)<android.provider.MediaStore.Video.Thumbnails: void cancelThumbnailRequest(android.content.ContentResolver,long,long)>[normal]    ---->    <android.content.ContentResolver: android.graphics.Bitmap loadThumbnail(android.net.Uri,android.util.Size,android.os.CancellationSignal)>[normal]
(29)<android.provider.MediaStore.Images.Media: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,String[],String,String[],String)>[normal]    ---->    <android.content.ContentResolver: android.database.Cursor query(android.net.Uri,String[],String,String[],String)>[normal]
(29)<android.provider.MediaStore.Images.Media: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,String[],String,String)>[normal]    ---->    <android.content.ContentResolver: android.database.Cursor query(android.net.Uri,String[],String,String[],String)>[normal]
(29)<android.service.notification.ConditionProviderService: void notifyCondition(android.service.notification.Condition)>[normal]    ---->    <android.app.NotificationManager: void setAutomaticZenRuleState(java.lang.String,android.service.notification.Condition)>[normal]
(29)<android.service.notification.ConditionProviderService: void notifyConditions(android.service.notification.Condition)>[normal]    ---->    <android.app.NotificationManager: void setAutomaticZenRuleState(java.lang.String,android.service.notification.Condition)>[normal]
(29)<android.service.voice.VoiceInteractionSession: void onHandleAssistSecondary(android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,int,int)>[normal]    ---->    <android.service.voice.VoiceInteractionSession: void onHandleAssist(android.service.voice.VoiceInteractionSession.AssistState)>[normal]
(29)<android.service.voice.VoiceInteractionSession: void onHandleAssist(android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent)>[normal]    ---->    <android.service.voice.VoiceInteractionSession: void onHandleAssist(android.service.voice.VoiceInteractionSession.AssistState)>[normal]
(29)<android.telephony.PhoneNumberUtils: boolean isLocalEmergencyNumber(android.content.Context,java.lang.String)>[normal]    ---->    <android.telephony.TelephonyManager: boolean isEmergencyNumber(java.lang.String)>[normal]
(29)<android.telephony.PhoneNumberUtils: boolean isEmergencyNumber(java.lang.String)>[normal]    ---->    <android.telephony.TelephonyManager: boolean isEmergencyNumber(java.lang.String)>[normal]
(29)<android.net.NetworkInfo: int getSubtype()>[normal]    ---->    <android.telephony.TelephonyManager: int getDataNetworkType()>[normal]
(29)<android.net.wifi.WifiManager: boolean disableNetwork(int)>[normal]    ---->    <android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier build()>[normal]
(29)<android.net.wifi.WifiManager: boolean reassociate()>[normal]    ---->    <android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier build()>[normal]
(29)<android.net.wifi.WifiManager: boolean removeNetwork(int)>[normal]    ---->    <android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier build()>[normal]
(29)<android.net.wifi.WifiManager: int addNetwork(android.net.wifi.WifiConfiguration)>[normal]    ---->    <android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier build()>[normal]
(29)<android.net.wifi.WifiManager: java.util.List<android.net.wifi.WifiConfiguration> getConfiguredNetworks()>[normal]    ---->    <android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier build()>[normal]
(29)<android.net.wifi.WifiManager: boolean reconnect()>[normal]    ---->    <android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier build()>[normal]
(29)<android.net.wifi.WifiManager: boolean disconnect()>[normal]    ---->    <android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier build()>[normal]
(29)<android.net.wifi.WifiManager: int updateNetwork(android.net.wifi.WifiConfiguration)>[normal]    ---->    <android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier build()>[normal]
(30)<android.net.wifi.WifiManager: int calculateSignalLevel(int,int)>[normal]    ---->    <android.net.wifi.WifiManager: int calculateSignalLevel(int)>[normal]
(29)<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setProxyAddress(java.net.InetAddress)>[normal]    ---->    <android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setProxyAddress(java.lang.String)>[normal]
(29)<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setMmsProxyAddress(java.net.InetAddress)>[normal]    ---->    <android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setMmsProxyAddress(java.lang.String)>[normal]
(29)<android.app.KeyguardManager: android.content.Intent createConfirmDeviceCredentialIntent(java.lang.CharSequence,java.lang.CharSequence)>[normal]    ---->    <android.hardware.biometrics.BiometricPrompt.Builder: android.hardware.biometrics.BiometricPrompt.Builder setAllowedAuthenticators(int)>[normal]
(29)<android.media.ThumbnailUtils: android.graphics.Bitmap createAudioThumbnail(java.lang.String,int)>[normal]    ---->    <android.media.ThumbnailUtils: android.graphics.Bitmap createAudioThumbnail(java.io.File,android.util.Size,android.os.CancellationSignal)>[normal]
(29)<android.media.ThumbnailUtils: android.graphics.Bitmap createVideoThumbnail(java.lang.String,int)>[normal]    ---->    <android.media.ThumbnailUtils: android.graphics.Bitmap createVideoThumbnail(java.io.File,android.util.Size,android.os.CancellationSignal)>[normal]
(29)<android.media.ThumbnailUtils: android.graphics.Bitmap createImageThumbnail(java.lang.String,int)>[normal]    ---->    <android.media.ThumbnailUtils: android.graphics.Bitmap createImageThumbnail(java.io.File,android.util.Size,android.os.CancellationSignal)>[normal]
(29)<android.app.AppOpsManager: int checkOp(java.lang.String,int,java.lang.String)>[normal]    ---->    <android.app.AppOpsManager: int unsafeCheckOp(java.lang.String,int,java.lang.String)>[normal]
(29)<android.app.AppOpsManager: int checkOpNoThrow(java.lang.String,int,java.lang.String)>[normal]    ---->    <android.app.AppOpsManager: int unsafeCheckOpNoThrow(java.lang.String,int,java.lang.String)>[normal]
(30)<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>[normal]    ---->    <android.content.pm.PackageManager: int getPackageUid(java.lang.String,android.content.pm.PackageManager.PackageInfoFlags)>[normal]
(30)<android.app.AppOpsManager: int noteOpNoThrow(java.lang.String,int,java.lang.String)>[normal]    ---->    <android.app.AppOpsManager: int noteOpNoThrow(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>[normal]
(30)<android.app.AppOpsManager: int noteProxyOp(java.lang.String,java.lang.String)>[normal]    ---->    <android.app.AppOpsManager: int noteProxyOp(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>[normal]
(30)<android.app.AppOpsManager: int noteProxyOpNoThrow(java.lang.String,java.lang.String,int)>[normal]    ---->    <android.app.AppOpsManager: int noteProxyOpNoThrow(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>[normal]
(30)<android.app.AppOpsManager: int noteProxyOpNoThrow(java.lang.String,java.lang.String)>[normal]    ---->    <android.app.AppOpsManager: int noteProxyOpNoThrow(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>[normal]
(30)<android.app.AppOpsManager: int noteOp(java.lang.String,int,java.lang.String)>[normal]    ---->    <android.app.AppOpsManager: int noteOp(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>[normal]
(30)<android.app.AppOpsManager: int startOpNoThrow(int,int,java.lang.String)>[normal]    ---->    <android.app.AppOpsManager: int startOpNoThrow(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>[normal]
(30)<android.app.AppOpsManager: int startOp(int,int,java.lang.String,boolean)>[normal]    ---->    <android.app.AppOpsManager: int startOp(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>
(30)<android.app.AppOpsManager: int startOp(java.lang.String,int,java.lang.String)>[normal]    ---->    <android.app.AppOpsManager: int startOp(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>[normal]
(30)<android.app.AppOpsManager: int startOp(int)>[normal]    ---->    <android.app.AppOpsManager: int startOp(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>[normal]
(30)<android.app.AppOpsManager: int startOpNoThrow(java.lang.String,int,java.lang.String)>[normal]    ---->    <android.app.AppOpsManager: int startOpNoThrow(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>[normal]
(30)<android.app.AppOpsManager: void finishOp(int)>[normal]    ---->    <android.app.AppOpsManager: void finishOp(java.lang.String,int,java.lang.String,java.lang.String)>[normal]
(30)<android.app.AppOpsManager: void finishOp(int,int,java.lang.String)>[normal]    ---->    <android.app.AppOpsManager: void finishOp(java.lang.String,int,java.lang.String,java.lang.String)>[normal]
(30)<android.app.AppOpsManager: void finishOp(java.lang.String,int,java.lang.String)>[normal]    ---->    <android.app.AppOpsManager: void finishOp(java.lang.String,int,java.lang.String,java.lang.String)>[normal]
(30)<android.content.pm.PackageManager: java.lang.String getInstallerPackageName(java.lang.String)>[normal]    ---->    <android.content.pm.PackageManager: java.lang.String getInstallSourceInfo(java.lang.String)>[normal]
(30)<android.app.Activity: boolean onNavigateUpFromChild(android.app.Activity)>[normal]    ---->    <android.app.Activity: boolean onNavigateUp()>[normal]
(30)<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int,android.os.Bundle)>[normal]    ---->    <androidx.fragment.app.FragmentActivity: void startActivityFromFragment(androidx.fragment.app.Fragment,android.content.Intent,int,android.os.Bundle)>[normal]
(30)<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)>[normal]    ---->    <androidx.fragment.app.FragmentActivity: void startActivityFromFragment(androidx.fragment.app.Fragment,android.content.Intent,int)>[normal]
(30)<android.app.Activity: void finishFromChild(android.app.Activity)>[normal]    ---->    <android.app.Activity: void finish()>[normal]
(30)<android.app.Activity: void finishActivityFromChild(android.app.Activity,int)>[normal]    ---->    <android.app.Activity: void finishActivity(int)>[normal]
(30)<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)>[normal]    ---->    <android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)>[normal]
(30)<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int)>[normal]    ---->    <android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)>[normal]
(30)<android.app.Activity: boolean navigateUpToFromChild(android.app.Activity,android.content.Intent)>[normal]    ---->    <android.app.Activity: boolean navigateUpTo(android.content.Intent)>[normal]
(29)<android.app.ActivityManager: boolean isRunningInTestHarness()>[normal]    ---->    <android.app.ActivityManager: boolean isRunningInUserTestHarness()>[normal]
(29)<android.view.WindowInsets: android.view.WindowInsets replaceSystemWindowInsets(android.graphics.Rect)>[normal]    ---->    <android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setInsets(int,android.graphics.Insets)>[normal]
(29)<android.view.WindowInsets: android.view.WindowInsets replaceSystemWindowInsets(int,int,int,int)>[normal]    ---->    <android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setInsets(int,android.graphics.Insets)>[normal]
(30)<android.view.WindowInsets: android.graphics.Insets getSystemGestureInsets()>[normal]    ---->    <android.view.WindowInsets: android.graphics.Insets getInsets(int)>[normal]
(30)<android.view.WindowInsets.Builder: Builder setSystemGestureInsets(Insets)>[normal]    ---->    <android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setInsets(int,android.graphics.Insets)>[normal]
(30)<android.view.WindowInsets: int getSystemWindowInsetRight()>[normal]    ---->    <android.view.WindowInsets: android.graphics.Insets getInsets(int)>[normal]
(30)<android.view.WindowInsets: int getSystemWindowInsetTop()>[normal]    ---->    <android.view.WindowInsets: android.graphics.Insets getInsets(int)>[normal]
(30)<android.view.WindowInsets: android.graphics.Insets getSystemWindowInsets()>[normal]    ---->    <android.view.WindowInsets: android.graphics.Insets getInsets(int)>[normal]
(30)<android.view.WindowInsets: android.graphics.Insets getMandatorySystemGestureInsets()>[normal]    ---->    <android.view.WindowInsets: android.graphics.Insets getInsets(int)>[normal]
(30)<android.view.WindowInsets: int getSystemWindowInsetBottom()>[normal]    ---->    <android.view.WindowInsets: android.graphics.Insets getInsets(int)>[normal]
(30)<android.view.WindowInsets: boolean hasSystemWindowInsets()>[normal]    ---->    <android.view.WindowInsets: android.graphics.Insets getInsets(int)>[normal]
(30)<android.view.WindowInsets: android.graphics.Insets getSystemGestureInsets()>[normal]    ---->    <android.view.WindowInsets: android.graphics.Insets getInsets(int)>[normal]
(30)<android.view.WindowInsets: int getSystemWindowInsetLeft()>[normal]    ---->    <android.view.WindowInsets: android.graphics.Insets getInsets(int)>[normal]
(30)<android.view.WindowInsets: int getStableInsetRight()>[normal]    ---->    <android.view.WindowInsets: android.graphics.Insets getInsetsIgnoringVisibility(int)>[normal]
(30)<android.view.WindowInsets: boolean hasStableInsets()>[normal]    ---->    <android.view.WindowInsets: android.graphics.Insets getInsetsIgnoringVisibility(int)>[normal]
(30)<android.view.WindowInsets: int getStableInsetLeft()>[normal]    ---->    <android.view.WindowInsets: android.graphics.Insets getInsetsIgnoringVisibility(int)>[normal]
(30)<android.view.WindowInsets: int getStableInsetBottom()>[normal]    ---->    <android.view.WindowInsets: android.graphics.Insets getInsetsIgnoringVisibility(int)>[normal]
(30)<android.view.WindowInsets: Insets getStableInsets()>[normal]    ---->    <android.view.WindowInsets: android.graphics.Insets getInsetsIgnoringVisibility(int)>[normal]
(30)<android.view.WindowInsets: int getStableInsetTop()>[normal]    ---->    <android.view.WindowInsets: android.graphics.Insets getInsetsIgnoringVisibility(int)>[normal]
(30)<android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setMandatorySystemGestureInsets(android.graphics.Insets)>[normal]    ---->    <android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setInsets(int,android.graphics.Insets)>[normal]
(30)<android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setTappableElementInsets(android.graphics.Insets)>[normal]    ---->    <android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setInsets(int,android.graphics.Insets)>[normal]
(30)<android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setStableInsets(android.graphics.Insets)>[normal]    ---->    <android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setInsetsIgnoringVisibility(int,android.graphics.Insets)>[normal]
(30)<android.telephony.TelephonyManager: int getPhoneCount()>[normal]    ---->    <android.telephony.TelephonyManager: int getActiveModemCount()>[normal]
(30)<android.telephony.TelephonyManager: int getNetworkType()>[normal]    ---->    <android.telephony.TelephonyManager: int getDataNetworkType()>[normal]
(30)<android.telephony.TelephonyManager: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(java.lang.String,int)>[normal]    ---->    <android.telephony.TelephonyManager: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(java.lang.String,int)>[normal]
(30)<android.graphics.Canvas: boolean quickReject(float,float,float,float,android.graphics.Canvas.EdgeType)>[normal]    ---->    <android.graphics.Canvas: boolean quickReject(float,float,float,float)>[normal]
(30)<android.graphics.Canvas: boolean quickReject(android.graphics.Path,android.graphics.Canvas.EdgeType)>[normal]    ---->    <android.graphics.Canvas: boolean quickReject(android.graphics.Path)>[normal]
(30)<android.graphics.Canvas: boolean quickReject(android.graphics.RectF,android.graphics.Canvas.EdgeType)>[normal]    ---->    <android.graphics.Canvas: boolean quickReject(android.graphics.RectF)>[normal]
(29)<android.telephony.SubscriptionInfo: int getMnc()>[normal]    ---->    <android.telephony.SubscriptionInfo: java.lang.String getMncString()>[normal]
(29)<android.telephony.SubscriptionInfo: int getMcc()>[normal]    ---->    <android.telephony.SubscriptionInfo: java.lang.String getMccString()>[normal]
(29)<android.telephony.data.ApnSetting: java.net.InetAddress getProxyAddress()>[normal]    ---->    <android.telephony.data.ApnSetting: java.lang.String getProxyAddressAsString()>[normal]
(29)<android.telephony.data.ApnSetting: java.net.InetAddress getMmsProxyAddress()>[normal]    ---->    <android.telephony.data.ApnSetting: java.lang.String getMmsProxyAddressAsString()>[normal]
(30)<android.telephony.CellInfo: long getTimeStamp()>[normal]    ---->    <android.telephony.CellInfo: long getTimestampMillis()>
(30)<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)>[normal]    ---->    <android.location.LocationManager: getCurrentLocation(java.lang.String,android.os.CancellationSignal,java.util.concurrent.Executor,java.util.function.Consumer)>[normal]
(30)<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)>[normal]    ---->    <android.location.LocationManager: getCurrentLocation(java.lang.String,android.os.CancellationSignal,java.util.concurrent.Executor,java.util.function.Consumer)>[normal]
(30)<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)>[normal]    ---->    <android.location.LocationManager: getCurrentLocation(java.lang.String,android.os.CancellationSignal,java.util.concurrent.Executor,java.util.function.Consumer)>[normal]
(30)<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)>[normal]    ---->    <android.location.LocationManager: getCurrentLocation(java.lang.String,android.os.CancellationSignal,java.util.concurrent.Executor,java.util.function.Consumer)>[normal]
(30)<android.location.LocationManager: boolean registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage.Callback)>[normal]    ---->    <android.location.LocationManager: boolean registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage.Callback,android.os.Handler)>[normal]
(30)<android.location.LocationManager: boolean registerGnssMeasurementsCallback(android.location.GnssNavigationMessage.Callback)>[normal]    ---->    <android.location.LocationManager: boolean registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage.Callback,android.os.Handler)>[normal]
(30)<android.location.LocationManager: boolean addNmeaListener(android.location.OnNmeaMessageListener)>[normal]    ---->    <android.location.LocationManager: boolean addNmeaListener(android.location.OnNmeaMessageListener,android.os.Handler)>[normal]
(29)<android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)>[normal]    ---->    <android.location.LocationManager:  void setTestProviderEnabled(java.lang.String,boolean)>[normal]
(30)<android.hardware.camera2.CameraDevice: void createCaptureSession(java.util.List<android.view.Surface>,android.hardware.camera2.CameraCaptureSession.StateCallback,android.os.Handler)>[normal]    ---->    <android.hardware.camera2.CameraDevice: void createCaptureSession(android.hardware.camera2.params.SessionConfiguration)>[normal]
(30)<android.hardware.camera2.CameraDevice: void createConstrainedHighSpeedCaptureSession(java.util.List<android.view.Surface>,android.hardware.camera2.CameraCaptureSession.StateCallback,android.os.Handler)>[normal]    ---->    <android.hardware.camera2.CameraDevice: void createCaptureSession(android.hardware.camera2.params.SessionConfiguration)>[normal]
(30)<android.hardware.camera2.CameraDevice: void createCaptureSessionByOutputConfigurations(java.util.List<android.hardware.camera2.params.OutputConfiguration>,android.hardware.camera2.CameraCaptureSession.StateCallback,android.os.Handler)>[normal]    ---->    <android.hardware.camera2.CameraDevice: void createCaptureSession(android.hardware.camera2.params.SessionConfiguration)>[normal]
(30)<android.hardware.camera2.CameraDevice: void createReprocessableCaptureSessionByConfigurations(android.hardware.camera2.params.InputConfiguration,java.util.List<android.hardware.camera2.params.OutputConfiguration>,android.hardware.camera2.CameraCaptureSession.StateCallback,android.os.Handler)>[normal]    ---->    <android.hardware.camera2.CameraDevice: void createCaptureSession(android.hardware.camera2.params.SessionConfiguration)>[normal]
(30)<android.hardware.camera2.CameraDevice: void createReprocessableCaptureSession(android.hardware.camera2.params.InputConfiguration,java.util.List<android.view.Surface>,android.hardware.camera2.CameraCaptureSession.StateCallback,android.os.Handler)>[normal]    ---->    <android.hardware.camera2.CameraDevice: void createCaptureSession(android.hardware.camera2.params.SessionConfiguration)>[normal]
(30)<android.app.admin.DevicePolicyManager: boolean getStorageEncryption(ComponentName)>[normal]    ---->    <android.app.admin.DevicePolicyManager: int getStorageEncryptionStatus()>[normal]
(30)<android.app.admin.DevicePolicyManager: boolean getAutoTimeRequired()>[normal]    ---->    <android.app.admin.DevicePolicyManager: boolean getAutoTimeEnabled(android.content.ComponentName)>[normal]
(30)<android.app.admin.DevicePolicyManager: boolean resetPassword(java.lang.String,int)>[normal]    ---->    <android.app.admin.DevicePolicyManager: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>[normal]
(30)<android.app.admin.DevicePolicyManager: void setAutoTimeRequired(ComponentName,boolean)>[normal]    ---->    <android.app.admin.DevicePolicyManager: boolean setAutoTimeEnabled(android.content.ComponentName,boolean)>[normal]
(30)<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean)>[normal]    ---->    <android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,int)>[normal]
(30)<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean,int)>[normal]    ---->    <android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,int)>[normal]
(30)<android.content.ContentResolver: void notifyChange(java.util.Collection<android.net.Uri>,android.database.ContentObserver,int)>[normal]    ---->    <android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,int)>[normal]
(30)<android.view.View: void setOnSystemUiVisibilityChangeListener(android.view.View.OnSystemUiVisibilityChangeListener)>[normal]    ---->    <android.view.WindowInsets: boolean isVisible(int)>[normal]
(30)<android.view.View: void dispatchSystemUiVisibilityChanged(int)>[normal]    ---->    <android.view.WindowInsets: boolean isVisible(int)>[normal]
(30)<android.view.ViewGroup: void dispatchSystemUiVisibilityChanged(int)>[normal]    ---->    <android.view.WindowInsets: boolean isVisible(int)>[normal]
(30)<android.view.ViewConfiguration: float getAmbiguousGestureMultiplier()>[normal]    ---->    <android.view.ViewConfiguration: float getScaledAmbiguousGestureMultiplier()>[normal]
(29)<android.os.Environment: java.io.File getExternalStorageDirectory()>[normal]    ---->    <android.content.Context: java.io.File getExternalFilesDir(java.lang.String)>[normal]
(29)<android.app.AutomaticZenRule: void <init>(java.lang.String,android.content.ComponentName,android.net.Uri,int,boolean)>[normal]    ---->    <android.app.AutomaticZenRule: void AutomaticZenRule(java.lang.String,android.content.ComponentName,android.content.ComponentName,android.net.Uri,android.service.notification.ZenPolicy,int,boolean)>[normal]
(29)<android.graphics.drawable.Drawable: void setColorFilter(int,android.graphics.PorterDuff.Mode)>[normal]    ---->    <android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>[normal]
(29)<android.media.MediaTimestamp: long getAnchorSytemNanoTime()>[normal]    ---->    <android.media.MediaTimestamp: long getAnchorSystemNanoTime()>[normal]
(29)<android.transition.TransitionValues: void <init>()>[normal]    ---->    <android.transition.TransitionValues: void <init>(android.view.View)>[normal]
(30)<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setUserAuthenticationValidityDurationSeconds(int)>[normal]    ---->    <android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setUserAuthenticationParameters(int,int)>[normal]
(29)<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInParent(android.graphics.Rect)>[normal]    ---->    <android.view.accessibility.AccessibilityNodeInfo: void getBoundsInScreen(android.graphics.Rect)>[normal]
(30)<android.accessibilityservice.AccessibilityService: boolean onGesture(int)>[normal]    ---->    <android.accessibilityservice.AccessibilityService: boolean onGesture(android.accessibilityservice.AccessibilityGestureEvent)>[normal]
(29)<android.widget.SearchView: boolean isIconfiedByDefault()>[normal]    ---->    <android.widget.SearchView: boolean isIconifiedByDefault()>[normal]
(29)<android.view.inputmethod.InputMethodManager: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>[normal]    ---->    <android.inputmethodservice.InputMethodService: void switchInputMethod(java.lang.String,android.view.inputmethod.InputMethodSubtype)>[normal]
(30)<android.app.Notification.BubbleMetadata.Builder: void <init>()>[normal]    ---->    <android.app.Notification.BubbleMetadata.Builder: void <init>(java.lang.String)>
(30)<android.hardware.biometrics.BiometricPrompt.Builder: android.hardware.biometrics.BiometricPrompt.Builder setDeviceCredentialAllowed(boolean)>[normal]    ---->    <android.hardware.biometrics.BiometricPrompt.Builder: setAllowedAuthenticators(int)>[normal]
(30)<android.view.Display: void getRectSize(android.graphics.Rect)>[normal]    ---->    <android.view.WindowMetrics: android.graphics.Rect getBounds()>[normal]
(30)<android.widget.Toast: getView getView()>[normal]    ---->    <android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>[normal]
(30)<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller.SessionInfo getActiveStagedSession()>[normal]    ---->    <android.content.pm.PackageInstaller: java.util.List<android.content.pm.PackageInstaller.SessionInfo> getActiveStagedSessions()>[normal]
(30)<android.content.pm.LauncherApps.Callback: void onPackagesSuspended(java.lang.String[],android.os.UserHandle,android.os.Bundle)>[normal]    ---->    <android.content.pm.LauncherApps.Callback: void onPackagesSuspended(java.lang.String[],android.os.UserHandle)>[normal]
(30)<android.hardware.biometrics.BiometricManager: int canAuthenticate()>[normal]    ---->    <android.hardware.biometrics.BiometricManager: int canAuthenticate(int)>[normal]
(30)<android.media.DrmInitData: android.media.DrmInitData.SchemeInitData get(java.util.UUID)>[normal]    ---->    <android.media.DrmInitData: int getSchemeInitDataCount()>[normal]
(30)<android.view.Display: void getSize(android.graphics.Point)>[normal]    ---->    <android.view.WindowMetrics: android.graphics.Rect getBounds()>[normal]
(30)<android.telecom.Conference: void setConnectionStartElapsedRealTime(long)>[normal]    ---->    <android.telecom.Conference: setConnectionStartElapsedRealtimeMillis(long)>[normal]
(30)<android.test.mock.Mockandroid.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean)>[normal]    ---->    <android.test.mock.Mockandroid.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,int)>[normal]
(30)<android.net.NetworkRequest.Builder: android.net.NetworkRequest.Builder setNetworkSpecifier(java.lang.String)>[normal]    ---->    <android.net.NetworkRequest.Builder: android.net.NetworkRequest.Builder setNetworkSpecifier(android.net.NetworkSpecifier)>[normal]
(30)<android.widget.Toast: void setView(android.view.View)>[normal]    ---->    <android.widget.Toast: void makeText(android.content.Context,java.lang.CharSequence,int)>[normal]
