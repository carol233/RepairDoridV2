Inconsistency (Non-Annotation):<android.graphics.Canvas: int save(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//graphics/java/android/graphics/Canvas.java
Inconsistency (Non-Annotation):<android.graphics.Canvas: int saveLayer(RectF,Paint,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//graphics/java/android/graphics/Canvas.java
Inconsistency (Non-Annotation):<android.graphics.Canvas: int saveLayer(float,float,float,float,Paint,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//graphics/java/android/graphics/Canvas.java
Inconsistency (Non-Annotation):<android.graphics.Canvas: int saveLayerAlpha(RectF,int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//graphics/java/android/graphics/Canvas.java
Inconsistency (Non-Annotation):<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//graphics/java/android/graphics/Canvas.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh: int getVertexAllocationCount()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh: Allocation getVertexAllocation(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh: int getPrimitiveCount()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh: Allocation getIndexSetAllocation(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh: Primitive getPrimitive(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.Builder: int getCurrentVertexTypeIndex()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.Builder: int getCurrentIndexSetIndex()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.Builder: Builder addVertexType(Type)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.Builder: Builder addVertexType(Element,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.Builder: Builder addIndexSetType(Type,Primitive)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.Builder: Builder addIndexSetType(Primitive)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.Builder: Builder addIndexSetType(Element,int,Primitive)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.Builder: Mesh create()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.AllocationBuilder: int getCurrentVertexTypeIndex()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.AllocationBuilder: int getCurrentIndexSetIndex()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.AllocationBuilder: AllocationBuilder addVertexAllocation(Allocation)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.AllocationBuilder: AllocationBuilder addIndexSetAllocation(Allocation,Primitive)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.AllocationBuilder: AllocationBuilder addIndexSetType(Primitive)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.AllocationBuilder: Mesh create()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder addVertex(float,float)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder addVertex(float,float,float)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder setTexture(float,float)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder setNormal(float,float,float)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder setColor(float,float,float,float)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder addTriangle(int,int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.TriangleMeshBuilder: Mesh create(boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.app.KeyguardManager: boolean inKeyguardRestrictedInputMode()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/app/KeyguardManager.java
Inconsistency (Non-Annotation):<android.graphics.drawable.Drawable: Drawable createFromResourceStream(Resources,TypedValue,InputStream,String,Options)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//graphics/java/android/graphics/drawable/Drawable.java
Inconsistency (Non-Annotation):<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: byte[] startRecoverySession(String,byte[],byte[],byte[],List<KeyChainProtectionParams>)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//services/core/java/com/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager.java
Inconsistency (Non-Annotation):<android.graphics.drawable.AnimatedImageDrawable: void setLoopCount(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//graphics/java/android/graphics/drawable/AnimatedImageDrawable.java
Inconsistency (Non-Annotation):<android.graphics.drawable.AnimatedImageDrawable: int getLoopCount(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//graphics/java/android/graphics/drawable/AnimatedImageDrawable.java
Inconsistency (Non-Annotation):<android.renderscript.Allocation: void resize(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Allocation.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: void surfaceCreated(SurfaceHolder)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RSSurfaceView.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: void surfaceDestroyed(SurfaceHolder)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RSSurfaceView.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: void surfaceChanged(SurfaceHolder,int,int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RSSurfaceView.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: void pause()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RSSurfaceView.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: void resume()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RSSurfaceView.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: RenderScriptGL createRenderScriptGL(SurfaceConfig)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RSSurfaceView.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: void destroyRenderScriptGL()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RSSurfaceView.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: void setRenderScriptGL(RenderScriptGL)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RSSurfaceView.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: RenderScriptGL getRenderScriptGL()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RSSurfaceView.java
Inconsistency (Non-Annotation):<android.app.slice.Slice.Builder: Builder setSpec(SliceSpec)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/app/slice/Slice.java
Inconsistency (Non-Annotation):<android.media.MediaCodecList: int getCodecCount()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//media/java/android/media/MediaCodecList.java
Inconsistency (Non-Annotation):<android.media.MediaCodecList: MediaCodecInfo getCodecInfoAt(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//media/java/android/media/MediaCodecList.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramFragmentFixedFunction.InternalBuilder: ProgramFragmentFixedFunction create()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramFragmentFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramFragmentFixedFunction.Builder: Builder setTexture(EnvMode,Format,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramFragmentFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramFragmentFixedFunction.Builder: Builder setPointSpriteTexCoordinateReplacement(boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramFragmentFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramFragmentFixedFunction.Builder: Builder setVaryingColor(boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramFragmentFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramFragmentFixedFunction.Builder: ProgramFragmentFixedFunction create()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramFragmentFixedFunction.java
Inconsistency (Non-Annotation):<com.android.systemui.plugins.Plugin: int getVersion()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//packages/SystemUI/plugin_core/src/com/android/systemui/plugins/Plugin.java
Inconsistency (Non-Annotation):<android.telephony.data.DataProfile.Builder: Builder setMtu(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//telephony/java/android/telephony/data/DataProfile.java
Inconsistency (Non-Annotation):<android.hardware.display.DisplayManager: void setSaturationLevel(float)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/hardware/display/DisplayManager.java
Inconsistency (Non-Annotation):<android.webkit.Plugin.PreferencesClickHandler: void handleClickEvent(Context)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/webkit/Plugin.java
Inconsistency (Non-Annotation):<android.accessibilityservice.AccessibilityServiceInfo: boolean getCanRetrieveWindowContent()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/accessibilityservice/AccessibilityServiceInfo.java
Inconsistency (Non-Annotation):<android.accessibilityservice.AccessibilityServiceInfo: String getDescription()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/accessibilityservice/AccessibilityServiceInfo.java
Inconsistency (Non-Annotation):<android.accessibilityservice.AccessibilityServiceInfo: List<CapabilityInfo> getCapabilityInfos()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/accessibilityservice/AccessibilityServiceInfo.java
Inconsistency (Non-Annotation):<android.webkit.WebViewFactoryProvider: TokenBindingService getTokenBindingService()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/webkit/WebViewFactoryProvider.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertex: int getInputCount()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramVertex.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertex: Element getInput(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramVertex.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertex.Builder: Builder addInput(Element)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramVertex.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertex.Builder: ProgramVertex create()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramVertex.java
Inconsistency (Non-Annotation):<android.net.NetworkInfo: String getReason()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/net/NetworkInfo.java
Inconsistency (Non-Annotation):<android.app.role.RoleControllerService: boolean onIsApplicationQualifiedForRole(String,String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/app/role/RoleControllerService.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D.IndexEntry: String getName()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D.IndexEntry: EntryType getEntryType()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D.IndexEntry: BaseObj getObject()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D.IndexEntry: Mesh getMesh()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D: int getIndexEntryCount()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D: IndexEntry getIndexEntry(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D: FileA3D createFromAsset(RenderScript,AssetManager,String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D: FileA3D createFromFile(RenderScript,String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D: FileA3D createFromFile(RenderScript,File)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D: FileA3D createFromResource(RenderScript,Resources,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/FileA3D.java
Inconsistency (Non-Annotation):<android.media.MediaDrm: void releaseAllSecureStops()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//media/java/android/media/MediaDrm.java
Inconsistency (Non-Annotation):<android.webkit.WebSettings: void setAppCacheEnabled(boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/webkit/WebSettings.java
Inconsistency (Non-Annotation):<android.webkit.WebSettings: void setAppCachePath(String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/webkit/WebSettings.java
Inconsistency (Non-Annotation):<android.media.AsyncPlayer: void play(Context,Uri,boolean,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//media/java/android/media/AsyncPlayer.java
Inconsistency (Non-Annotation):<android.view.textclassifier.TextClassification: OnClickListener getOnClickListener()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/view/textclassifier/TextClassification.java
Inconsistency (Non-Annotation):<com.android.internal.widget.PagerAdapter: void startUpdate(View)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/com/android/internal/widget/PagerAdapter.java
Inconsistency (Non-Annotation):<com.android.internal.widget.PagerAdapter: Object instantiateItem(View,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/com/android/internal/widget/PagerAdapter.java
Inconsistency (Non-Annotation):<com.android.internal.widget.PagerAdapter: void destroyItem(View,int,Object)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/com/android/internal/widget/PagerAdapter.java
Inconsistency (Non-Annotation):<com.android.internal.widget.PagerAdapter: void setPrimaryItem(View,int,Object)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/com/android/internal/widget/PagerAdapter.java
Inconsistency (Non-Annotation):<com.android.internal.widget.PagerAdapter: void finishUpdate(View)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/com/android/internal/widget/PagerAdapter.java
Inconsistency (Non-Annotation):<android.renderscript.Element: Element MATRIX4X4(RenderScript)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Element.java
Inconsistency (Non-Annotation):<android.media.MediaCodec: ByteBuffer[] getInputBuffers()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//media/java/android/media/MediaCodec.java
Inconsistency (Non-Annotation):<android.media.MediaCodec: ByteBuffer[] getOutputBuffers()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//media/java/android/media/MediaCodec.java
Inconsistency (Non-Annotation):<android.media.MediaRecorder: void setAuxiliaryOutputFile(FileDescriptor)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//media/java/android/media/MediaRecorder.java
Inconsistency (Non-Annotation):<android.media.MediaRecorder: void setAuxiliaryOutputFile(String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//media/java/android/media/MediaRecorder.java
Inconsistency (Non-Annotation):<android.service.persistentdata.PersistentDataBlockManager: void setOemUnlockEnabled(boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/service/persistentdata/PersistentDataBlockManager.java
Inconsistency (Non-Annotation):<android.service.persistentdata.PersistentDataBlockManager: boolean getOemUnlockEnabled()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/service/persistentdata/PersistentDataBlockManager.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramRaster: boolean isPointSpriteEnabled()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramRaster.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramRaster: CullMode getCullMode()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramRaster.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramRaster: ProgramRaster CULL_BACK(RenderScript)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramRaster.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramRaster: ProgramRaster CULL_FRONT(RenderScript)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramRaster.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramRaster: ProgramRaster CULL_NONE(RenderScript)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramRaster.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramRaster.Builder: Builder setPointSpriteEnabled(boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramRaster.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramRaster.Builder: Builder setCullMode(CullMode)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramRaster.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramRaster.Builder: ProgramRaster create()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramRaster.java
Inconsistency (Non-Annotation):<android.net.ConnectivityManager: LinkProperties getActiveLinkProperties()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/net/ConnectivityManager.java
Inconsistency (Non-Annotation):<android.net.ConnectivityManager: NetworkCapabilities networkCapabilitiesForType(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/net/ConnectivityManager.java
Inconsistency (Non-Annotation):<android.net.ConnectivityManager: PacketKeepalive startNattKeepalive(Network,int,PacketKeepaliveCallback,InetAddress,int,InetAddress)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/net/ConnectivityManager.java
Inconsistency (Non-Annotation):<android.net.ConnectivityManager: boolean isTetheringSupported()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/net/ConnectivityManager.java
Inconsistency (Non-Annotation):<android.net.ConnectivityManager: void reportInetCondition(int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/net/ConnectivityManager.java
Inconsistency (Non-Annotation):<android.hardware.radio.RadioTuner.Callback: void onError(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/hardware/radio/RadioTuner.java
Inconsistency (Non-Annotation):<android.graphics.drawable.DrawableContainer.DrawableContainerState: Drawable[] getChildren()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//graphics/java/android/graphics/drawable/DrawableContainer.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiEnterpriseConfig: void setSubjectMatch(String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//wifi/java/android/net/wifi/WifiEnterpriseConfig.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiEnterpriseConfig: String getSubjectMatch()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//wifi/java/android/net/wifi/WifiEnterpriseConfig.java
Inconsistency (Non-Annotation):<android.media.MediaPlayer: void setAudioStreamType(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//media/java/android/media/MediaPlayer.java
Inconsistency (Non-Annotation):<android.app.role.RoleControllerManager: void isApplicationQualifiedForRole(String,String,Executor,Consumer<Boolean>)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/app/role/RoleControllerManager.java
Inconsistency (Non-Annotation):<android.telecom.Connection.VideoProvider: void changeCallDataUsage(long)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//telecomm/java/android/telecom/Connection.java
Inconsistency (Non-Annotation):<com.android.server.notification.NotificationRecord: int getUserId()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//services/core/java/com/android/server/notification/NotificationRecord.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL.SurfaceConfig: void setColor(int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL.SurfaceConfig: void setAlpha(int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL.SurfaceConfig: void setDepth(int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL.SurfaceConfig: void setSamples(int,int,float)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void setSurface(SurfaceHolder,int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void setSurfaceTexture(SurfaceTexture,int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: int getHeight()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: int getWidth()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void pause()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void resume()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void bindRootScript(Script)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void bindProgramStore(ProgramStore)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void bindProgramFragment(ProgramFragment)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void bindProgramRaster(ProgramRaster)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void bindProgramVertex(ProgramVertex)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo: boolean isHeading()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/view/accessibility/AccessibilityNodeInfo.java
Inconsistency (Non-Annotation):<android.telecom.TelecomManager: PhoneAccountHandle getSimCallManager(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//telecomm/java/android/telecom/TelecomManager.java
Inconsistency (Non-Annotation):<android.telecom.TelecomManager: void clearAccounts()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//telecomm/java/android/telecom/TelecomManager.java
Inconsistency (Non-Annotation):<android.telecom.TelecomManager: ComponentName getDefaultPhoneApp()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//telecomm/java/android/telecom/TelecomManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: boolean shouldVibrate(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//media/java/android/media/AudioManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: int getVibrateSetting(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//media/java/android/media/AudioManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: void setVibrateSetting(int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//media/java/android/media/AudioManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: boolean isBluetoothA2dpOn()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//media/java/android/media/AudioManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: boolean isWiredHeadsetOn()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//media/java/android/media/AudioManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: int requestAudioFocus(OnAudioFocusChangeListener,int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//media/java/android/media/AudioManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: int requestAudioFocus(OnAudioFocusChangeListener,AudioAttributes,int,int,AudioPolicy)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//media/java/android/media/AudioManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: int abandonAudioFocus(OnAudioFocusChangeListener)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//media/java/android/media/AudioManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: int abandonAudioFocus(OnAudioFocusChangeListener,AudioAttributes)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//media/java/android/media/AudioManager.java
Inconsistency (Non-Annotation):<android.nfc.NfcAdapter: void setBeamPushUris(Uri[],Activity)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/nfc/NfcAdapter.java
Inconsistency (Non-Annotation):<android.nfc.NfcAdapter: void setBeamPushUrisCallback(CreateBeamUrisCallback,Activity)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/nfc/NfcAdapter.java
Inconsistency (Non-Annotation):<android.nfc.NfcAdapter: void setNdefPushMessage(NdefMessage,Activity,Activity)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/nfc/NfcAdapter.java
Inconsistency (Non-Annotation):<android.nfc.NfcAdapter: void setNdefPushMessageCallback(CreateNdefMessageCallback,Activity,Activity)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/nfc/NfcAdapter.java
Inconsistency (Non-Annotation):<android.nfc.NfcAdapter: void setOnNdefPushCompleteCallback(OnNdefPushCompleteCallback,Activity,Activity)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/nfc/NfcAdapter.java
Inconsistency (Non-Annotation):<android.nfc.NfcAdapter: boolean invokeBeam(Activity)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/nfc/NfcAdapter.java
Inconsistency (Non-Annotation):<android.nfc.NfcAdapter: boolean isNdefPushEnabled()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/nfc/NfcAdapter.java
Inconsistency (Non-Annotation):<android.telephony.TelephonyManager: void setVisualVoicemailEnabled(PhoneAccountHandle,boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//telephony/java/android/telephony/TelephonyManager.java
Inconsistency (Non-Annotation):<android.telephony.TelephonyManager: boolean isVisualVoicemailEnabled(PhoneAccountHandle)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//telephony/java/android/telephony/TelephonyManager.java
Inconsistency (Non-Annotation):<android.telephony.TelephonyManager: void setVoicemailRingtoneUri(PhoneAccountHandle,Uri)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//telephony/java/android/telephony/TelephonyManager.java
Inconsistency (Non-Annotation):<android.telephony.TelephonyManager: void setVoicemailVibrationEnabled(PhoneAccountHandle,boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//telephony/java/android/telephony/TelephonyManager.java
Inconsistency (Non-Annotation):<android.telephony.TelephonyManager: int setAllowedCarriers(int,List<CarrierIdentifier>)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//telephony/java/android/telephony/TelephonyManager.java
Inconsistency (Non-Annotation):<android.renderscript.Font: Font createFromFile(RenderScript,Resources,String,float)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Font.java
Inconsistency (Non-Annotation):<android.renderscript.Font: Font createFromFile(RenderScript,Resources,File,float)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Font.java
Inconsistency (Non-Annotation):<android.renderscript.Font: Font createFromAsset(RenderScript,Resources,String,float)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Font.java
Inconsistency (Non-Annotation):<android.renderscript.Font: Font createFromResource(RenderScript,Resources,int,float)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Font.java
Inconsistency (Non-Annotation):<android.renderscript.Font: Font create(RenderScript,Resources,String,Style,float)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/Font.java
Inconsistency (Non-Annotation):<android.view.textservice.TextServicesManager: TextServicesManager getInstance()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/view/textservice/TextServicesManager.java
Inconsistency (Non-Annotation):<android.renderscript.ScriptGroup: void setInput(KernelID,Allocation)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ScriptGroup.java
Inconsistency (Non-Annotation):<android.renderscript.ScriptGroup: void setOutput(KernelID,Allocation)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ScriptGroup.java
Inconsistency (Non-Annotation):<android.renderscript.ScriptGroup: void execute()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ScriptGroup.java
Inconsistency (Non-Annotation):<com.android.systemui.statusbar.notification.collection.notifcollection.NotifCollectionListener: void onRankingUpdate(RankingMap)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//packages/SystemUI/src/com/android/systemui/statusbar/notification/collection/notifcollection/NotifCollectionListener.java
Inconsistency (Non-Annotation):<android.telephony.data.DataCallResponse.Builder: Builder setMtu(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//telephony/java/android/telephony/data/DataCallResponse.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: void onSurfaceTextureAvailable(SurfaceTexture,int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: void onSurfaceTextureSizeChanged(SurfaceTexture,int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: boolean onSurfaceTextureDestroyed(SurfaceTexture)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: void onSurfaceTextureUpdated(SurfaceTexture)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: void pause()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: void resume()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: RenderScriptGL createRenderScriptGL(SurfaceConfig)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: void destroyRenderScriptGL()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: void setRenderScriptGL(RenderScriptGL)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: RenderScriptGL getRenderScriptGL()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/RSTextureView.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiManager: String getCurrentNetworkWpsNfcConfigurationToken()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//wifi/java/android/net/wifi/WifiManager.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiManager.WpsCallback: void onStarted(String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//wifi/java/android/net/wifi/WifiManager.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiManager.WpsCallback: void onSucceeded()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//wifi/java/android/net/wifi/WifiManager.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiManager.WpsCallback: void onFailed(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//wifi/java/android/net/wifi/WifiManager.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiManager: void startWps(WpsInfo,WpsCallback)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//wifi/java/android/net/wifi/WifiManager.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiManager: void cancelWps(WpsCallback)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//wifi/java/android/net/wifi/WifiManager.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiManager: boolean setEnableAutoJoinWhenAssociated(boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//wifi/java/android/net/wifi/WifiManager.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiManager: boolean getEnableAutoJoinWhenAssociated()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//wifi/java/android/net/wifi/WifiManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsConfig: int getProvisionedValue(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//telephony/java/com/android/ims/ImsConfig.java
Inconsistency (Non-Annotation):<com.android.ims.ImsConfig: String getProvisionedStringValue(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//telephony/java/com/android/ims/ImsConfig.java
Inconsistency (Non-Annotation):<com.android.ims.ImsConfig: int setProvisionedValue(int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//telephony/java/com/android/ims/ImsConfig.java
Inconsistency (Non-Annotation):<com.android.ims.ImsConfig: int setProvisionedStringValue(int,String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//telephony/java/com/android/ims/ImsConfig.java
Inconsistency (Non-Annotation):<android.app.Notification.Builder: Builder addPerson(String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/app/Notification.java
Inconsistency (Non-Annotation):<android.app.Notification.MessagingStyle: CharSequence getUserDisplayName()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/app/Notification.java
Inconsistency (Non-Annotation):<android.app.Notification.MessagingStyle: MessagingStyle addMessage(CharSequence,long,CharSequence)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/app/Notification.java
Inconsistency (Non-Annotation):<android.app.Notification.MessagingStyle.Message: CharSequence getSender()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/app/Notification.java
Inconsistency (Non-Annotation):<android.opengl.GLES30: void glGetTransformFeedbackVarying(int,int,int,IntBuffer,IntBuffer,IntBuffer,byte)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//opengl/java/android/opengl/GLES30.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramFragment.Builder: ProgramFragment create()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramFragment.java
Inconsistency (Non-Annotation):<com.android.uiautomator.testrunner.UiAutomatorTestCase: IAutomationSupport getAutomationSupport()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//cmds/uiautomator/instrumentation/testrunner-src/com/android/uiautomator/testrunner/UiAutomatorTestCase.java
Inconsistency (Non-Annotation):<android.app.AppOpsManager: void finishOp(String,int,String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/app/AppOpsManager.java
Inconsistency (Non-Annotation):<android.app.AppOpsManager: void finishOp(int,int,String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/app/AppOpsManager.java
Inconsistency (Non-Annotation):<android.drm.DrmSupportInfo: String getDescriprition()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//drm/java/android/drm/DrmSupportInfo.java
Inconsistency (Non-Annotation):<android.app.ActivityManagerNative: IActivityManager asInterface(IBinder)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/app/ActivityManagerNative.java
Inconsistency (Non-Annotation):<android.app.ActivityManagerNative: IActivityManager getDefault()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/app/ActivityManagerNative.java
Inconsistency (Non-Annotation):<android.app.ActivityManagerNative: boolean isSystemReady()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/app/ActivityManagerNative.java
Inconsistency (Non-Annotation):<android.app.ActivityManagerNative: void broadcastStickyIntent(Intent,String,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/app/ActivityManagerNative.java
Inconsistency (Non-Annotation):<android.app.ActivityManagerNative: void broadcastStickyIntent(Intent,String,int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/app/ActivityManagerNative.java
Inconsistency (Non-Annotation):<android.app.ActivityManagerNative: void noteWakeupAlarm(PendingIntent,int,String,String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/app/ActivityManagerNative.java
Inconsistency (Non-Annotation):<android.app.ActivityManagerNative: void noteAlarmStart(PendingIntent,int,String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/app/ActivityManagerNative.java
Inconsistency (Non-Annotation):<android.app.ActivityManagerNative: void noteAlarmFinish(PendingIntent,int,String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/app/ActivityManagerNative.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction: void bindConstants(Constants)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramVertexFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction.InternalBuilder: InternalBuilder addInput(Element)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramVertexFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction.InternalBuilder: ProgramVertexFixedFunction create()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramVertexFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction.Builder: Builder setTextureMatrixEnable(boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramVertexFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction.Builder: ProgramVertexFixedFunction create()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramVertexFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction.Constants: void destroy()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramVertexFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction.Constants: void setModelview(Matrix4f)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramVertexFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction.Constants: void setProjection(Matrix4f)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramVertexFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction.Constants: void setTexture(Matrix4f)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//rs/java/android/renderscript/ProgramVertexFixedFunction.java
<android.telephony.SignalStrength: boolean isGsm()>
/**
 * @return true if this is for GSM
 *
 * @deprecated This method returns true if there are any 3gpp type SignalStrength elements in
 * this SignalStrength report or if the report contains no valid SignalStrength
 * information. Instead callers should use
 * {@link android.telephony.SignalStrength#getCellSignalStrengths
 * getCellSignalStrengths()} to determine which types of information are contained
 * in the SignalStrength report.
 */
====>[PUBLIC]<android.telephony.SignalStrength: boolean isGsm()>    ---->    android.telephony.SignalStrength#getCellSignalStrengths  getCellSignalStrengths()
<android.telephony.PhoneNumberUtils: byte[] numberToCalledPartyBCD(String)>
/**
 * Convert a dialing number to BCD byte array
 *
 * @param number dialing number string. If the dialing number starts with '+', set to
 * international TOA
 *
 * @return BCD byte array
 *
 * @deprecated use {@link #numberToCalledPartyBCD(String, int)} instead. Calling this method
 * is equivalent to calling {@link #numberToCalledPartyBCD(String, int)} with
 * {@link #BCD_EXTENDED_TYPE_EF_ADN} as the extended type.
 */
====>[PUBLIC]<android.telephony.PhoneNumberUtils: byte[] numberToCalledPartyBCD(String)>    ---->    #numberToCalledPartyBCD(String, int)
<android.net.Proxy: String getDefaultHost()>
/**
 * Return the default proxy host specified by the carrier.
 * @return String containing the host name or null if there is no proxy for
 * this carrier.
 * @deprecated Use standard java vm proxy values to find the host, port and
 * exclusion list.  This call ignores the exclusion list and no
 * longer reports only mobile-data apn-based proxy values.
 */
====>[PUBLIC]<android.net.Proxy: String getDefaultHost()>    ---->    
<android.graphics.ImageDecoder: boolean getAsAlphaMask()>
/**
 * @removed
 * @deprecated Renamed to {@link #isDecodeAsAlphaMaskEnabled}.
 */
====>[HIDDEN]<android.graphics.ImageDecoder: boolean getAsAlphaMask()>    ---->    #isDecodeAsAlphaMaskEnabled
<android.renderscript.Mesh.Builder: Builder addIndexSetType(Primitive)>
/**
 * @deprecated in API 16
 * Adds an index set primitive type to the builder object
 *
 * @param p primitive type
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.Builder: Builder addIndexSetType(Primitive)>    ---->    
<android.net.wifi.WifiManager: void removePasspointConfiguration(String)>
/**
 * Remove the Passpoint configuration identified by its FQDN (Fully Qualified Domain Name) added
 * by the caller.
 *
 * @param fqdn The FQDN of the Passpoint configuration added by the caller to be removed
 * @throws IllegalArgumentException if no configuration is associated with the given FQDN or
 * Passpoint is not enabled on the device.
 * @deprecated This will be non-functional in a future release.
 */
====>[PUBLIC]<android.net.wifi.WifiManager: void removePasspointConfiguration(String)>    ---->    
<android.webkit.CacheManager: void saveCacheFile(String,CacheResult)>
/**
 * Adds a cache entry to the HTTP cache for the specicifed URL. Also closes
 * the cache entry's output stream.
 *
 * @param url the URL for which the cache entry should be added
 * @param cacheResult the cache entry to add
 * @deprecated Access to the HTTP cache will be removed in a future release.
 */
====>[PUBLIC]<android.webkit.CacheManager: void saveCacheFile(String,CacheResult)>    ---->    
Inconsistency (Non-Documentation):<android.content.ContextWrapper: int getWallpaperDesiredMinimumWidth()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/content/ContextWrapper.java
<android.content.ContextWrapper: int getWallpaperDesiredMinimumWidth()>

====>[PUBLIC]<android.content.ContextWrapper: int getWallpaperDesiredMinimumWidth()>    ---->    
<android.location.LocationManager: void setLocationControllerExtraPackage(String)>
/**
 * Set the extra location controller package for location services on the device.
 *
 * @removed
 * @deprecated Use {@link #setExtraLocationControllerPackage} instead.
 * @hide
 */
====>[HIDDEN]<android.location.LocationManager: void setLocationControllerExtraPackage(String)>    ---->    #setExtraLocationControllerPackage
<android.renderscript.RSSurfaceView: void setRenderScriptGL(RenderScriptGL)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.RSSurfaceView: void setRenderScriptGL(RenderScriptGL)>    ---->    
<android.telecom.RemoteConference: void setAudioState(AudioState)>
/**
 * Request to change the conference's audio routing to the specified state. The specified state
 * can include audio routing (Bluetooth, Speaker, etc) and muting state.
 *
 * @see android.telecom.AudioState
 * @deprecated Use {@link #setCallAudioState(CallAudioState)} instead.
 * @hide
 */
====>[HIDDEN]<android.telecom.RemoteConference: void setAudioState(AudioState)>    ---->    #setCallAudioState(CallAudioState)
<android.os.storage.StorageManager: long benchmark(String)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.os.storage.StorageManager: long benchmark(String)>    ---->    
<android.net.NetworkPolicyManager: boolean isUidValidForPolicy(Context,int)>
/**
 * Check if given UID can have a {@link #setUidPolicy(int, int)} defined,
 * usually to protect critical system services.
 * @hide
 */
====>[HIDDEN]<android.net.NetworkPolicyManager: boolean isUidValidForPolicy(Context,int)>    ---->    
<android.graphics.RenderNode: RecordingCanvas start(int,int)>
/**
 * @hide
 * @deprecated use {@link #beginRecording(int, int)} instead
 */
====>[HIDDEN]<android.graphics.RenderNode: RecordingCanvas start(int,int)>    ---->    #beginRecording(int, int)
<android.telecom.StatusHints: Drawable getIcon(Context)>
/**
 * @return An icon displayed in the in-call UI.
 *
 * @hide
 */
====>[HIDDEN]<android.telecom.StatusHints: Drawable getIcon(Context)>    ---->    
<android.hardware.radio.RadioManager.ProgramInfo: int getSubChannel()>
/**
 * Sub channel ID. E.g 1 for HD radio HD1
 * @return the program sub channel
 * @deprecated Use {@link getSelector()} instead.
 */
====>[PUBLIC]<android.hardware.radio.RadioManager.ProgramInfo: int getSubChannel()>    ---->    getSelector()
Inconsistency (Non-Documentation):<android.content.pm.ShortcutQueryWrapper: void __metadata()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/content/pm/ShortcutQueryWrapper.java
<android.content.pm.ShortcutQueryWrapper: void __metadata()>

====>[PUBLIC]<android.content.pm.ShortcutQueryWrapper: void __metadata()>    ---->    
<android.app.AppOpsManager: int noteProxyOpNoThrow(String,String)>
/**
 * @deprecated Use {@link #noteProxyOpNoThrow(String, String, int, String, String)} instead
 */
====>[PUBLIC]<android.app.AppOpsManager: int noteProxyOpNoThrow(String,String)>    ---->    #noteProxyOpNoThrow(String, String, int, String, String)
<android.webkit.WebView: boolean overlayVerticalScrollbar()>
/**
 * Gets whether vertical scrollbar has overlay style.
 *
 * @deprecated This method is now obsolete.
 * @return {@code false}
 */
====>[PUBLIC]<android.webkit.WebView: boolean overlayVerticalScrollbar()>    ---->    
<android.util.proto.ProtoOutputStream: void endRepeatedObject(long)>
/**
 * End a child object. Pass in the token from the correspoinding startRepeatedObject call.
 *
 * @deprecated Use {@link #end(long)} instead.
 * @hide
 */
====>[HIDDEN]<android.util.proto.ProtoOutputStream: void endRepeatedObject(long)>    ---->    #end(long)
<android.widget.ImageView: void setAlpha(int)>
/**
 * Sets the alpha value that should be applied to the image.
 *
 * @param alpha the alpha value that should be applied to the image
 *
 * @deprecated use #setImageAlpha(int) instead
 */
====>[PUBLIC]<android.widget.ImageView: void setAlpha(int)>    ---->    #setImageAlpha(int)
<android.speech.tts.TextToSpeech: int synthesizeToFile(String,HashMap<String, String>,String)>
/**
 * Synthesizes the given text to a file using the specified parameters.
 * This method is asynchronous, i.e. the method just adds the request to the queue of TTS
 * requests and then returns. The synthesis might not have finished (or even started!) at the
 * time when this method returns. In order to reliably detect errors during synthesis,
 * we recommend setting an utterance progress listener (see
 * {@link #setOnUtteranceProgressListener}) and using the
 * {@link Engine#KEY_PARAM_UTTERANCE_ID} parameter.
 *
 * @param text The text that should be synthesized. No longer than
 * {@link #getMaxSpeechInputLength()} characters.
 * @param params Parameters for the request. Cannot be null.
 * Supported parameter names:
 * {@link Engine#KEY_PARAM_UTTERANCE_ID}.
 * Engine specific parameters may be passed in but the parameter keys
 * must be prefixed by the name of the engine they are intended for. For example
 * the keys "com.svox.pico_foo" and "com.svox.pico:bar" will be passed to the
 * engine named "com.svox.pico" if it is being used.
 * @param filename Absolute file filename to write the generated audio data to.It should be
 * something like "/sdcard/myappsounds/mysound.wav".
 *
 * @return {@link #ERROR} or {@link #SUCCESS} of <b>queuing</b> the synthesizeToFile operation.
 * @deprecated As of API level 21, replaced by
 * {@link #synthesizeToFile(CharSequence, Bundle, File, String)}.
 */
====>[PUBLIC]<android.speech.tts.TextToSpeech: int synthesizeToFile(String,HashMap<String, String>,String)>    ---->    #synthesizeToFile(CharSequence, Bundle, File, String)
<android.view.View: void setOnSystemUiVisibilityChangeListener(OnSystemUiVisibilityChangeListener)>
/**
 * Set a listener to receive callbacks when the visibility of the system bar changes.
 * @param l  The {@link OnSystemUiVisibilityChangeListener} to receive callbacks.
 *
 * @deprecated Use {@link WindowInsets#isVisible(int)} to find out about system bar visibilities
 * by setting a {@link OnApplyWindowInsetsListener} on this view.
 */
====>[PUBLIC]<android.view.View: void setOnSystemUiVisibilityChangeListener(OnSystemUiVisibilityChangeListener)>    ---->    WindowInsets#isVisible(int)
<android.app.Activity: void setProgress(int)>
/**
 * Sets the progress for the progress bars in the title.
 * <p>
 * In order for the progress bar to be shown, the feature must be requested
 * via {@link #requestWindowFeature(int)}.
 *
 * @param progress The progress for the progress bar. Valid ranges are from
 * 0 to 10000 (both inclusive). If 10000 is given, the progress
 * bar will be completely filled and will fade out.
 * @deprecated No longer supported starting in API 21.
 */
====>[PUBLIC]<android.app.Activity: void setProgress(int)>    ---->    
<android.os.StatFs: int getBlockCount()>
/**
 * @deprecated Use {@link #getBlockCountLong()} instead.
 */
====>[PUBLIC]<android.os.StatFs: int getBlockCount()>    ---->    #getBlockCountLong()
<android.util.proto.ProtoOutputStream: void writeRepeatedUInt64(long,long)>
/**
 * Write a single proto "uint64" type field value.
 *
 * @deprecated Use {@link #write(long, long)} instead.
 * @hide
 */
====>[HIDDEN]<android.util.proto.ProtoOutputStream: void writeRepeatedUInt64(long,long)>    ---->    #write(long, long)
<android.renderscript.Mesh.AllocationBuilder: AllocationBuilder addIndexSetType(Primitive)>
/**
 * @deprecated in API 16
 * Adds an index set type to the builder
 *
 * @param p index set primitive type
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.AllocationBuilder: AllocationBuilder addIndexSetType(Primitive)>    ---->    
<android.util.proto.ProtoOutputStream: void writeInt64(long,long)>
/**
 * Write a single proto "int64" type field value.
 *
 * @deprecated Use {@link #write(long, long)} instead.
 * @hide
 */
====>[HIDDEN]<android.util.proto.ProtoOutputStream: void writeInt64(long,long)>    ---->    #write(long, long)
<android.text.method.DigitsKeyListener: void <init>(boolean,boolean)>
/**
 * Allocates a DigitsKeyListener that accepts the ASCII digits 0 through 9, plus the ASCII plus
 * or minus sign (only at the beginning) and/or the ASCII period ('.') as the decimal point
 * (only one per field) if specified.
 *
 * @deprecated Use {@link #DigitsKeyListener(Locale, boolean, boolean)} instead.
 */
====>[PUBLIC]<android.text.method.DigitsKeyListener: void <init>(boolean,boolean)>    ---->    #DigitsKeyListener(Locale, boolean, boolean)
<android.content.pm.PackageItemInfo: CharSequence loadSafeLabel(PackageManager)>
/**
 * @hide
 * @deprecated use loadSafeLabel(PackageManager, float, int) instead
 */
====>[HIDDEN]<android.content.pm.PackageItemInfo: CharSequence loadSafeLabel(PackageManager)>    ---->    loadSafeLabel(PackageManager, float, int)
<android.os.Environment: File getUserConfigDirectory(int)>
/**
 * Returns the config directory for a user. This is for use by system
 * services to store files relating to the user which should be readable by
 * any app running as that user.
 *
 * @deprecated This directory is valid and still exists, but callers should
 * <em>strongly</em> consider switching to
 * {@link #getDataMiscCeDirectory(int)} which is protected with
 * user credentials or {@link #getDataMiscDeDirectory(int)}
 * which supports fast user wipe.
 * @hide
 */
====>[HIDDEN]<android.os.Environment: File getUserConfigDirectory(int)>    ---->    #getDataMiscCeDirectory(int)
<android.text.style.ImageSpan: void <init>(Bitmap)>
/**
 * @deprecated Use {@link #ImageSpan(Context, Bitmap)} instead.
 */
====>[PUBLIC]<android.text.style.ImageSpan: void <init>(Bitmap)>    ---->    #ImageSpan(Context, Bitmap)
<android.net.NetworkPolicyManager: Iterator<Pair<ZonedDateTime, ZonedDateTime>> cycleIterator(NetworkPolicy)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.net.NetworkPolicyManager: Iterator<Pair<ZonedDateTime, ZonedDateTime>> cycleIterator(NetworkPolicy)>    ---->    
<android.test.TouchUtils: void drag(ActivityInstrumentationTestCase,float,float,float,float,int)>
/**
 * Simulate touching a specific location and dragging to a new location.
 *
 * @param test The test case that is being run
 * @param fromX X coordinate of the initial touch, in screen coordinates
 * @param toX Xcoordinate of the drag destination, in screen coordinates
 * @param fromY X coordinate of the initial touch, in screen coordinates
 * @param toY Y coordinate of the drag destination, in screen coordinates
 * @param stepCount How many move steps to include in the drag
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: void drag(ActivityInstrumentationTestCase,float,float,float,float,int)>    ---->    android.test.ActivityInstrumentationTestCase2
<android.widget.PopupWindow: boolean isLayoutInScreenEnabled()>
/**
 * <p>Indicates whether the popup window will be forced into using absolute screen coordinates
 * for positioning.</p>
 *
 * @return true if the window will always be positioned in screen coordinates.
 *
 * @deprecated Use {@link #isLaidOutInScreen()} instead
 * @removed
 */
====>[HIDDEN]<android.widget.PopupWindow: boolean isLayoutInScreenEnabled()>    ---->    #isLaidOutInScreen()
<android.view.View: void setDrawingCacheBackgroundColor(int)>
/**
 * Setting a solid background color for the drawing cache's bitmaps will improve
 * performance and memory usage. Note, though that this should only be used if this
 * view will always be drawn on top of a solid color.
 *
 * @param color The background color to use for the drawing cache's bitmap
 *
 * @see #setDrawingCacheEnabled(boolean)
 * @see #buildDrawingCache()
 * @see #getDrawingCache()
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: void setDrawingCacheBackgroundColor(int)>    ---->    #setLayerType(int, Paint)
<android.telephony.SignalStrength: int getCdmaEcio()>
/**
 * Get the CDMA Ec/Io value in dB*10
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthCdma#getCdmaEcio}.
 *
 * @see android.telephony#CellSignalStrengthCdma
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 */
====>[PUBLIC]<android.telephony.SignalStrength: int getCdmaEcio()>    ---->    android.telephony#CellSignalStrengthCdma
<android.app.AppOpsManager: int startOp(String,int,String)>
/**
 * @deprecated use {@link #startOp(String, int, String, String, String)} instead
 */
====>[PUBLIC]<android.app.AppOpsManager: int startOp(String,int,String)>    ---->    #startOp(String, int, String, String, String)
<android.media.MediaCodec: ByteBuffer[] getInputBuffers()>
/**
 * Retrieve the set of input buffers.  Call this after start()
 * returns. After calling this method, any ByteBuffers
 * previously returned by an earlier call to this method MUST no
 * longer be used.
 *
 * @deprecated Use the new {@link #getInputBuffer} method instead
 * each time an input buffer is dequeued.
 *
 * <b>Note:</b> As of API 21, dequeued input buffers are
 * automatically {@link java.nio.Buffer#clear cleared}.
 *
 * <em>Do not use this method if using an input surface.</em>
 *
 * @throws IllegalStateException if not in the Executing state,
 * or codec is configured in asynchronous mode.
 * @throws MediaCodec.CodecException upon codec error.
 */
====>[PUBLIC]<android.media.MediaCodec: ByteBuffer[] getInputBuffers()>    ---->    #getInputBuffer
<android.hardware.fingerprint.FingerprintManager: boolean hasEnrolledFingerprints()>
/**
 * Determine if there is at least one fingerprint enrolled.
 *
 * @return true if at least one fingerprint is enrolled, false otherwise
 * @deprecated See {@link BiometricPrompt} and
 * {@link FingerprintManager#FINGERPRINT_ERROR_NO_FINGERPRINTS}
 */
====>[PUBLIC]<android.hardware.fingerprint.FingerprintManager: boolean hasEnrolledFingerprints()>    ---->    BiometricPrompt
<android.net.TetheringManager: int setUsbTethering(boolean)>
/**
 * Attempt to both alter the mode of USB and Tethering of USB.
 *
 * @deprecated New client should not use this API anymore. All clients should use
 * #startTethering or #stopTethering which encapsulate proper entitlement logic. If the API is
 * used and an entitlement check is needed, downstream USB tethering will be enabled but will
 * not have any upstream.
 *
 * {@hide}
 */
====>[HIDDEN]<android.net.TetheringManager: int setUsbTethering(boolean)>    ---->    
<android.app.usage.StorageStatsManager: long getTotalBytes(String)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.usage.StorageStatsManager: long getTotalBytes(String)>    ---->    
<android.database.sqlite.SQLiteQueryBuilder: boolean isProjectionAggregationAllowed()>
/**
 * {@hide}
 */
====>[HIDDEN]<android.database.sqlite.SQLiteQueryBuilder: boolean isProjectionAggregationAllowed()>    ---->    
<android.net.NetworkStats: NetworkStats combineValues(String,int,int,long,long,long,long,long)>
/**
 * @hide
 */
====>[HIDDEN]<android.net.NetworkStats: NetworkStats combineValues(String,int,int,long,long,long,long,long)>    ---->    
<android.widget.PopupWindow: void setClipToScreenEnabled(boolean)>
/**
 * <p>Clip this popup window to the screen, but not to the containing window.</p>
 *
 * <p>If the popup is showing, calling this method will take effect only
 * the next time the popup is shown or through a manual call to one of
 * the {@link #update()} methods.</p>
 *
 * @deprecated Use {@link #setIsClippedToScreen(boolean)} instead
 * @removed
 */
====>[HIDDEN]<android.widget.PopupWindow: void setClipToScreenEnabled(boolean)>    ---->    #setIsClippedToScreen(boolean)
<android.graphics.Canvas: boolean quickReject(RectF,EdgeType)>
/**
 * Return true if the specified rectangle, after being transformed by the
 * current matrix, would lie completely outside of the current clip. Call
 * this to check if an area you intend to draw into is clipped out (and
 * therefore you can skip making the draw calls).
 *
 * @param rect  the rect to compare with the current clip
 * @param type  {@link Canvas.EdgeType#AA} if the path should be considered antialiased,
 * since that means it may affect a larger area (more pixels) than
 * non-antialiased ({@link Canvas.EdgeType#BW}).
 * @return      true if the rect (transformed by the canvas' matrix)
 * does not intersect with the canvas' clip
 * @deprecated The EdgeType is ignored. Use {@link #quickReject(RectF)} instead.
 */
====>[PUBLIC]<android.graphics.Canvas: boolean quickReject(RectF,EdgeType)>    ---->    #quickReject(RectF)
<android.app.backup.BackupManager: String getDataManagementLabel(String)>
/**
 * Returns a {@link String} describing what the specified transport's data management intent is
 * used for. This value is set by {@link #updateTransportAttributes(ComponentName, String,
 * Intent, String, Intent, CharSequence)}.
 *
 * @param transportName The name of the registered transport.
 * @deprecated Since Android Q, please use the variant {@link
 * #getDataManagementIntentLabel(String)} instead.
 * @hide
 */
====>[HIDDEN]<android.app.backup.BackupManager: String getDataManagementLabel(String)>    ---->    #getDataManagementIntentLabel(String)
<android.graphics.Outline: void setConvexPath(Path)>
/**
 * Sets the Outline to a
 * {@link android.graphics.Path#isConvex() convex path}.
 *
 * @param convexPath used to construct the Outline. As of
 * {@link android.os.Build.VERSION_CODES#Q}, it is no longer required to be
 * convex.
 *
 * @deprecated As of {@link android.os.Build.VERSION_CODES#Q}, the restriction
 * that the path must be convex is removed. However, the API is misnamed until
 * {@link android.os.Build.VERSION_CODES#R}, when {@link #setPath} is
 * introduced. Use {@link #setPath} instead.
 */
====>[PUBLIC]<android.graphics.Outline: void setConvexPath(Path)>    ---->    #setPath
<android.content.pm.PackageManager: int installExistingPackageAsUser(String,int)>
/**
 * If there is already an application with the given package name installed
 * on the system for other users, also install it for the specified user.
 * @hide
 *
 * @deprecated use {@link PackageInstaller#installExistingPackage()} instead.
 */
====>[HIDDEN]<android.content.pm.PackageManager: int installExistingPackageAsUser(String,int)>    ---->    PackageInstaller#installExistingPackage()
<android.content.pm.PackageParser: Pair<String, String> parsePackageSplitNames(XmlPullParser,AttributeSet)>
/**
 * @deprecated Use {@link android.content.pm.parsing.ApkLiteParseUtils#parsePackageSplitNames}
 */
====>[PUBLIC]<android.content.pm.PackageParser: Pair<String, String> parsePackageSplitNames(XmlPullParser,AttributeSet)>    ---->    android.content.pm.parsing.ApkLiteParseUtils#parsePackageSplitNames
<android.webkit.UrlInterceptHandler: PluginData getPluginData(String,Map<String, String>)>
/**
 * Given an URL, returns the PluginData which contains the
 * surrogate response for the request, or {@code null} if the handler is
 * not interested.
 *
 * @param url URL string.
 * @param headers The headers associated with the request.
 * @return The PluginData containing the surrogate response.
 *
 * @hide
 * @deprecated Do not use, this interface is deprecated.
 */
====>[HIDDEN]<android.webkit.UrlInterceptHandler: PluginData getPluginData(String,Map<String, String>)>    ---->    
<android.preference.PreferenceActivity: boolean onPreferenceTreeClick(PreferenceScreen,Preference)>
/**
 * {@inheritDoc}
 *
 * @deprecated This function is not relevant for a modern fragment-based
 * PreferenceActivity.
 */
====>[PUBLIC]<android.preference.PreferenceActivity: boolean onPreferenceTreeClick(PreferenceScreen,Preference)>    ---->    
Inconsistency (Non-Documentation):<android.app.Notification.Action.WearableExtender: CharSequence getConfirmLabel()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/app/Notification.java
<android.app.Notification.Action.WearableExtender: CharSequence getConfirmLabel()>
/**
 * Get the label to display to confirm that the action should be executed.
 * This is usually an imperative verb like "Send".
 *
 * @return the label to confirm the action should be executed
 */
====>[PUBLIC]<android.app.Notification.Action.WearableExtender: CharSequence getConfirmLabel()>    ---->    
Inconsistency (Non-Documentation):<android.app.Notification.Action.WearableExtender: WearableExtender setCancelLabel(CharSequence)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/app/Notification.java
<android.app.Notification.Action.WearableExtender: WearableExtender setCancelLabel(CharSequence)>
/**
 * Set a label to display to cancel the action.
 * This is usually an imperative verb, like "Cancel".
 *
 * @param label the label to display to cancel the action
 * @return this object for method chaining
 */
====>[PUBLIC]<android.app.Notification.Action.WearableExtender: WearableExtender setCancelLabel(CharSequence)>    ---->    
<com.android.server.SystemService: void onCleanupUser(int)>
/**
 * @deprecated subclasses should extend {@link #onUserStopped(TargetUser)} instead (which by
 * default calls this method).
 *
 * @hide
 */
====>[HIDDEN]<com.android.server.SystemService: void onCleanupUser(int)>    ---->    rStopped(TargetUser)}
<android.net.NetworkInfo: void setExtraInfo(String)>
/**
 * Set the extraInfo field.
 * @param extraInfo an optional {@code String} providing addditional network state
 * information passed up from the lower networking layers.
 * @deprecated See {@link NetworkInfo#getExtraInfo}.
 * @hide
 */
====>[HIDDEN]<android.net.NetworkInfo: void setExtraInfo(String)>    ---->    NetworkInfo#getExtraInfo
<com.android.settingslib.wifi.AccessPoint: String getConfigName()>
/**
 * Returns the name associated with the stored config.
 * @deprecated Please use {@link #getTitle()} instead to get the display name of an AccessPoint.
 */
====>[PUBLIC]<com.android.settingslib.wifi.AccessPoint: String getConfigName()>    ---->    #getTitle()
<android.os.Debug: int getGlobalGcInvocationCount()>
/**
 * Returns the number of non-concurrent GC invocations between a
 * {@link #startAllocCounting() start} and {@link #stopAllocCounting() stop}.
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: int getGlobalGcInvocationCount()>    ---->    
<android.accounts.AccountManager: AccountManagerFuture<Boolean> removeAccount(Account,AccountManagerCallback<Boolean>,Handler)>
/**
 * Removes an account from the AccountManager.  Does nothing if the account
 * does not exist.  Does not delete the account from the server.
 * The authenticator may have its own policies preventing account
 * deletion, in which case the account will not be deleted.
 *
 * <p>This method requires the caller to have a signature match with the
 * authenticator that manages the specified account.
 *
 * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,
 * MANAGE_ACCOUNTS permission is needed for those platforms. See docs for
 * this function in API level 22.
 *
 * @param account The {@link Account} to remove
 * @param callback Callback to invoke when the request completes,
 * null for no callback
 * @param handler {@link Handler} identifying the callback thread,
 * null for the main thread
 * @return An {@link AccountManagerFuture} which resolves to a Boolean,
 * true if the account has been successfully removed
 * @deprecated use
 * {@link #removeAccount(Account, Activity, AccountManagerCallback, Handler)}
 * instead
 */
====>[PUBLIC]<android.accounts.AccountManager: AccountManagerFuture<Boolean> removeAccount(Account,AccountManagerCallback<Boolean>,Handler)>    ---->    #removeAccount(Account, Activity, AccountManagerCallback, Handler)
<android.content.Context: File getSharedPrefsFile(String)>
/**
 * @hide
 * @deprecated use {@link #getSharedPreferencesPath(String)}
 */
====>[HIDDEN]<android.content.Context: File getSharedPrefsFile(String)>    ---->    #getSharedPreferencesPath(String)
<android.graphics.drawable.BitmapDrawable: void <init>(Resources)>
/**
 * Create an empty drawable, setting initial target density based on
 * the display metrics of the resources.
 *
 * @deprecated Use {@link #BitmapDrawable(android.content.res.Resources, android.graphics.Bitmap)}
 * instead to specify a bitmap to draw with.
 */
====>[PUBLIC]<android.graphics.drawable.BitmapDrawable: void <init>(Resources)>    ---->    #BitmapDrawable(android.content.res.Resources, android.graphics.Bitmap)
<com.android.systemui.media.NotificationPlayer: void play(Context,Uri,boolean,int)>
/**
 * Start playing the sound.  It will actually start playing at some
 * point in the future.  There are no guarantees about latency here.
 * Calling this before another audio file is done playing will stop
 * that one and start the new one.
 *
 * @param context Your application's context.
 * @param uri The URI to play.  (see {@link MediaPlayer#setDataSource(Context, Uri)})
 * @param looping Whether the audio should loop forever.
 * (see {@link MediaPlayer#setLooping(boolean)})
 * @param stream the AudioStream to use.
 * (see {@link MediaPlayer#setAudioStreamType(int)})
 * @deprecated use {@link #play(Context, Uri, boolean, AudioAttributes)} instead.
 */
====>[PUBLIC]<com.android.systemui.media.NotificationPlayer: void play(Context,Uri,boolean,int)>    ---->    #play(Context, Uri, boolean, AudioAttributes)
<android.text.DynamicLayout: void <init>(CharSequence,CharSequence,TextPaint,int,Alignment,TextDirectionHeuristic,float,float,boolean,int,int,int,TruncateAt,int)>
/**
 * Make a layout for the transformed text (password transformation being the primary example of
 * a transformation) that will be updated as the base text is changed. If ellipsize is non-null,
 * the Layout will ellipsize the text down to ellipsizedWidth.
 *
 * @hide
 * @deprecated Use {@link Builder} instead.
 */
====>[HIDDEN]<android.text.DynamicLayout: void <init>(CharSequence,CharSequence,TextPaint,int,Alignment,TextDirectionHeuristic,float,float,boolean,int,int,int,TruncateAt,int)>    ---->    Builder
<android.telephony.TelephonyManager: void call(String,String)>
/**
 * @deprecated Use  {@link android.telecom.TelecomManager#placeCall(Uri address,
 * Bundle extras)} instead.
 * @hide
 */
====>[HIDDEN]<android.telephony.TelephonyManager: void call(String,String)>    ---->    android.telecom.TelecomManager#placeCall(Uri address,  Bundle extras)
<android.renderscript.Mesh.AllocationBuilder: void <init>(RenderScript)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.Mesh.AllocationBuilder: void <init>(RenderScript)>    ---->    
<android.telephony.SignalStrength: int getWcdmaRscp()>
/**
 * Gets WCDMA RSCP as a dBm value between -120 and -24, as defined in TS 27.007 8.69.
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthWcdma#getRscp}.
 *
 * @see android.telephony#CellSignalStrengthWcdma
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getWcdmaRscp()>    ---->    android.telephony#CellSignalStrengthWcdma
Inconsistency (Non-Documentation):<android.content.IContentProvider: int bulkInsert(String,Uri,ContentValues[])> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/content/IContentProvider.java
<android.content.IContentProvider: int bulkInsert(String,Uri,ContentValues[])>

====>[PUBLIC]<android.content.IContentProvider: int bulkInsert(String,Uri,ContentValues[])>    ---->    
<android.widget.TextView: void setTextAppearance(Context,int)>
/**
 * Sets the text color, size, style, hint color, and highlight color
 * from the specified TextAppearance resource.
 *
 * @deprecated Use {@link #setTextAppearance(int)} instead.
 */
====>[PUBLIC]<android.widget.TextView: void setTextAppearance(Context,int)>    ---->    #setTextAppearance(int)
Inconsistency (Non-Documentation):<android.net.NetworkStatsHistory.DataStreamUtils: long[] readFullLongArray(DataInputStream)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/net/NetworkStatsHistory.java
<android.net.NetworkStatsHistory.DataStreamUtils: long[] readFullLongArray(DataInputStream)>

====>[PUBLIC]<android.net.NetworkStatsHistory.DataStreamUtils: long[] readFullLongArray(DataInputStream)>    ---->    
<android.renderscript.Mesh: Allocation getVertexAllocation(int)>
/**
 * @deprecated in API 16
 * @param slot index in the list of allocations to return
 * @return vertex data allocation at the given index
 */
====>[PUBLIC]<android.renderscript.Mesh: Allocation getVertexAllocation(int)>    ---->    
<android.content.ClipboardManager: CharSequence getText()>
/**
 * @deprecated Use {@link #getPrimaryClip()} instead.  This retrieves
 * the primary clip and tries to coerce it to a string.
 */
====>[PUBLIC]<android.content.ClipboardManager: CharSequence getText()>    ---->    #getPrimaryClip()
<android.webkit.Plugin: void <init>(String,String,String,String)>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin: void <init>(String,String,String,String)>    ---->    
<android.app.Fragment: void onAttach(Activity)>
/**
 * @deprecated Use {@link #onAttach(Context)} instead.
 */
====>[PUBLIC]<android.app.Fragment: void onAttach(Activity)>    ---->    #onAttach(Context)
<android.telephony.euicc.DownloadableSubscription: void setConfirmationCode(String)>
/**
 * Sets the confirmation code.
 * @hide
 * @deprecated - Do not use.
 */
====>[HIDDEN]<android.telephony.euicc.DownloadableSubscription: void setConfirmationCode(String)>    ---->    
<android.content.Intent: IBinder getIBinderExtra(String)>
/**
 * Retrieve extended data from the intent.
 *
 * @param name The name of the desired item.
 *
 * @return the value of an item previously added with putExtra(),
 * or null if no IBinder value was found.
 *
 * @see #putExtra(String, IBinder)
 *
 * @deprecated
 * @hide
 */
====>[HIDDEN]<android.content.Intent: IBinder getIBinderExtra(String)>    ---->    
<android.util.TrustedTime: long currentTimeMillis()>
/**
 * Return current time similar to {@link System#currentTimeMillis()},
 * possibly using a cached authoritative time source.
 *
 * @deprecated Only kept for UnsupportedAppUsage. Do not use. See {@link NtpTrustedTime}
 */
====>[PUBLIC]<android.util.TrustedTime: long currentTimeMillis()>    ---->    NtpTrustedTime
<android.renderscript.RSSurfaceView: RenderScriptGL createRenderScriptGL(SurfaceConfig)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.RSSurfaceView: RenderScriptGL createRenderScriptGL(SurfaceConfig)>    ---->    
<android.content.res.Resources: void <init>(AssetManager,DisplayMetrics,Configuration)>
/**
 * Create a new Resources object on top of an existing set of assets in an
 * AssetManager.
 *
 * @deprecated Resources should not be constructed by apps.
 * See {@link android.content.Context#createConfigurationContext(Configuration)}.
 *
 * @param assets Previously created AssetManager.
 * @param metrics Current display metrics to consider when
 * selecting/computing resource values.
 * @param config Desired device configuration to consider when
 * selecting/computing resource values (optional).
 */
====>[PUBLIC]<android.content.res.Resources: void <init>(AssetManager,DisplayMetrics,Configuration)>    ---->    android.content.Context#createConfigurationContext(Configuration)
<android.util.proto.ProtoOutputStream: void writePackedSFixed32(long,int[])>
/**
 * Write a list of packed proto "sfixed32" type field value.
 *
 * @deprecated Use {@link #write(long, int)} instead.
 * @hide
 */
====>[HIDDEN]<android.util.proto.ProtoOutputStream: void writePackedSFixed32(long,int[])>    ---->    #write(long, int)
<android.app.slice.SliceManager: Slice bindSlice(Intent,List<SliceSpec>)>
/**
 * @deprecated TO BE REMOVED.
 * @removed
 */
====>[HIDDEN]<android.app.slice.SliceManager: Slice bindSlice(Intent,List<SliceSpec>)>    ---->    
<android.app.FragmentController: List<Fragment> retainNonConfig()>
/**
 * Returns a list of Fragments that have opted to retain their instance across
 * configuration changes.
 *
 * @deprecated use {@link #retainNestedNonConfig()} to also track retained
 * nested child fragments
 */
====>[PUBLIC]<android.app.FragmentController: List<Fragment> retainNonConfig()>    ---->    #retainNestedNonConfig()
<android.webkit.WebChromeClient: void onExceededDatabaseQuota(String,String,long,long,long,QuotaUpdater)>
/**
 * Tell the client that the quota has been exceeded for the Web SQL Database
 * API for a particular origin and request a new quota. The client must
 * respond by invoking the
 * {@link WebStorage.QuotaUpdater#updateQuota(long) updateQuota(long)}
 * method of the supplied {@link WebStorage.QuotaUpdater} instance. The
 * minimum value that can be set for the new quota is the current quota. The
 * default implementation responds with the current quota, so the quota will
 * not be increased.
 * @param url The URL of the page that triggered the notification
 * @param databaseIdentifier The identifier of the database where the quota
 * was exceeded.
 * @param quota The quota for the origin, in bytes
 * @param estimatedDatabaseSize The estimated size of the offending
 * database, in bytes
 * @param totalQuota The total quota for all origins, in bytes
 * @param quotaUpdater An instance of {@link WebStorage.QuotaUpdater} which
 * must be used to inform the WebView of the new quota.
 * @deprecated This method is no longer called; WebView now uses the HTML5 / JavaScript Quota
 * Management API.
 */
====>[PUBLIC]<android.webkit.WebChromeClient: void onExceededDatabaseQuota(String,String,long,long,long,QuotaUpdater)>    ---->    
<android.content.res.Resources: void updateConfiguration(Configuration,DisplayMetrics)>
/**
 * Store the newly updated configuration.
 *
 * @deprecated See {@link android.content.Context#createConfigurationContext(Configuration)}.
 */
====>[PUBLIC]<android.content.res.Resources: void updateConfiguration(Configuration,DisplayMetrics)>    ---->    android.content.Context#createConfigurationContext(Configuration)
<android.webkit.WebSettings: void setUseDoubleTree(boolean)>
/**
 * Controlled a rendering optimization that is no longer present. Setting
 * it now has no effect.
 *
 * @deprecated This setting now has no effect.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebSettings: void setUseDoubleTree(boolean)>    ---->    
<android.app.AppOpsManager: void startWatchingActive(int[],OnOpActiveChangedListener)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.app.AppOpsManager: void startWatchingActive(int[],OnOpActiveChangedListener)>    ---->    
<android.service.euicc.EuiccService: int onEraseSubscriptions(int)>
/**
 * Erase all operational subscriptions on the device.
 *
 * <p>This is intended to be used for device resets. As such, the reset should be performed even
 * if an active SIM must be deactivated in order to access the eUICC.
 *
 * @param slotId ID of the SIM slot to use for the operation.
 * @return the result of the erase operation. May be one of the predefined {@code RESULT_}
 * constants or any implementation-specific code starting with {@link #RESULT_FIRST_USER}.
 * @see android.telephony.euicc.EuiccManager#eraseSubscriptions
 *
 * @deprecated From R, callers should specify a flag for specific set of subscriptions to erase
 * and use {@link #onEraseSubscriptions(int, int)} instead
 */
====>[PUBLIC]<android.service.euicc.EuiccService: int onEraseSubscriptions(int)>    ---->    #onEraseSubscriptions(int, int)
<android.provider.Settings.System: void setShowGTalkServiceStatus(ContentResolver,boolean)>
/**
 * @deprecated - Do not use
 */
====>[PUBLIC]<android.provider.Settings.System: void setShowGTalkServiceStatus(ContentResolver,boolean)>    ---->    
<android.app.Service: void setForeground(boolean)>
/**
 * @deprecated This is a now a no-op, use
 * {@link #startForeground(int, Notification)} instead.  This method
 * has been turned into a no-op rather than simply being deprecated
 * because analysis of numerous poorly behaving devices has shown that
 * increasingly often the trouble is being caused in part by applications
 * that are abusing it.  Thus, given a choice between introducing
 * problems in existing applications using this API (by allowing them to
 * be killed when they would like to avoid it), vs allowing the performance
 * of the entire system to be decreased, this method was deemed less
 * important.
 *
 * @hide
 */
====>[HIDDEN]<android.app.Service: void setForeground(boolean)>    ---->    #startForeground(int, Notification)
<android.telephony.euicc.DownloadableSubscription: void setAccessRules(List<UiccAccessRule>)>
/**
 * Set the {@link UiccAccessRule}s dictating access to this subscription.
 * @hide
 * @deprecated - Do not use.
 */
====>[HIDDEN]<android.telephony.euicc.DownloadableSubscription: void setAccessRules(List<UiccAccessRule>)>    ---->    
<android.text.StaticLayout: void <init>(CharSequence,int,int,TextPaint,int,Alignment,float,float,boolean,TruncateAt,int)>
/**
 * @deprecated Use {@link Builder} instead.
 */
====>[PUBLIC]<android.text.StaticLayout: void <init>(CharSequence,int,int,TextPaint,int,Alignment,float,float,boolean,TruncateAt,int)>    ---->    Builder
<android.app.Activity: void onMultiWindowModeChanged(boolean)>
/**
 * Called by the system when the activity changes from fullscreen mode to multi-window mode and
 * visa-versa.
 *
 * @see android.R.attr#resizeableActivity
 *
 * @param isInMultiWindowMode True if the activity is in multi-window mode.
 *
 * @deprecated Use {@link #onMultiWindowModeChanged(boolean, Configuration)} instead.
 */
====>[PUBLIC]<android.app.Activity: void onMultiWindowModeChanged(boolean)>    ---->    #onMultiWindowModeChanged(boolean, Configuration)
Inconsistency (Non-Documentation):<android.net.NetworkStatsHistory: void removeBucketsBefore(long)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/net/NetworkStatsHistory.java
<android.net.NetworkStatsHistory: void removeBucketsBefore(long)>
/**
 * Remove buckets older than requested cutoff.
 */
====>[PUBLIC]<android.net.NetworkStatsHistory: void removeBucketsBefore(long)>    ---->    
<android.renderscript.RenderScriptGL: void setSurfaceTexture(SurfaceTexture,int,int)>
/**
 * @deprecated in API 16
 * Bind an os surface
 *
 * @param w
 * @param h
 * @param sur
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL: void setSurfaceTexture(SurfaceTexture,int,int)>    ---->    
<android.view.View: void dispatchSystemUiVisibilityChanged(int)>
/**
 * Dispatch callbacks to {@link #setOnSystemUiVisibilityChangeListener} down
 * the view hierarchy.
 *
 * @deprecated Use {@link WindowInsets#isVisible(int)} to find out about system bar visibilities
 * by setting a {@link OnApplyWindowInsetsListener} on this view.
 */
====>[PUBLIC]<android.view.View: void dispatchSystemUiVisibilityChanged(int)>    ---->    WindowInsets#isVisible(int)
<android.hardware.location.ContextHubManager: NanoAppInstanceInfo getNanoAppInstanceInfo(int)>
/**
 * get information about the nano app instance
 *
 * NOTE: The returned NanoAppInstanceInfo does _not_ contain correct
 * information for several fields, specifically:
 * - getName()
 * - getPublisher()
 * - getNeededExecMemBytes()
 * - getNeededReadMemBytes()
 * - getNeededWriteMemBytes()
 *
 * For example, say you call loadNanoApp() with a NanoApp that has
 * getName() returning "My Name".  Later, if you call getNanoAppInstanceInfo
 * for that nanoapp, the returned NanoAppInstanceInfo's getName()
 * method will claim "Preloaded app, unknown", even though you would
 * have expected "My Name".  For now, as the user, you'll need to
 * separately track the above fields if they are of interest to you.
 *
 * TODO(b/30943489): Have the returned NanoAppInstanceInfo contain the
 * correct information.
 *
 * @param nanoAppHandle handle of the nanoapp instance
 * @return NanoAppInstanceInfo the NanoAppInstanceInfo of the nanoapp, or null if the nanoapp
 * does not exist
 *
 * @see NanoAppInstanceInfo
 *
 * @deprecated Use {@link #queryNanoApps(ContextHubInfo)} instead to explicitly query the hub
 * for loaded nanoapps.
 */
====>[PUBLIC]<android.hardware.location.ContextHubManager: NanoAppInstanceInfo getNanoAppInstanceInfo(int)>    ---->    #queryNanoApps(ContextHubInfo)
<android.view.ViewConfiguration: int getMinimumFlingVelocity()>
/**
 * @return Minimum velocity to initiate a fling, as measured in dips per second.
 *
 * @deprecated Use {@link #getScaledMinimumFlingVelocity()} instead.
 */
====>[PUBLIC]<android.view.ViewConfiguration: int getMinimumFlingVelocity()>    ---->    #getScaledMinimumFlingVelocity()
Inconsistency (Non-Documentation):<com.android.codegentest.SampleWithNestedDataClasses.NestedDataClass: void __metadata()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//tests/Codegen/src/com/android/codegentest/SampleWithNestedDataClasses.java
<com.android.codegentest.SampleWithNestedDataClasses.NestedDataClass: void __metadata()>

====>[PUBLIC]<com.android.codegentest.SampleWithNestedDataClasses.NestedDataClass: void __metadata()>    ---->    
<android.telephony.ims.ImsCallSessionListener: void callSessionMayHandover(int,int)>
/**
 * An {@link ImsCallSession} may potentially handover from one radio
 * technology to another.
 *
 * @param srcAccessTech The source radio access technology; one of the access technology
 * constants defined in {@link android.telephony.ServiceState}. For example
 * {@link android.telephony.ServiceState#RIL_RADIO_TECHNOLOGY_LTE}.
 * @param targetAccessTech The target radio access technology; one of the access technology
 * constants defined in {@link android.telephony.ServiceState}. For example
 * {@link android.telephony.ServiceState#RIL_RADIO_TECHNOLOGY_LTE}.
 * @deprecated Uses hidden constants for radio access technology, use
 * {@link #onMayHandover(int, int)} instead.
 */
====>[PUBLIC]<android.telephony.ims.ImsCallSessionListener: void callSessionMayHandover(int,int)>    ---->    #onMayHandover(int, int)
<android.location.Location: void removeAltitude()>
/**
 * Remove the altitude from this location.
 *
 * <p>Following this call {@link #hasAltitude} will return false,
 * and {@link #getAltitude} will return 0.0.
 *
 * @deprecated use a new Location object for location updates.
 */
====>[PUBLIC]<android.location.Location: void removeAltitude()>    ---->    
Inconsistency (Non-Documentation):<android.app.Notification.Action.WearableExtender: CharSequence getInProgressLabel()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/app/Notification.java
<android.app.Notification.Action.WearableExtender: CharSequence getInProgressLabel()>
/**
 * Get the label to display while the wearable is preparing to automatically execute
 * the action. This is usually a 'ing' verb ending in ellipsis like "Sending..."
 *
 * @return the label to display while the action is being prepared to execute
 */
====>[PUBLIC]<android.app.Notification.Action.WearableExtender: CharSequence getInProgressLabel()>    ---->    
<android.util.proto.ProtoOutputStream: void writeRepeatedSInt32(long,int)>
/**
 * Write a single repeated proto "sint32" type field value.
 *
 * @deprecated Use {@link #write(long, int)} instead.
 * @hide
 */
====>[HIDDEN]<android.util.proto.ProtoOutputStream: void writeRepeatedSInt32(long,int)>    ---->    #write(long, int)
<android.graphics.Canvas: boolean quickReject(float,float,float,float,EdgeType)>
/**
 * Return true if the specified rectangle, after being transformed by the
 * current matrix, would lie completely outside of the current clip. Call
 * this to check if an area you intend to draw into is clipped out (and
 * therefore you can skip making the draw calls).
 *
 * @param left        The left side of the rectangle to compare with the
 * current clip
 * @param top         The top of the rectangle to compare with the current
 * clip
 * @param right       The right side of the rectangle to compare with the
 * current clip
 * @param bottom      The bottom of the rectangle to compare with the
 * current clip
 * @param type        {@link Canvas.EdgeType#AA} if the path should be considered antialiased,
 * since that means it may affect a larger area (more pixels) than
 * non-antialiased ({@link Canvas.EdgeType#BW}).
 * @return            true if the rect (transformed by the canvas' matrix)
 * does not intersect with the canvas' clip
 * @deprecated The EdgeType is ignored. Use {@link #quickReject(float, float, float, float)}
 * instead.
 */
====>[PUBLIC]<android.graphics.Canvas: boolean quickReject(float,float,float,float,EdgeType)>    ---->    #quickReject(float, float, float, float)
<android.content.res.AssetManager: int addAssetPath(String)>
/**
 * @deprecated Use {@link #setApkAssets(ApkAssets[], boolean)}
 * @hide
 */
====>[HIDDEN]<android.content.res.AssetManager: int addAssetPath(String)>    ---->    #setApkAssets(ApkAssets[], boolean)
<android.net.ConnectivityManager: void setBackgroundDataSetting(boolean)>
/**
 * Sets the value of the setting for background data usage.
 *
 * @param allowBackgroundData Whether an application should use data while
 * it is in the background.
 *
 * @attr ref android.Manifest.permission#CHANGE_BACKGROUND_DATA_SETTING
 * @see #getBackgroundDataSetting()
 * @hide
 */
====>[HIDDEN]<android.net.ConnectivityManager: void setBackgroundDataSetting(boolean)>    ---->    
<android.graphics.ImageDecoder: ImageDecoder setMutable(boolean)>
/**
 * @removed
 * @deprecated Renamed to {@link #setMutableRequired}.
 */
====>[HIDDEN]<android.graphics.ImageDecoder: ImageDecoder setMutable(boolean)>    ---->    #setMutableRequired
<android.net.wifi.WifiManager: WifiLock createWifiLock(String)>
/**
 * Creates a new WifiLock.
 *
 * @param tag a tag for the WifiLock to identify it in debugging messages.  This string is
 * never shown to the user under normal conditions, but should be descriptive
 * enough to identify your application and the specific WifiLock within it, if it
 * holds multiple WifiLocks.
 *
 * @return a new, unacquired WifiLock with the given tag.
 *
 * @see WifiLock
 *
 * @deprecated This API is non-functional.
 */
====>[PUBLIC]<android.net.wifi.WifiManager: WifiLock createWifiLock(String)>    ---->    
<com.android.server.ServiceWatcher: T runOnBinderBlocking(BlockingBinderRunner<T>,T)>
/**
 * Runs the given function synchronously if currently connected, and returns the default value
 * if not currently connected or if any exception is thrown. Do not obtain any locks within the
 * BlockingBinderRunner, or risk deadlock. The default value will be returned if there is no
 * service connection when this is run, if a RemoteException occurs, or if the operation times
 * out.
 *
 * @deprecated Using this function is an indication that your AIDL API is broken. Calls from
 * system server to outside MUST be one-way, and so cannot return any result, and this
 * method should not be needed or used. Use a separate callback interface to allow outside
 * components to return results back to the system server.
 */
====>[PUBLIC]<com.android.server.ServiceWatcher: T runOnBinderBlocking(BlockingBinderRunner<T>,T)>    ---->    
<android.location.GnssMeasurement: void setCarrierPhase(double)>
/**
 * Sets the RF phase detected by the receiver.
 *
 * @deprecated use {@link #setAccumulatedDeltaRangeMeters(double)}
 * and {@link #setAccumulatedDeltaRangeState(int)} instead.
 *
 * @hide
 */
====>[HIDDEN]<android.location.GnssMeasurement: void setCarrierPhase(double)>    ---->    #setAccumulatedDeltaRangeMeters(double)
<com.android.server.SystemService: void onSwitchUser(UserInfo,UserInfo)>
/**
 * @deprecated subclasses should extend {@link #onUserSwitching(TargetUser, TargetUser)} instead
 * (which by default calls this method).
 *
 * @hide
 */
====>[HIDDEN]<com.android.server.SystemService: void onSwitchUser(UserInfo,UserInfo)>    ---->    rSwitching(TargetUser, TargetUser)}
<android.webkit.WebSettings: boolean enableSmoothTransition()>
/**
 * Gets whether the WebView enables smooth transition while panning or
 * zooming.
 *
 * @see #setEnableSmoothTransition
 *
 * @deprecated This method is now obsolete, and will become a no-op in future.
 */
====>[PUBLIC]<android.webkit.WebSettings: boolean enableSmoothTransition()>    ---->    
<android.app.Notification.BubbleMetadata.Builder: void <init>()>
/**
 * @deprecated use {@link Builder#Builder(String)} for a bubble created via a
 * {@link ShortcutInfo} or {@link Builder#Builder(PendingIntent, Icon)} for a bubble
 * created via a {@link PendingIntent}.
 */
====>[PUBLIC]<android.app.Notification.BubbleMetadata.Builder: void <init>()>    ---->    Builder#Builder(String)
<android.telephony.SignalStrength: int getLteSignalStrength()>
/**
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthLte#getRssi}.
 *
 * @see android.telephony#CellSignalStrengthLte
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getLteSignalStrength()>    ---->    android.telephony#CellSignalStrengthLte
<android.content.pm.PackageManager: int installExistingPackage(String,int)>
/**
 * If there is already an application with the given package name installed
 * on the system for other users, also install it for the calling user.
 * @hide
 *
 * @deprecated use {@link PackageInstaller#installExistingPackage()} instead.
 */
====>[HIDDEN]<android.content.pm.PackageManager: int installExistingPackage(String,int)>    ---->    PackageInstaller#installExistingPackage()
<android.net.ConnectivityManager: void setNetworkPreference(int)>
/**
 * Specifies the preferred network type.  When the device has more
 * than one type available the preferred network type will be used.
 *
 * @param preference the network type to prefer over all others.  It is
 * unspecified what happens to the old preferred network in the
 * overall ordering.
 * @deprecated Functionality has been removed as it no longer makes sense,
 * with many more than two networks - we'd need an array to express
 * preference.  Instead we use dynamic network properties of
 * the networks to describe their precedence.
 */
====>[PUBLIC]<android.net.ConnectivityManager: void setNetworkPreference(int)>    ---->    
<android.graphics.Canvas: boolean quickReject(Path,EdgeType)>
/**
 * Return true if the specified path, after being transformed by the
 * current matrix, would lie completely outside of the current clip. Call
 * this to check if an area you intend to draw into is clipped out (and
 * therefore you can skip making the draw calls). Note: for speed it may
 * return false even if the path itself might not intersect the clip
 * (i.e. the bounds of the path intersects, but the path does not).
 *
 * @param path        The path to compare with the current clip
 * @param type        {@link Canvas.EdgeType#AA} if the path should be considered antialiased,
 * since that means it may affect a larger area (more pixels) than
 * non-antialiased ({@link Canvas.EdgeType#BW}).
 * @return            true if the path (transformed by the canvas' matrix)
 * does not intersect with the canvas' clip
 * @deprecated The EdgeType is ignored. Use {@link #quickReject(Path)} instead.
 */
====>[PUBLIC]<android.graphics.Canvas: boolean quickReject(Path,EdgeType)>    ---->    #quickReject(Path)
<android.view.textclassifier.TextClassification: Intent getIntent()>
/**
 * Returns an intent that may be fired to act on the classified text.
 *
 * <p><strong>NOTE: </strong>This field is not parcelled and will always return null when this
 * object is read from a parcel.
 *
 * @deprecated Use {@link #getActions()} instead.
 */
====>[PUBLIC]<android.view.textclassifier.TextClassification: Intent getIntent()>    ---->    #getActions()
<com.android.internal.widget.PagerAdapter: void setPrimaryItem(View,int,Object)>
/**
 * Called to inform the adapter of which item is currently considered to
 * be the "primary", that is the one show to the user as the current page.
 *
 * @param container The containing View from which the page will be removed.
 * @param position The page position that is now the primary.
 * @param object The same object that was returned by
 * {@link #instantiateItem(android.view.View, int)}.
 *
 * @deprecated Use {@link #setPrimaryItem(android.view.ViewGroup, int, Object)}
 */
====>[PUBLIC]<com.android.internal.widget.PagerAdapter: void setPrimaryItem(View,int,Object)>    ---->    #setPrimaryItem(android.view.ViewGroup, int, Object)
<android.net.wifi.aware.DiscoverySession: NetworkSpecifier createNetworkSpecifierPassphrase(PeerHandle,String)>
/**
 * Create a {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} for
 * an encrypted WiFi Aware connection (link) to the specified peer. The
 * {@link android.net.NetworkRequest.Builder#addTransportType(int)} should be set to
 * {@link android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE}.
 * <p>
 * This method should be used when setting up a connection with a peer discovered through Aware
 * discovery or communication (in such scenarios the MAC address of the peer is shielded by
 * an opaque peer ID handle). If an Aware connection is needed to a peer discovered using other
 * OOB (out-of-band) mechanism then use the alternative
 * {@link WifiAwareSession#createNetworkSpecifierPassphrase(int, byte[], String)} method -
 * which uses the peer's MAC address.
 * <p>
 * Note: per the Wi-Fi Aware specification the roles are fixed - a Subscriber is an INITIATOR
 * and a Publisher is a RESPONDER.
 * @deprecated Use the replacement {@link WifiAwareNetworkSpecifier.Builder}.
 *
 * @param peerHandle The peer's handle obtained through
 * {@link DiscoverySessionCallback#onServiceDiscovered(PeerHandle,
 * byte[], java.util.List)} or
 * {@link DiscoverySessionCallback#onMessageReceived(PeerHandle,
 * byte[])}. On a RESPONDER this value is used to gate the acceptance of a connection request
 * from only that peer.
 * @param passphrase The passphrase to be used to encrypt the link. The PMK is generated from
 * the passphrase. Use the
 * {@link #createNetworkSpecifierOpen(PeerHandle)} API to
 * specify an open (unencrypted) link.
 *
 * @return A {@link NetworkSpecifier} to be used to construct
 * {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} to pass to
 * {@link android.net.ConnectivityManager#requestNetwork(android.net.NetworkRequest,
 * android.net.ConnectivityManager.NetworkCallback)}
 * [or other varieties of that API].
 */
====>[PUBLIC]<android.net.wifi.aware.DiscoverySession: NetworkSpecifier createNetworkSpecifierPassphrase(PeerHandle,String)>    ---->    WifiAwareNetworkSpecifier.Builder
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: int getGravity()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/app/Notification.java
<android.app.Notification.WearableExtender: int getGravity()>
/**
 * Get the gravity that this notification should have within the available viewport space.
 * Supported values include {@link android.view.Gravity#TOP},
 * {@link android.view.Gravity#CENTER_VERTICAL} and {@link android.view.Gravity#BOTTOM}.
 * The default value is {@link android.view.Gravity#BOTTOM}.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: int getGravity()>    ---->    
<android.app.backup.BackupManager: void updateTransportAttributes(ComponentName,String,Intent,String,Intent,String)>
/**
 * Update the attributes of the transport identified by {@code transportComponent}. If the
 * specified transport has not been bound at least once (for registration), this call will be
 * ignored. Only the host process of the transport can change its description, otherwise a
 * {@link SecurityException} will be thrown.
 *
 * @param transportComponent The identity of the transport being described.
 * @param name A {@link String} with the new name for the transport. This is NOT for
 * identification. MUST NOT be {@code null}.
 * @param configurationIntent An {@link Intent} that can be passed to {@link
 * Context#startActivity} in order to launch the transport's configuration UI. It may be
 * {@code null} if the transport does not offer any user-facing configuration UI.
 * @param currentDestinationString A {@link String} describing the destination to which the
 * transport is currently sending data. MUST NOT be {@code null}.
 * @param dataManagementIntent An {@link Intent} that can be passed to {@link
 * Context#startActivity} in order to launch the transport's data-management UI. It may be
 * {@code null} if the transport does not offer any user-facing data management UI.
 * @param dataManagementLabel A {@link String} to be used as the label for the transport's data
 * management affordance. This MUST be {@code null} when dataManagementIntent is {@code
 * null} and MUST NOT be {@code null} when dataManagementIntent is not {@code null}.
 * @throws SecurityException If the UID of the calling process differs from the package UID of
 * {@code transportComponent} or if the caller does NOT have BACKUP permission.
 * @deprecated Since Android Q, please use the variant {@link
 * #updateTransportAttributes(ComponentName, String, Intent, String, Intent, CharSequence)}
 * instead.
 * @hide
 */
====>[HIDDEN]<android.app.backup.BackupManager: void updateTransportAttributes(ComponentName,String,Intent,String,Intent,String)>    ---->    #updateTransportAttributes(ComponentName, String, Intent, String, Intent, CharSequence)
<android.media.AudioManager: void registerRemoteControlClient(RemoteControlClient)>
/**
 * Registers the remote control client for providing information to display on the remote
 * controls.
 * @param rcClient The remote control client from which remote controls will receive
 * information to display.
 * @see RemoteControlClient
 * @deprecated Use {@link MediaSession} instead.
 */
====>[PUBLIC]<android.media.AudioManager: void registerRemoteControlClient(RemoteControlClient)>    ---->    MediaSession
<android.graphics.drawable.BitmapDrawable: void <init>()>
/**
 * Create an empty drawable, not dealing with density.
 * @deprecated Use {@link #BitmapDrawable(android.content.res.Resources, android.graphics.Bitmap)}
 * instead to specify a bitmap to draw with and ensure the correct density is set.
 */
====>[PUBLIC]<android.graphics.drawable.BitmapDrawable: void <init>()>    ---->    #BitmapDrawable(android.content.res.Resources, android.graphics.Bitmap)
<android.app.AppOpsManager: int startOpNoThrow(String,int,String)>
/**
 * @deprecated use {@link #startOpNoThrow(String, int, String, String, String)} instead
 */
====>[PUBLIC]<android.app.AppOpsManager: int startOpNoThrow(String,int,String)>    ---->    #startOpNoThrow(String, int, String, String, String)
<android.net.NetworkAgent: void setLegacyExtraInfo(String)>
/**
 * Set the ExtraInfo of this network agent.
 *
 * This sets the ExtraInfo field inside the NetworkInfo returned by legacy public API and the
 * broadcasts about the corresponding Network.
 * This is only for backward compatibility and should not be used by non-legacy network agents,
 * who will be thrown an exception if they try. The extra info should only be :
 * <ul>
 * <li>For cellular agents, the APN name.</li>
 * <li>For ethernet agents, the interface name.</li>
 * </ul>
 *
 * @deprecated this is for backward compatibility only.
 * @param extraInfo the ExtraInfo.
 * @hide
 */
====>[HIDDEN]<android.net.NetworkAgent: void setLegacyExtraInfo(String)>    ---->    
<android.text.style.SuggestionSpan: void notifySelection(Context,String,int)>
/**
 * Does nothing.
 *
 * @deprecated this is deprecated in {@link android.os.Build.VERSION_CODES#Q}.
 * @hide
 */
====>[HIDDEN]<android.text.style.SuggestionSpan: void notifySelection(Context,String,int)>    ---->    
<android.renderscript.ProgramRaster: ProgramRaster CULL_BACK(RenderScript)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.ProgramRaster: ProgramRaster CULL_BACK(RenderScript)>    ---->    
<android.content.Context: void removeStickyBroadcastAsUser(Intent,UserHandle)>
/**
 * <p>Version of {@link #removeStickyBroadcast(Intent)} that allows you to specify the
 * user the broadcast will be sent to.  This is not available to applications
 * that are not pre-installed on the system image.
 *
 * <p>You must hold the {@link android.Manifest.permission#BROADCAST_STICKY}
 * permission in order to use this API.  If you do not hold that
 * permission, {@link SecurityException} will be thrown.
 *
 * @deprecated Sticky broadcasts should not be used.  They provide no security (anyone
 * can access them), no protection (anyone can modify them), and many other problems.
 * The recommended pattern is to use a non-sticky broadcast to report that <em>something</em>
 * has changed, with another mechanism for apps to retrieve the current value whenever
 * desired.
 *
 * @param intent The Intent that was previously broadcast.
 * @param user UserHandle to remove the sticky broadcast from.
 *
 * @see #sendStickyBroadcastAsUser
 */
====>[PUBLIC]<android.content.Context: void removeStickyBroadcastAsUser(Intent,UserHandle)>    ---->    #sendStickyBroadcastAsUser
<android.telecom.Connection: AudioState getAudioState()>
/**
 * @return The audio state of the connection, describing how its audio is currently
 * being routed by the system. This is {@code null} if this Connection
 * does not directly know about its audio state.
 * @deprecated Use {@link #getCallAudioState()} instead.
 * @hide
 */
====>[HIDDEN]<android.telecom.Connection: AudioState getAudioState()>    ---->    #getCallAudioState()
Inconsistency (Non-Documentation):<android.app.Notification.Action.WearableExtender: WearableExtender setInProgressLabel(CharSequence)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/app/Notification.java
<android.app.Notification.Action.WearableExtender: WearableExtender setInProgressLabel(CharSequence)>
/**
 * Set a label to display while the wearable is preparing to automatically execute the
 * action. This is usually a 'ing' verb ending in ellipsis like "Sending..."
 *
 * @param label the label to display while the action is being prepared to execute
 * @return this object for method chaining
 */
====>[PUBLIC]<android.app.Notification.Action.WearableExtender: WearableExtender setInProgressLabel(CharSequence)>    ---->    
<android.view.ViewGroup: boolean isAlwaysDrawnWithCacheEnabled()>
/**
 * Indicates whether this ViewGroup will always try to draw its children using their
 * drawing cache. By default this property is enabled.
 *
 * @return true if the animation cache is enabled, false otherwise
 *
 * @see #setAlwaysDrawnWithCacheEnabled(boolean)
 * @see #setChildrenDrawnWithCacheEnabled(boolean)
 * @see View#setDrawingCacheEnabled(boolean)
 *
 * @deprecated As of {@link android.os.Build.VERSION_CODES#M}, this property is ignored.
 * Child views may no longer have their caching behavior disabled by parents.
 */
====>[PUBLIC]<android.view.ViewGroup: boolean isAlwaysDrawnWithCacheEnabled()>    ---->    
<android.hardware.biometrics.BiometricPrompt.Builder: Builder setDeviceCredentialAllowed(boolean)>
/**
 * Optional: If enabled, the user will be given the option to authenticate with their device
 * PIN, pattern, or password. Developers should first check {@link
 * BiometricManager#canAuthenticate(int)} for {@link Authenticators#DEVICE_CREDENTIAL}
 * before enabling. If the device is not secured with a credential,
 * {@link AuthenticationCallback#onAuthenticationError(int, CharSequence)} will be invoked
 * with {@link BiometricPrompt#BIOMETRIC_ERROR_NO_DEVICE_CREDENTIAL}. Defaults to false.
 *
 * <p>Note that enabling this option replaces the negative button on the prompt with one
 * that allows the user to authenticate with their device credential, making it an error to
 * call {@link #setNegativeButton(CharSequence, Executor, DialogInterface.OnClickListener)}.
 *
 * @param allowed true if the prompt should fall back to asking for the user's device
 * credential (PIN/pattern/password), or false otherwise.
 * @return This builder.
 *
 * @deprecated Replaced by {@link #setAllowedAuthenticators(int)}.
 */
====>[PUBLIC]<android.hardware.biometrics.BiometricPrompt.Builder: Builder setDeviceCredentialAllowed(boolean)>    ---->    #setAllowedAuthenticators(int)
<android.telephony.TelephonyManager: String getNetworkCountryIsoForPhone(int)>
/**
 * @hide
 * @deprecated Use {@link #getNetworkCountryIso(int)} instead.
 */
====>[HIDDEN]<android.telephony.TelephonyManager: String getNetworkCountryIsoForPhone(int)>    ---->    #getNetworkCountryIso(int)
Inconsistency (Non-Documentation):<com.android.internal.view.InlineSuggestionsRequestInfo: void __metadata()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/com/android/internal/view/InlineSuggestionsRequestInfo.java
<com.android.internal.view.InlineSuggestionsRequestInfo: void __metadata()>

====>[PUBLIC]<com.android.internal.view.InlineSuggestionsRequestInfo: void __metadata()>    ---->    
<android.app.AppOpsManager: int startOp(int,int,String)>
/**
 * @deprecated Use {@link #startOp(int, int, String, boolean, String, String)} instead
 *
 * @hide
 */
====>[HIDDEN]<android.app.AppOpsManager: int startOp(int,int,String)>    ---->    #startOp(int, int, String, boolean, String, String)
<android.view.inputmethod.InputMethodSubtype: void <init>(int,int,String,String,String,boolean,boolean,int)>
/**
 * Constructor.
 * @deprecated use {@link InputMethodSubtypeBuilder} instead.
 * "isAsciiCapable" is "false" in this constructor.
 * @param nameId Resource ID of the subtype name string. The string resource may have exactly
 * one %s in it. If there is, the %s part will be replaced with the locale's display name by
 * the formatter. Please refer to {@link #getDisplayName} for details.
 * @param iconId Resource ID of the subtype icon drawable.
 * @param locale The locale supported by the subtype
 * @param mode The mode supported by the subtype
 * @param extraValue The extra value of the subtype. This string is free-form, but the API
 * supplies tools to deal with a key-value comma-separated list; see
 * {@link #containsExtraValueKey} and {@link #getExtraValueOf}.
 * @param isAuxiliary true when this subtype is auxiliary, false otherwise. An auxiliary
 * subtype will not be shown in the list of enabled IMEs for choosing the current IME in
 * the Settings even when this subtype is enabled. Please note that this subtype will still
 * be shown in the list of IMEs in the IME switcher to allow the user to tentatively switch
 * to this subtype while an IME is shown. The framework will never switch the current IME to
 * this subtype by {@link android.view.inputmethod.InputMethodManager#switchToLastInputMethod}.
 * The intent of having this flag is to allow for IMEs that are invoked in a one-shot way as
 * auxiliary input mode, and return to the previous IME once it is finished (e.g. voice input).
 * @param overridesImplicitlyEnabledSubtype true when this subtype should be enabled by default
 * if no other subtypes in the IME are enabled explicitly. Note that a subtype with this
 * parameter being true will not be shown in the list of subtypes in each IME's subtype enabler.
 * Having an "automatic" subtype is an example use of this flag.
 * @param id The unique ID for the subtype. The input method framework keeps track of enabled
 * subtypes by ID. When the IME package gets upgraded, enabled IDs will stay enabled even if
 * other attributes are different. If the ID is unspecified or 0,
 * Arrays.hashCode(new Object[] {locale, mode, extraValue,
 * isAuxiliary, overridesImplicitlyEnabledSubtype, isAsciiCapable}) will be used instead.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodSubtype: void <init>(int,int,String,String,String,boolean,boolean,int)>    ---->    InputMethodSubtypeBuilder
<android.app.FragmentManagerImpl: void dispatchMultiWindowModeChanged(boolean)>
/**
 * @deprecated use {@link #dispatchMultiWindowModeChanged(boolean, Configuration)}
 */
====>[PUBLIC]<android.app.FragmentManagerImpl: void dispatchMultiWindowModeChanged(boolean)>    ---->    #dispatchMultiWindowModeChanged(boolean, Configuration)
<android.media.MediaPlayer: void setAudioStreamType(int)>
/**
 * Sets the audio stream type for this MediaPlayer. See {@link AudioManager}
 * for a list of stream types. Must call this method before prepare() or
 * prepareAsync() in order for the target stream type to become effective
 * thereafter.
 *
 * @param streamtype the audio stream type
 * @deprecated use {@link #setAudioAttributes(AudioAttributes)}
 * @see android.media.AudioManager
 */
====>[PUBLIC]<android.media.MediaPlayer: void setAudioStreamType(int)>    ---->    android.media.AudioManager
<android.app.Notification.Builder: Builder setSound(Uri,AudioAttributes)>
/**
 * Set the sound to play, along with specific {@link AudioAttributes audio attributes} to
 * use during playback.
 *
 * @deprecated use {@link NotificationChannel#setSound(Uri, AudioAttributes)} instead.
 * @see Notification#sound
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder setSound(Uri,AudioAttributes)>    ---->    NotificationChannel#setSound(Uri, AudioAttributes)
<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder addVertex(float,float,float)>
/**
 * @deprecated in API 16
 * Adds a float3 vertex to the mesh
 *
 * @param x position x
 * @param y position y
 * @param z position z
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder addVertex(float,float,float)>    ---->    
<android.telephony.ims.stub.ImsSmsImplBase: void onSendSmsResult(int,int,int,int)>
/**
 * This method should be triggered by the IMS providers to pass the result of the sent message
 * to the platform.
 *
 * @param token token provided in {@link #sendSms(int, int, String, String, boolean, byte[])}
 * @param messageRef the message reference, which may be 1 byte if it is in
 * {@link SmsMessage#FORMAT_3GPP} format (see TS.123.040) or 2 bytes if it is in
 * {@link SmsMessage#FORMAT_3GPP2} format (see 3GPP2 C.S0015-B).
 * @param status result of sending the SMS.
 * @param reason reason in case status is failure.
 *
 * @throws RuntimeException if called before {@link #onReady()} is triggered or if the
 * connection to the framework is not available. If this happens attempting to send the SMS
 * should be aborted.
 * @deprecated Use {@link #onSendSmsResultSuccess(int, int)} or
 * {@link #onSendSmsResultError(int, int, int, int, int)} to notify the framework of the SMS
 * send result.
 */
====>[PUBLIC]<android.telephony.ims.stub.ImsSmsImplBase: void onSendSmsResult(int,int,int,int)>    ---->    #onSendSmsResultSuccess(int, int)
<android.content.Context: int getWallpaperDesiredMinimumWidth()>
/**
 * @deprecated Use {@link android.app.WallpaperManager#getDesiredMinimumWidth()
 * WallpaperManager.getDesiredMinimumWidth()} instead.
 */
====>[PUBLIC]<android.content.Context: int getWallpaperDesiredMinimumWidth()>    ---->    android.app.WallpaperManager#getDesiredMinimumWidth()  WallpaperManager.getDesiredMinimumWidth()
<android.telephony.SignalStrength: int getWcdmaDbm()>
/**
 * Gets WCDMA signal strength as a dBm value between -120 and -24, as defined in TS 27.007 8.69.
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthWcdma#getDbm}.
 *
 * @see android.telephony#CellSignalStrengthWcdma
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getWcdmaDbm()>    ---->    android.telephony#CellSignalStrengthWcdma
<android.renderscript.ProgramRaster: ProgramRaster CULL_NONE(RenderScript)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.ProgramRaster: ProgramRaster CULL_NONE(RenderScript)>    ---->    
<android.content.ContentResolver: SyncInfo getCurrentSync()>
/**
 * If a sync is active returns the information about it, otherwise returns null.
 * <p>
 * This method requires the caller to hold the permission
 * {@link android.Manifest.permission#READ_SYNC_STATS}.
 * <p>
 * @return the SyncInfo for the currently active sync or null if one is not active.
 * @deprecated
 * Since multiple concurrent syncs are now supported you should use
 * {@link #getCurrentSyncs()} to get the accurate list of current syncs.
 * This method returns the first item from the list of current syncs
 * or null if there are none.
 */
====>[PUBLIC]<android.content.ContentResolver: SyncInfo getCurrentSync()>    ---->    #getCurrentSyncs()
Inconsistency (Non-Documentation):<android.media.MediaScanner: void setLocale(String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//media/java/android/media/MediaScanner.java
<android.media.MediaScanner: void setLocale(String)>

====>[PUBLIC]<android.media.MediaScanner: void setLocale(String)>    ---->    
<android.service.notification.ConditionProviderService: void notifyCondition(Condition)>
/**
 * Informs the notification manager that the state of a Condition has changed. Use this method
 * to put the system into Do Not Disturb mode or request that it exits Do Not Disturb mode. This
 * call will be ignored unless there is an enabled {@link android.app.AutomaticZenRule} owned by
 * service that has an {@link android.app.AutomaticZenRule#getConditionId()} equal to this
 * {@link Condition#id}.
 * @param condition the condition that has changed.
 *
 * @deprecated see
 * {@link android.app.NotificationManager#setAutomaticZenRuleState(String, Condition)}.
 */
====>[PUBLIC]<android.service.notification.ConditionProviderService: void notifyCondition(Condition)>    ---->    android.app.NotificationManager#setAutomaticZenRuleState(String, Condition)
<android.telephony.NeighboringCellInfo: void <init>(int,int)>
/**
 * Initialize the object from rssi and cid.
 *
 * NeighboringCellInfo is one time shot for the neighboring cells based on
 * the radio network type at that moment. Its constructor needs radio network
 * type.
 *
 * @deprecated by {@link #NeighboringCellInfo(int, String, int)}
 */
====>[PUBLIC]<android.telephony.NeighboringCellInfo: void <init>(int,int)>    ---->    #NeighboringCellInfo(int, String, int)
<android.net.TetheringManager: int tether(String)>
/**
 * Attempt to tether the named interface.  This will setup a dhcp server
 * on the interface, forward and NAT IP v4 packets and forward DNS requests
 * to the best active upstream network interface.  Note that if no upstream
 * IP network interface is available, dhcp will still run and traffic will be
 * allowed between the tethered devices and this device, though upstream net
 * access will of course fail until an upstream network interface becomes
 * active.
 *
 * @deprecated The only usages is PanService. It uses this for legacy reasons
 * and will migrate away as soon as possible.
 *
 * @param iface the interface name to tether.
 * @return error a {@code TETHER_ERROR} value indicating success or failure type
 *
 * {@hide}
 */
====>[HIDDEN]<android.net.TetheringManager: int tether(String)>    ---->    
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: byte[] startRecoverySession(String,byte[],byte[],byte[],List<KeyChainProtectionParams>)>
/**
 * Initializes recovery session given the X509-encoded public key of the recovery service.
 *
 * @param sessionId A unique ID to identify the recovery session.
 * @param verifierPublicKey X509-encoded public key.
 * @param vaultParams Additional params associated with vault.
 * @param vaultChallenge Challenge issued by vault service.
 * @param secrets Lock-screen hashes. For now only a single secret is supported.
 * @return Encrypted bytes of recovery claim. This can then be issued to the vault service.
 * @deprecated Use {@link #startRecoverySessionWithCertPath(String, String, RecoveryCertPath,
 * byte[], byte[], List)} instead.
 *
 * @hide
 */
====>[HIDDEN]<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: byte[] startRecoverySession(String,byte[],byte[],byte[],List<KeyChainProtectionParams>)>    ---->    #startRecoverySessionWithCertPath(String, String, RecoveryCertPath,  byte[], byte[], List)
<android.app.AppOpsManager.OpEntry: int getProxyUid()>
/**
 * @deprecated Use {@link #getLastProxyInfo(int)} instead
 */
====>[PUBLIC]<android.app.AppOpsManager.OpEntry: int getProxyUid()>    ---->    #getLastProxyInfo(int)
<android.webkit.CacheManager: boolean endCacheTransaction()>
/**
 * Ends the innermost cache transaction and returns whether this was the
 * only running transaction.
 *
 * @return {@code true} if this was the only running transaction
 * @deprecated This method no longer has any effect and always returns {@code false}.
 */
====>[PUBLIC]<android.webkit.CacheManager: boolean endCacheTransaction()>    ---->    
<android.service.voice.VoiceInteractionSession: void onHandleAssistSecondary(Bundle,AssistStructure,AssistContent,int,int)>
/**
 * Called to receive data from other applications that the user was or is interacting with,
 * that are currently on the screen in a multi-window display environment, not including the
 * currently focused activity. This could be
 * a free-form window, a picture-in-picture window, or another window in a split-screen display.
 * <p>
 * This method is very similar to
 * {@link #onHandleAssist} except that it is called
 * for additional non-focused activities along with an index and count that indicates
 * which additional activity the data is for. {@code index} will be between 1 and
 * {@code count}-1 and this method is called once for each additional window, in no particular
 * order. The {@code count} indicates how many windows to expect assist data for, including the
 * top focused activity, which continues to be returned via {@link #onHandleAssist}.
 * <p>
 * To be responsive to assist requests, process assist data as soon as it is received,
 * without waiting for all queued activities to return assist data.
 *
 * @param data Arbitrary data supplied by the app through
 * {@link android.app.Activity#onProvideAssistData Activity.onProvideAssistData}.
 * May be null if assist data has been disabled by the user or device policy.
 * @param structure If available, the structure definition of all windows currently
 * displayed by the app.  May be null if assist data has been disabled by the user
 * or device policy; will be an empty stub if the application has disabled assist
 * by marking its window as secure.
 * @param content Additional content data supplied by the app through
 * {@link android.app.Activity#onProvideAssistContent Activity.onProvideAssistContent}.
 * May be null if assist data has been disabled by the user or device policy; will
 * not be automatically filled in with data from the app if the app has marked its
 * window as secure.
 * @param index the index of the additional activity that this data
 * is for.
 * @param count the total number of additional activities for which the assist data is being
 * returned, including the focused activity that is returned via
 * {@link #onHandleAssist}.
 *
 * @deprecated use {@link #onHandleAssist(AssistState)}
 */
====>[PUBLIC]<android.service.voice.VoiceInteractionSession: void onHandleAssistSecondary(Bundle,AssistStructure,AssistContent,int,int)>    ---->    #onHandleAssist(AssistState)
<android.app.AppOpsManager: int noteOpNoThrow(String,int,String)>
/**
 * @deprecated Use {@link #noteOpNoThrow(String, int, String, String, String)} instead
 */
====>[PUBLIC]<android.app.AppOpsManager: int noteOpNoThrow(String,int,String)>    ---->    #noteOpNoThrow(String, int, String, String, String)
<com.android.uiautomator.core.QueryController: String getCurrentActivityName()>
/**
 * Last activity to report accessibility events.
 * @deprecated The results returned should be considered unreliable
 * @return String name of activity
 */
====>[PUBLIC]<com.android.uiautomator.core.QueryController: String getCurrentActivityName()>    ---->    
Inconsistency (Non-Documentation):<javax.microedition.khronos.egl.EGL10: EGLSurface eglCreatePixmapSurface(EGLDisplay,EGLConfig,Object,int[])> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//opengl/java/javax/microedition/khronos/egl/EGL10.java
<javax.microedition.khronos.egl.EGL10: EGLSurface eglCreatePixmapSurface(EGLDisplay,EGLConfig,Object,int[])>

====>[PUBLIC]<javax.microedition.khronos.egl.EGL10: EGLSurface eglCreatePixmapSurface(EGLDisplay,EGLConfig,Object,int[])>    ---->    
<android.view.ViewDebug: void startRecyclerTracing(String,View)>
/**
 * @deprecated This method is now unused and invoking it is a no-op
 */
====>[PUBLIC]<android.view.ViewDebug: void startRecyclerTracing(String,View)>    ---->    
<android.renderscript.ProgramVertex: int getInputCount()>
/**
 * @deprecated in API 16
 * @return number of input attribute elements
 */
====>[PUBLIC]<android.renderscript.ProgramVertex: int getInputCount()>    ---->    
<android.view.Display: void getRectSize(Rect)>
/**
 * Gets the size of the display as a rectangle, in pixels.
 *
 * @param outSize A {@link Rect} object to receive the size information.
 * @deprecated Use {@link WindowMetrics#getBounds()} to get the dimensions of the application
 * window area.
 */
====>[PUBLIC]<android.view.Display: void getRectSize(Rect)>    ---->    WindowMetrics#getBounds()
<android.text.method.DigitsKeyListener: void <init>()>
/**
 * Allocates a DigitsKeyListener that accepts the ASCII digits 0 through 9.
 *
 * @deprecated Use {@link #DigitsKeyListener(Locale)} instead.
 */
====>[PUBLIC]<android.text.method.DigitsKeyListener: void <init>()>    ---->    #DigitsKeyListener(Locale)
<android.telephony.TelephonyManager: boolean isTtyModeSupported()>
/**
 * @deprecated Use {@link TelecomManager#isTtySupported()} instead
 * Whether the phone supports TTY mode.
 *
 * @return {@code true} if the device supports TTY mode, and {@code false} otherwise.
 */
====>[PUBLIC]<android.telephony.TelephonyManager: boolean isTtyModeSupported()>    ---->    TelecomManager#isTtySupported()
<android.content.Context: String getFeatureId()>
/**
 * @removed
 */
====>[HIDDEN]<android.content.Context: String getFeatureId()>    ---->    
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(Rect)>
/**
 * Sets the node bounds in the viewParent's coordinates.
 * {@link #getParent()} does not represent the source's viewParent.
 * Instead it represents the result of {@link View#getParentForAccessibility()},
 * which returns the closest ancestor where {@link View#isImportantForAccessibility()} is true.
 * So this method is not reliable.
 *
 * <p>
 * <strong>Note:</strong> Cannot be called from an
 * {@link android.accessibilityservice.AccessibilityService}.
 * This class is made immutable before being delivered to an AccessibilityService.
 * </p>
 *
 * @param bounds The node bounds.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 * @deprecated Accessibility services should not care about these bounds.
 */
====>[PUBLIC]<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(Rect)>    ---->    
<android.webkit.WebView: int findAll(String)>
/**
 * Finds all instances of find on the page and highlights them.
 * Notifies any registered {@link FindListener}.
 *
 * @param find the string to find
 * @return the number of occurrences of the String "find" that were found
 * @deprecated {@link #findAllAsync} is preferred.
 * @see #setFindListener
 */
====>[PUBLIC]<android.webkit.WebView: int findAll(String)>    ---->    #setFindListener
<android.media.tv.TvInputInfo: Intent createSettingsIntent()>
/**
 * Returns an intent to start the settings activity for this TV input.
 *
 * @deprecated Use {@link #createSetupIntent()} instead. Settings activity is deprecated.
 * Use setup activity instead to provide settings.
 */
====>[PUBLIC]<android.media.tv.TvInputInfo: Intent createSettingsIntent()>    ---->    #createSetupIntent()
<android.hardware.camera2.CameraDevice: void createReprocessableCaptureSessionByConfigurations(InputConfiguration,List<OutputConfiguration>,StateCallback,Handler)>
/**
 * Create a new reprocessable camera capture session by providing the desired reprocessing
 * input configuration and output {@link OutputConfiguration}
 * to the camera device.
 *
 * @see #createReprocessableCaptureSession
 * @see OutputConfiguration
 * @deprecated Please use {@link
 * #createCaptureSession(android.hardware.camera2.params.SessionConfiguration)} for the
 * full set of configuration options available.
 */
====>[PUBLIC]<android.hardware.camera2.CameraDevice: void createReprocessableCaptureSessionByConfigurations(InputConfiguration,List<OutputConfiguration>,StateCallback,Handler)>    ---->    #createCaptureSession(android.hardware.camera2.params.SessionConfiguration)
<android.app.Notification.Builder: Builder setPriority(int)>
/**
 * Set the priority of this notification.
 *
 * @see Notification#priority
 * @deprecated use {@link NotificationChannel#setImportance(int)} instead.
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder setPriority(int)>    ---->    NotificationChannel#setImportance(int)
<android.app.UiAutomation: boolean revokeRuntimePermission(String,String,UserHandle)>
/**
 * @deprecated replaced by
 * {@link #revokeRuntimePermissionAsUser(String, String, UserHandle)}.
 * @hide
 */
====>[HIDDEN]<android.app.UiAutomation: boolean revokeRuntimePermission(String,String,UserHandle)>    ---->    #revokeRuntimePermissionAsUser(String, String, UserHandle)
Inconsistency (Non-Documentation):<com.android.server.pm.parsing.pkg.PkgAppInfo: int getTargetSandboxVersion()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//services/core/java/com/android/server/pm/parsing/pkg/PkgAppInfo.java
<com.android.server.pm.parsing.pkg.PkgAppInfo: int getTargetSandboxVersion()>
/**
 * @see ApplicationInfo#targetSandboxVersion
 * @see R.styleable#AndroidManifest_targetSandboxVersion
 */
====>[PUBLIC]<com.android.server.pm.parsing.pkg.PkgAppInfo: int getTargetSandboxVersion()>    ---->    
<android.os.StatFs: int getAvailableBlocks()>
/**
 * @deprecated Use {@link #getAvailableBlocksLong()} instead.
 */
====>[PUBLIC]<android.os.StatFs: int getAvailableBlocks()>    ---->    #getAvailableBlocksLong()
<android.database.sqlite.SQLiteProgram: int getUniqueId()>
/**
 * Unimplemented.
 * @deprecated This method is deprecated and must not be used.
 */
====>[PUBLIC]<android.database.sqlite.SQLiteProgram: int getUniqueId()>    ---->    
<android.os.UserManager: void setUserRestriction(String,boolean,UserHandle)>
/**
 * @hide
 * Sets the value of a specific restriction on a specific user.
 * @param key the key of the restriction
 * @param value the value for the restriction
 * @param userHandle the user whose restriction is to be changed.
 * @deprecated use {@link android.app.admin.DevicePolicyManager#addUserRestriction(
 * android.content.ComponentName, String)} or
 * {@link android.app.admin.DevicePolicyManager#clearUserRestriction(
 * android.content.ComponentName, String)} instead.
 */
====>[HIDDEN]<android.os.UserManager: void setUserRestriction(String,boolean,UserHandle)>    ---->    android.app.admin.DevicePolicyManager#addUserRestriction(  android.content.ComponentName, String)
<android.provider.Contacts.Settings: String getSetting(ContentResolver,String,String)>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.Settings: String getSetting(ContentResolver,String,String)>    ---->    android.provider.ContactsContract
<android.renderscript.ProgramFragmentFixedFunction.Builder: void <init>(RenderScript)>
/**
 * @deprecated
 * Creates a builder for fixed function fragment program
 *
 * @param rs Context to which the program will belong.
 */
====>[PUBLIC]<android.renderscript.ProgramFragmentFixedFunction.Builder: void <init>(RenderScript)>    ---->    
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onStartedWakingUp()>
/**
 * Called when the device has started waking up.
 *
 * @deprecated use {@link com.android.systemui.keyguard.WakefulnessLifecycle}.
 */
====>[PUBLIC]<com.android.keyguard.KeyguardUpdateMonitorCallback: void onStartedWakingUp()>    ---->    com.android.systemui.keyguard.WakefulnessLifecycle
<android.graphics.Canvas: void insertReorderBarrier()>
/**
 * @deprecated use {@link #enableZ()} instead
 * @hide
 */
====>[HIDDEN]<android.graphics.Canvas: void insertReorderBarrier()>    ---->    #enableZ()
<android.provider.Contacts.People: void <init>()>
/**
 * no public constructor since this is a utility class
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.People: void <init>()>    ---->    android.provider.ContactsContract
<android.renderscript.ProgramFragmentFixedFunction.InternalBuilder: ProgramFragmentFixedFunction create()>
/**
 * @deprecated in API 16
 * Creates ProgramFragmentFixedFunction from the current state
 * of the builder
 *
 * @return  ProgramFragmentFixedFunction
 */
====>[PUBLIC]<android.renderscript.ProgramFragmentFixedFunction.InternalBuilder: ProgramFragmentFixedFunction create()>    ---->    
<android.renderscript.Font: Font createFromResource(RenderScript,Resources,int,float)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.Font: Font createFromResource(RenderScript,Resources,int,float)>    ---->    
<android.renderscript.Mesh: Primitive getPrimitive(int)>
/**
 * @deprecated in API 16
 * @param slot locaiton within the list of index set primitives
 * @return index set primitive type
 */
====>[PUBLIC]<android.renderscript.Mesh: Primitive getPrimitive(int)>    ---->    
Inconsistency (Non-Documentation):<com.android.systemui.shared.system.TransactionCompat: TransactionCompat setEarlyWakeup()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//packages/SystemUI/shared/src/com/android/systemui/shared/system/TransactionCompat.java
<com.android.systemui.shared.system.TransactionCompat: TransactionCompat setEarlyWakeup()>

====>[PUBLIC]<com.android.systemui.shared.system.TransactionCompat: TransactionCompat setEarlyWakeup()>    ---->    
<android.view.inputmethod.InputMethodManager: InputMethodManager peekInstance()>
/**
 * Deprecated. Do not use.
 *
 * @return {@link #sInstance}
 * @deprecated Use {@link Context#getSystemService(Class)} instead. This method cannot fully
 * support multi-display scenario.
 * @hide
 */
====>[HIDDEN]<android.view.inputmethod.InputMethodManager: InputMethodManager peekInstance()>    ---->    Context#getSystemService(Class)
<android.graphics.EmbossMaskFilter: void <init>(float[],float,float,float)>
/**
 * Create an emboss maskfilter
 *
 * @deprecated This subclass is not supported and should not be instantiated.
 *
 * @param direction  array of 3 scalars [x, y, z] specifying the direction of the light source
 * @param ambient    0...1 amount of ambient light
 * @param specular   coefficient for specular highlights (e.g. 8)
 * @param blurRadius amount to blur before applying lighting (e.g. 3)
 * @return           the emboss maskfilter
 */
====>[PUBLIC]<android.graphics.EmbossMaskFilter: void <init>(float[],float,float,float)>    ---->    
<android.content.pm.ShortcutInfo.Builder: Builder setTextResId(int)>
/**
 * @hide -- old signature, the internal code still uses it.
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo.Builder: Builder setTextResId(int)>    ---->    
<android.provider.Contacts.Settings: void setSetting(ContentResolver,String,String,String)>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.Settings: void setSetting(ContentResolver,String,String,String)>    ---->    android.provider.ContactsContract
<android.telephony.data.DataProfile: int getMtu()>
/**
 * @return The maximum transmission unit (MTU) size in bytes.
 * @deprecated use {@link #getMtuV4} or {@link #getMtuV6} instead.
 */
====>[PUBLIC]<android.telephony.data.DataProfile: int getMtu()>    ---->    #getMtuV4
Inconsistency (Non-Documentation):<android.accounts.AccountManager: Intent newChooseAccountIntent(Account,ArrayList<Account>,String[],boolean,String,String,String[],Bundle)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/accounts/AccountManager.java
<android.accounts.AccountManager: Intent newChooseAccountIntent(Account,ArrayList<Account>,String[],boolean,String,String,String[],Bundle)>
/**
 * Deprecated in favor of {@link #newChooseAccountIntent(Account, List, String[], String,
 * String, String[], Bundle)}.
 *
 * Returns an intent to an {@link Activity} that prompts the user to choose from a list of
 * accounts.
 * The caller will then typically start the activity by calling
 * <code>startActivityForResult(intent, ...);</code>.
 * <p>
 * On success the activity returns a Bundle with the account name and type specified using
 * keys {@link #KEY_ACCOUNT_NAME} and {@link #KEY_ACCOUNT_TYPE}.
 * Chosen account is marked as {@link #VISIBILITY_USER_MANAGED_VISIBLE} to the caller
 * (see {@link #setAccountVisibility}) and will be returned to it in consequent
 * {@link #getAccountsByType}) calls.
 * <p>
 * The most common case is to call this with one account type, e.g.:
 * <p>
 * <pre>  newChooseAccountIntent(null, null, new String[]{"com.google"}, false, null,
 * null, null, null);</pre>
 * @param selectedAccount if specified, indicates that the {@link Account} is the currently
 * selected one, according to the caller's definition of selected.
 * @param allowableAccounts an optional {@link List} of accounts that are allowed to be
 * shown. If not specified then this field will not limit the displayed accounts.
 * @param allowableAccountTypes an optional string array of account types. These are used
 * both to filter the shown accounts and to filter the list of account types that are shown
 * when adding an account. If not specified then this field will not limit the displayed
 * account types when adding an account.
 * @param alwaysPromptForAccount boolean that is ignored.
 * @param descriptionOverrideText if non-null this string is used as the description in the
 * accounts chooser screen rather than the default
 * @param addAccountAuthTokenType this string is passed as the {@link #addAccount}
 * authTokenType parameter
 * @param addAccountRequiredFeatures this string array is passed as the {@link #addAccount}
 * requiredFeatures parameter
 * @param addAccountOptions This {@link Bundle} is passed as the {@link #addAccount} options
 * parameter
 * @return an {@link Intent} that can be used to launch the ChooseAccount activity flow.
 */
====>[PUBLIC]<android.accounts.AccountManager: Intent newChooseAccountIntent(Account,ArrayList<Account>,String[],boolean,String,String,String[],Bundle)>    ---->    
<android.telephony.PhoneNumberUtils: boolean isEmergencyNumber(int,String,String)>
/**
 * Checks if a given number is an emergency number for a specific country.
 *
 * @param subId the subscription id of the SIM.
 * @param number the number to look up.
 * @param defaultCountryIso the specific country which the number should be checked against
 * @return if the number is an emergency number for the specific country, then return true,
 * otherwise false
 *
 * @deprecated Please use {@link TelephonyManager#isEmergencyNumber(String)}
 * instead.
 *
 * @hide
 */
====>[HIDDEN]<android.telephony.PhoneNumberUtils: boolean isEmergencyNumber(int,String,String)>    ---->    TelephonyManager#isEmergencyNumber(String)
<android.view.inputmethod.InputMethodManager: void windowDismissed(IBinder)>
/**
 * An empty method only to avoid crashes of apps that call this method via reflection and do not
 * handle {@link NoSuchMethodException} in a graceful manner.
 *
 * @deprecated This is an empty method.  No framework method must call this method.
 * @hide
 */
====>[HIDDEN]<android.view.inputmethod.InputMethodManager: void windowDismissed(IBinder)>    ---->    
Inconsistency (Non-Documentation):<android.media.MediaScanner: void prescan(String,boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//media/java/android/media/MediaScanner.java
<android.media.MediaScanner: void prescan(String,boolean)>

====>[PUBLIC]<android.media.MediaScanner: void prescan(String,boolean)>    ---->    
<android.location.LocationManager: void removeGpsStatusListener(Listener)>
/**
 * Removes a GPS status listener.
 *
 * @param listener GPS status listener object to remove
 *
 * @deprecated use {@link #unregisterGnssStatusCallback(GnssStatus.Callback)} instead. No longer
 * supported in apps targeting S and above.
 */
====>[PUBLIC]<android.location.LocationManager: void removeGpsStatusListener(Listener)>    ---->    #unregisterGnssStatusCallback(GnssStatus.Callback)
<android.telephony.SignalStrength: int getCdmaAsuLevel()>
/**
 * Get the cdma signal level as an asu value between 0..31, 99 is unknown
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthCdma#getAsuLevel}. Since there is no definition of
 * ASU for CDMA, the resultant value is Android-specific and is not recommended
 * for use.
 *
 * @see android.telephony#CellSignalStrengthCdma
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getCdmaAsuLevel()>    ---->    android.telephony#CellSignalStrengthCdma
Inconsistency (Non-Documentation):<com.android.server.pm.PackageInstallerService: String allocateExternalStageCidLegacy()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//services/core/java/com/android/server/pm/PackageInstallerService.java
<com.android.server.pm.PackageInstallerService: String allocateExternalStageCidLegacy()>

====>[PUBLIC]<com.android.server.pm.PackageInstallerService: String allocateExternalStageCidLegacy()>    ---->    
<android.provider.Contacts.People: void setPhotoData(ContentResolver,Uri,byte[])>
/**
 * Set the photo for this person. data may be null
 * @param cr the ContentResolver to use
 * @param person the Uri of the person whose photo is to be updated
 * @param data the byte[] that represents the photo
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.People: void setPhotoData(ContentResolver,Uri,byte[])>    ---->    android.provider.ContactsContract
Inconsistency (Non-Documentation):<android.hardware.soundtrigger.KeyphraseMetadata: void __metadata()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/hardware/soundtrigger/KeyphraseMetadata.java
<android.hardware.soundtrigger.KeyphraseMetadata: void __metadata()>

====>[PUBLIC]<android.hardware.soundtrigger.KeyphraseMetadata: void __metadata()>    ---->    
<android.app.slice.SliceManager: void pinSlice(Uri,List<SliceSpec>)>
/**
 * @deprecated TO BE REMOVED
 * @removed
 */
====>[HIDDEN]<android.app.slice.SliceManager: void pinSlice(Uri,List<SliceSpec>)>    ---->    
<android.app.ActionBar: int getSelectedNavigationIndex()>
/**
 * Get the position of the selected navigation item in list or tabbed navigation modes.
 *
 * @return Position of the selected item.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: int getSelectedNavigationIndex()>    ---->    
<android.test.TouchUtils: void dragViewToBottom(ActivityInstrumentationTestCase,View,int)>
/**
 * Simulate touching the center of a view and dragging to the bottom of the screen.
 *
 * @param test The test case that is being run
 * @param v The view that should be dragged
 * @param stepCount How many move steps to include in the drag
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: void dragViewToBottom(ActivityInstrumentationTestCase,View,int)>    ---->    android.test.ActivityInstrumentationTestCase2
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)>
/**
 * Allow a previously configured network to be associated with. If
 * <code>attemptConnect</code> is true, an attempt to connect to the selected
 * network is initiated. This may result in the asynchronous delivery
 * of state change events.
 * <p>
 * <b>Note:</b> Network communication may not use Wi-Fi even if Wi-Fi is connected;
 * traffic may instead be sent through another network, such as cellular data,
 * Bluetooth tethering, or Ethernet. For example, traffic will never use a
 * Wi-Fi network that does not provide Internet access (e.g. a wireless
 * printer), if another network that does offer Internet access (e.g.
 * cellular data) is available. Applications that need to ensure that their
 * network traffic uses Wi-Fi should use APIs such as
 * {@link Network#bindSocket(java.net.Socket)},
 * {@link Network#openConnection(java.net.URL)}, or
 * {@link ConnectivityManager#bindProcessToNetwork} to do so.
 *
 * Applications are not allowed to enable networks created by other
 * applications.
 *
 * @param netId the ID of the network as returned by {@link #addNetwork} or {@link
 * #getConfiguredNetworks}.
 * @param attemptConnect The way to select a particular network to connect to is specify
 * {@code true} for this parameter.
 * @return {@code true} if the operation succeeded
 *
 * @deprecated
 * a) See {@link WifiNetworkSpecifier.Builder#build()} for new
 * mechanism to trigger connection to a Wi-Fi network.
 * b) See {@link #addNetworkSuggestions(List)},
 * {@link #removeNetworkSuggestions(List)} for new API to add Wi-Fi networks for consideration
 * when auto-connecting to wifi.
 * <b>Compatibility Note:</b> For applications targeting
 * {@link android.os.Build.VERSION_CODES#Q} or above, this API will always fail and return
 * {@code false}.
 * Deprecation Exemptions:
 * <ul>
 * <li>Device Owner (DO), Profile Owner (PO) and system apps.
 * </ul>
 */
====>[PUBLIC]<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)>    ---->    WifiNetworkSpecifier.Builder#build()
<android.view.View: int getDrawingCacheQuality()>
/**
 * Returns the quality of the drawing cache.
 *
 * @return One of {@link #DRAWING_CACHE_QUALITY_AUTO},
 * {@link #DRAWING_CACHE_QUALITY_LOW}, or {@link #DRAWING_CACHE_QUALITY_HIGH}
 *
 * @see #setDrawingCacheQuality(int)
 * @see #setDrawingCacheEnabled(boolean)
 * @see #isDrawingCacheEnabled()
 *
 * @attr ref android.R.styleable#View_drawingCacheQuality
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: int getDrawingCacheQuality()>    ---->    #setLayerType(int, Paint)
<com.android.systemui.plugins.Plugin: int getVersion()>
/**
 * @deprecated
 * @see Requires
 */
====>[PUBLIC]<com.android.systemui.plugins.Plugin: int getVersion()>    ---->    Requires
<android.net.TrafficStats: long getUidTcpRxBytes(int)>
/**
 * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},
 * transport layer statistics are no longer available, and will
 * always return {@link #UNSUPPORTED}.
 * @see #getUidRxBytes(int)
 */
====>[PUBLIC]<android.net.TrafficStats: long getUidTcpRxBytes(int)>    ---->    #getUidRxBytes(int)
<android.webkit.WebSettings: void setAllowFileAccessFromFileURLs(boolean)>
/**
 * Sets whether cross-origin requests in the context of a file scheme URL should be allowed to
 * access content from other file scheme URLs. Note that some accesses such as image HTML
 * elements don't follow same-origin rules and aren't affected by this setting.
 * <p>
 * <b>Don't</b> enable this setting if you open files that may be created or altered by
 * external sources. Enabling this setting allows malicious scripts loaded in a {@code file://}
 * context to access arbitrary local files including WebView cookies and app private data.
 * <p class="note">
 * Loading content via {@code file://} URLs is generally discouraged. See the note in
 * {@link #setAllowFileAccess}.
 * <p>
 * Note that the value of this setting is ignored if the value of
 * {@link #getAllowUniversalAccessFromFileURLs} is {@code true}. The default value is
 * {@code true} for apps targeting {@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH_MR1}
 * and below, and {@code false} when targeting {@link android.os.Build.VERSION_CODES#JELLY_BEAN}
 * and above. To prevent possible violation of same domain policy when targeting
 * {@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH_MR1} and earlier, you should
 * explicitly set this value to {@code false}.
 *
 * @param flag whether JavaScript running in the context of a file scheme
 * URL should be allowed to access content from other file
 * scheme URLs
 * @deprecated This setting is not secure, please use
 * <a href="{@docRoot}reference/androidx/webkit/WebViewAssetLoader.html">
 * androidx.webkit.WebViewAssetLoader</a> to load file content securely.
 */
====>[PUBLIC]<android.webkit.WebSettings: void setAllowFileAccessFromFileURLs(boolean)>    ---->    
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: int getContentIconGravity()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/app/Notification.java
<android.app.Notification.WearableExtender: int getContentIconGravity()>
/**
 * Get the gravity that the content icon should have within the notification display.
 * Supported values include {@link android.view.Gravity#START} and
 * {@link android.view.Gravity#END}. The default value is {@link android.view.Gravity#END}.
 * @see #getContentIcon
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: int getContentIconGravity()>    ---->    
Inconsistency (Non-Documentation):<android.content.pm.parsing.ParsingPackageRead: int getTargetSandboxVersion()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/content/pm/parsing/ParsingPackageRead.java
<android.content.pm.parsing.ParsingPackageRead: int getTargetSandboxVersion()>
/**
 * @see ApplicationInfo#targetSandboxVersion
 * @see R.styleable#AndroidManifest_targetSandboxVersion
 */
====>[PUBLIC]<android.content.pm.parsing.ParsingPackageRead: int getTargetSandboxVersion()>    ---->    
Inconsistency (Non-Documentation):<android.webkit.WebSettings: boolean getSaveFormData()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-11.0.0_r39//core/java/android/webkit/WebSettings.java
<android.webkit.WebSettings: boolean getSaveFormData()>
/**
 * Gets whether the WebView saves form data.
 *
 * @return whether the WebView saves form data
 * @see #setSaveFormData
 */
====>[PUBLIC]<android.webkit.WebSettings: boolean getSaveFormData()>    ---->    
<android.app.ActionBar: void addTab(Tab,int,boolean)>
/**
 * Add a tab for use in tabbed navigation mode. The tab will be insterted at
 * <code>position</code>.
 *
 * @param tab The tab to add
 * @param position The new position of the tab
 * @param setSelected True if the added tab should become the selected tab.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: void addTab(Tab,int,boolean)>    ---->    
<android.webkit.WebChromeClient: void onShowCustomView(View,int,CustomViewCallback)>
/**
 * Notify the host application that the current page would
 * like to show a custom View in a particular orientation.
 * @param view is the View object to be shown.
 * @param requestedOrientation An orientation constant as used in
 * {@link ActivityInfo#screenOrientation ActivityInfo.screenOrientation}.
 * @param callback is the callback to be invoked if and when the view
 * is dismissed.
 * @deprecated This method supports the obsolete plugin mechanism,
 * and will not be invoked in future
 */
====>[PUBLIC]<android.webkit.WebChromeClient: void onShowCustomView(View,int,CustomViewCallback)>    ---->    
<android.bluetooth.BluetoothGatt: void abortReliableWrite(BluetoothDevice)>
/**
 * @deprecated Use {@link #abortReliableWrite()}
 */
====>[PUBLIC]<android.bluetooth.BluetoothGatt: void abortReliableWrite(BluetoothDevice)>    ---->    #abortReliableWrite()
