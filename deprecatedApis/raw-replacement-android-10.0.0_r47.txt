Inconsistency (Non-Annotation):<android.graphics.Canvas: int save(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//graphics/java/android/graphics/Canvas.java
Inconsistency (Non-Annotation):<android.graphics.Canvas: int saveLayer(RectF,Paint,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//graphics/java/android/graphics/Canvas.java
Inconsistency (Non-Annotation):<android.graphics.Canvas: int saveLayer(float,float,float,float,Paint,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//graphics/java/android/graphics/Canvas.java
Inconsistency (Non-Annotation):<android.graphics.Canvas: int saveLayerAlpha(RectF,int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//graphics/java/android/graphics/Canvas.java
Inconsistency (Non-Annotation):<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//graphics/java/android/graphics/Canvas.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh: int getVertexAllocationCount()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh: Allocation getVertexAllocation(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh: int getPrimitiveCount()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh: Allocation getIndexSetAllocation(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh: Primitive getPrimitive(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.Builder: int getCurrentVertexTypeIndex()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.Builder: int getCurrentIndexSetIndex()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.Builder: Builder addVertexType(Type)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.Builder: Builder addVertexType(Element,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.Builder: Builder addIndexSetType(Type,Primitive)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.Builder: Builder addIndexSetType(Primitive)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.Builder: Builder addIndexSetType(Element,int,Primitive)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.Builder: Mesh create()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.AllocationBuilder: int getCurrentVertexTypeIndex()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.AllocationBuilder: int getCurrentIndexSetIndex()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.AllocationBuilder: AllocationBuilder addVertexAllocation(Allocation)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.AllocationBuilder: AllocationBuilder addIndexSetAllocation(Allocation,Primitive)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.AllocationBuilder: AllocationBuilder addIndexSetType(Primitive)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.AllocationBuilder: Mesh create()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder addVertex(float,float)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder addVertex(float,float,float)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder setTexture(float,float)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder setNormal(float,float,float)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder setColor(float,float,float,float)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder addTriangle(int,int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.TriangleMeshBuilder: Mesh create(boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Mesh.java
Inconsistency (Non-Annotation):<android.app.KeyguardManager: boolean inKeyguardRestrictedInputMode()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/KeyguardManager.java
Inconsistency (Non-Annotation):<android.graphics.drawable.Drawable: Drawable createFromResourceStream(Resources,TypedValue,InputStream,String,Options)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//graphics/java/android/graphics/drawable/Drawable.java
Inconsistency (Non-Annotation):<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: byte[] startRecoverySession(String,byte[],byte[],byte[],List<KeyChainProtectionParams>)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//services/core/java/com/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager.java
Inconsistency (Non-Annotation):<android.graphics.drawable.AnimatedImageDrawable: void setLoopCount(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//graphics/java/android/graphics/drawable/AnimatedImageDrawable.java
Inconsistency (Non-Annotation):<android.graphics.drawable.AnimatedImageDrawable: int getLoopCount(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//graphics/java/android/graphics/drawable/AnimatedImageDrawable.java
Inconsistency (Non-Annotation):<android.renderscript.Allocation: void resize(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Allocation.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: void surfaceCreated(SurfaceHolder)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RSSurfaceView.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: void surfaceDestroyed(SurfaceHolder)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RSSurfaceView.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: void surfaceChanged(SurfaceHolder,int,int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RSSurfaceView.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: void pause()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RSSurfaceView.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: void resume()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RSSurfaceView.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: RenderScriptGL createRenderScriptGL(SurfaceConfig)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RSSurfaceView.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: void destroyRenderScriptGL()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RSSurfaceView.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: void setRenderScriptGL(RenderScriptGL)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RSSurfaceView.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: RenderScriptGL getRenderScriptGL()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RSSurfaceView.java
Inconsistency (Non-Annotation):<android.app.slice.Slice.Builder: Builder setSpec(SliceSpec)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/slice/Slice.java
Inconsistency (Non-Annotation):<android.media.MediaCodecList: int getCodecCount()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//media/java/android/media/MediaCodecList.java
Inconsistency (Non-Annotation):<android.media.MediaCodecList: MediaCodecInfo getCodecInfoAt(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//media/java/android/media/MediaCodecList.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramFragmentFixedFunction.InternalBuilder: ProgramFragmentFixedFunction create()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramFragmentFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramFragmentFixedFunction.Builder: Builder setTexture(EnvMode,Format,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramFragmentFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramFragmentFixedFunction.Builder: Builder setPointSpriteTexCoordinateReplacement(boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramFragmentFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramFragmentFixedFunction.Builder: Builder setVaryingColor(boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramFragmentFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramFragmentFixedFunction.Builder: ProgramFragmentFixedFunction create()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramFragmentFixedFunction.java
Inconsistency (Non-Annotation):<com.android.systemui.plugins.Plugin: int getVersion()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//packages/SystemUI/plugin_core/src/com/android/systemui/plugins/Plugin.java
Inconsistency (Non-Annotation):<android.hardware.display.DisplayManager: void setSaturationLevel(float)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/hardware/display/DisplayManager.java
Inconsistency (Non-Annotation):<android.webkit.Plugin.PreferencesClickHandler: void handleClickEvent(Context)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/webkit/Plugin.java
Inconsistency (Non-Annotation):<android.accessibilityservice.AccessibilityServiceInfo: boolean getCanRetrieveWindowContent()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/accessibilityservice/AccessibilityServiceInfo.java
Inconsistency (Non-Annotation):<android.accessibilityservice.AccessibilityServiceInfo: String getDescription()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/accessibilityservice/AccessibilityServiceInfo.java
Inconsistency (Non-Annotation):<android.accessibilityservice.AccessibilityServiceInfo: List<CapabilityInfo> getCapabilityInfos()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/accessibilityservice/AccessibilityServiceInfo.java
Inconsistency (Non-Annotation):<android.webkit.WebViewFactoryProvider: TokenBindingService getTokenBindingService()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/webkit/WebViewFactoryProvider.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertex: int getInputCount()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramVertex.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertex: Element getInput(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramVertex.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertex.Builder: Builder addInput(Element)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramVertex.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertex.Builder: ProgramVertex create()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramVertex.java
Inconsistency (Non-Annotation):<android.net.NetworkInfo: String getReason()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/net/NetworkInfo.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D.IndexEntry: String getName()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D.IndexEntry: EntryType getEntryType()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D.IndexEntry: BaseObj getObject()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D.IndexEntry: Mesh getMesh()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D: int getIndexEntryCount()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D: IndexEntry getIndexEntry(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D: FileA3D createFromAsset(RenderScript,AssetManager,String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D: FileA3D createFromFile(RenderScript,String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D: FileA3D createFromFile(RenderScript,File)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D: FileA3D createFromResource(RenderScript,Resources,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/FileA3D.java
Inconsistency (Non-Annotation):<android.media.MediaDrm: void releaseAllSecureStops()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//media/java/android/media/MediaDrm.java
Inconsistency (Non-Annotation):<android.media.AsyncPlayer: void play(Context,Uri,boolean,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//media/java/android/media/AsyncPlayer.java
Inconsistency (Non-Annotation):<android.view.textclassifier.TextClassification: OnClickListener getOnClickListener()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/view/textclassifier/TextClassification.java
Inconsistency (Non-Annotation):<com.android.internal.widget.PagerAdapter: void startUpdate(View)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/com/android/internal/widget/PagerAdapter.java
Inconsistency (Non-Annotation):<com.android.internal.widget.PagerAdapter: Object instantiateItem(View,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/com/android/internal/widget/PagerAdapter.java
Inconsistency (Non-Annotation):<com.android.internal.widget.PagerAdapter: void destroyItem(View,int,Object)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/com/android/internal/widget/PagerAdapter.java
Inconsistency (Non-Annotation):<com.android.internal.widget.PagerAdapter: void setPrimaryItem(View,int,Object)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/com/android/internal/widget/PagerAdapter.java
Inconsistency (Non-Annotation):<com.android.internal.widget.PagerAdapter: void finishUpdate(View)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/com/android/internal/widget/PagerAdapter.java
Inconsistency (Non-Annotation):<android.renderscript.Element: Element MATRIX4X4(RenderScript)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Element.java
Inconsistency (Non-Annotation):<android.media.MediaCodec: ByteBuffer[] getInputBuffers()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//media/java/android/media/MediaCodec.java
Inconsistency (Non-Annotation):<android.media.MediaCodec: ByteBuffer[] getOutputBuffers()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//media/java/android/media/MediaCodec.java
Inconsistency (Non-Annotation):<android.media.MediaRecorder: void setAuxiliaryOutputFile(FileDescriptor)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//media/java/android/media/MediaRecorder.java
Inconsistency (Non-Annotation):<android.media.MediaRecorder: void setAuxiliaryOutputFile(String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//media/java/android/media/MediaRecorder.java
Inconsistency (Non-Annotation):<android.service.persistentdata.PersistentDataBlockManager: void setOemUnlockEnabled(boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/service/persistentdata/PersistentDataBlockManager.java
Inconsistency (Non-Annotation):<android.service.persistentdata.PersistentDataBlockManager: boolean getOemUnlockEnabled()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/service/persistentdata/PersistentDataBlockManager.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramRaster: boolean isPointSpriteEnabled()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramRaster.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramRaster: CullMode getCullMode()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramRaster.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramRaster: ProgramRaster CULL_BACK(RenderScript)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramRaster.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramRaster: ProgramRaster CULL_FRONT(RenderScript)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramRaster.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramRaster: ProgramRaster CULL_NONE(RenderScript)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramRaster.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramRaster.Builder: Builder setPointSpriteEnabled(boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramRaster.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramRaster.Builder: Builder setCullMode(CullMode)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramRaster.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramRaster.Builder: ProgramRaster create()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramRaster.java
Inconsistency (Non-Annotation):<android.net.ConnectivityManager: LinkProperties getActiveLinkProperties()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/net/ConnectivityManager.java
Inconsistency (Non-Annotation):<android.net.ConnectivityManager: NetworkCapabilities networkCapabilitiesForType(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/net/ConnectivityManager.java
Inconsistency (Non-Annotation):<android.net.ConnectivityManager: PacketKeepalive startNattKeepalive(Network,int,PacketKeepaliveCallback,InetAddress,int,InetAddress)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/net/ConnectivityManager.java
Inconsistency (Non-Annotation):<android.net.ConnectivityManager: void reportInetCondition(int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/net/ConnectivityManager.java
Inconsistency (Non-Annotation):<android.hardware.radio.RadioTuner.Callback: void onError(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/hardware/radio/RadioTuner.java
Inconsistency (Non-Annotation):<android.graphics.drawable.DrawableContainer.DrawableContainerState: Drawable[] getChildren()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//graphics/java/android/graphics/drawable/DrawableContainer.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiEnterpriseConfig: void setSubjectMatch(String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//wifi/java/android/net/wifi/WifiEnterpriseConfig.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiEnterpriseConfig: String getSubjectMatch()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//wifi/java/android/net/wifi/WifiEnterpriseConfig.java
Inconsistency (Non-Annotation):<android.media.MediaPlayer: void setAudioStreamType(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//media/java/android/media/MediaPlayer.java
Inconsistency (Non-Annotation):<android.telecom.Connection.VideoProvider: void changeCallDataUsage(long)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//telecomm/java/android/telecom/Connection.java
Inconsistency (Non-Annotation):<com.android.server.notification.NotificationRecord: int getUserId()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//services/core/java/com/android/server/notification/NotificationRecord.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL.SurfaceConfig: void setColor(int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL.SurfaceConfig: void setAlpha(int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL.SurfaceConfig: void setDepth(int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL.SurfaceConfig: void setSamples(int,int,float)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void setSurface(SurfaceHolder,int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void setSurfaceTexture(SurfaceTexture,int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: int getHeight()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: int getWidth()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void pause()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void resume()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void bindRootScript(Script)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void bindProgramStore(ProgramStore)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void bindProgramFragment(ProgramFragment)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void bindProgramRaster(ProgramRaster)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void bindProgramVertex(ProgramVertex)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RenderScriptGL.java
Inconsistency (Non-Annotation):<android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo: boolean isHeading()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/view/accessibility/AccessibilityNodeInfo.java
Inconsistency (Non-Annotation):<android.telecom.TelecomManager: PhoneAccountHandle getSimCallManager(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//telecomm/java/android/telecom/TelecomManager.java
Inconsistency (Non-Annotation):<android.telecom.TelecomManager: void clearAccounts()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//telecomm/java/android/telecom/TelecomManager.java
Inconsistency (Non-Annotation):<android.telecom.TelecomManager: ComponentName getDefaultPhoneApp()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//telecomm/java/android/telecom/TelecomManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: boolean shouldVibrate(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//media/java/android/media/AudioManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: int getVibrateSetting(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//media/java/android/media/AudioManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: void setVibrateSetting(int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//media/java/android/media/AudioManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: boolean isBluetoothA2dpOn()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//media/java/android/media/AudioManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: boolean isWiredHeadsetOn()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//media/java/android/media/AudioManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: int requestAudioFocus(OnAudioFocusChangeListener,int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//media/java/android/media/AudioManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: int requestAudioFocus(OnAudioFocusChangeListener,AudioAttributes,int,int,AudioPolicy)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//media/java/android/media/AudioManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: int abandonAudioFocus(OnAudioFocusChangeListener)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//media/java/android/media/AudioManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: int abandonAudioFocus(OnAudioFocusChangeListener,AudioAttributes)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//media/java/android/media/AudioManager.java
Inconsistency (Non-Annotation):<android.nfc.NfcAdapter: void setBeamPushUris(Uri[],Activity)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/nfc/NfcAdapter.java
Inconsistency (Non-Annotation):<android.nfc.NfcAdapter: void setBeamPushUrisCallback(CreateBeamUrisCallback,Activity)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/nfc/NfcAdapter.java
Inconsistency (Non-Annotation):<android.nfc.NfcAdapter: void setNdefPushMessage(NdefMessage,Activity,Activity)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/nfc/NfcAdapter.java
Inconsistency (Non-Annotation):<android.nfc.NfcAdapter: void setNdefPushMessageCallback(CreateNdefMessageCallback,Activity,Activity)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/nfc/NfcAdapter.java
Inconsistency (Non-Annotation):<android.nfc.NfcAdapter: void setOnNdefPushCompleteCallback(OnNdefPushCompleteCallback,Activity,Activity)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/nfc/NfcAdapter.java
Inconsistency (Non-Annotation):<android.nfc.NfcAdapter: boolean invokeBeam(Activity)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/nfc/NfcAdapter.java
Inconsistency (Non-Annotation):<android.nfc.NfcAdapter: boolean isNdefPushEnabled()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/nfc/NfcAdapter.java
Inconsistency (Non-Annotation):<android.telephony.TelephonyManager: void setVisualVoicemailEnabled(PhoneAccountHandle,boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//telephony/java/android/telephony/TelephonyManager.java
Inconsistency (Non-Annotation):<android.telephony.TelephonyManager: boolean isVisualVoicemailEnabled(PhoneAccountHandle)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//telephony/java/android/telephony/TelephonyManager.java
Inconsistency (Non-Annotation):<android.telephony.TelephonyManager: void setVoicemailRingtoneUri(PhoneAccountHandle,Uri)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//telephony/java/android/telephony/TelephonyManager.java
Inconsistency (Non-Annotation):<android.telephony.TelephonyManager: void setVoicemailVibrationEnabled(PhoneAccountHandle,boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//telephony/java/android/telephony/TelephonyManager.java
Inconsistency (Non-Annotation):<android.telephony.TelephonyManager: int setAllowedCarriers(int,List<CarrierIdentifier>)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//telephony/java/android/telephony/TelephonyManager.java
Inconsistency (Non-Annotation):<android.renderscript.Font: Font createFromFile(RenderScript,Resources,String,float)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Font.java
Inconsistency (Non-Annotation):<android.renderscript.Font: Font createFromFile(RenderScript,Resources,File,float)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Font.java
Inconsistency (Non-Annotation):<android.renderscript.Font: Font createFromAsset(RenderScript,Resources,String,float)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Font.java
Inconsistency (Non-Annotation):<android.renderscript.Font: Font createFromResource(RenderScript,Resources,int,float)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Font.java
Inconsistency (Non-Annotation):<android.renderscript.Font: Font create(RenderScript,Resources,String,Style,float)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/Font.java
Inconsistency (Non-Annotation):<android.view.textservice.TextServicesManager: TextServicesManager getInstance()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/view/textservice/TextServicesManager.java
Inconsistency (Non-Annotation):<android.renderscript.ScriptGroup: void setInput(KernelID,Allocation)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ScriptGroup.java
Inconsistency (Non-Annotation):<android.renderscript.ScriptGroup: void setOutput(KernelID,Allocation)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ScriptGroup.java
Inconsistency (Non-Annotation):<android.renderscript.ScriptGroup: void execute()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ScriptGroup.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: void onSurfaceTextureAvailable(SurfaceTexture,int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: void onSurfaceTextureSizeChanged(SurfaceTexture,int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: boolean onSurfaceTextureDestroyed(SurfaceTexture)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: void onSurfaceTextureUpdated(SurfaceTexture)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: void pause()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: void resume()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: RenderScriptGL createRenderScriptGL(SurfaceConfig)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: void destroyRenderScriptGL()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: void setRenderScriptGL(RenderScriptGL)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: RenderScriptGL getRenderScriptGL()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/RSTextureView.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiManager: String getCurrentNetworkWpsNfcConfigurationToken()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//wifi/java/android/net/wifi/WifiManager.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiManager.WpsCallback: void onStarted(String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//wifi/java/android/net/wifi/WifiManager.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiManager.WpsCallback: void onSucceeded()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//wifi/java/android/net/wifi/WifiManager.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiManager.WpsCallback: void onFailed(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//wifi/java/android/net/wifi/WifiManager.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiManager: void startWps(WpsInfo,WpsCallback)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//wifi/java/android/net/wifi/WifiManager.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiManager: void cancelWps(WpsCallback)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//wifi/java/android/net/wifi/WifiManager.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiManager: boolean setEnableAutoJoinWhenAssociated(boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//wifi/java/android/net/wifi/WifiManager.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiManager: boolean getEnableAutoJoinWhenAssociated()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//wifi/java/android/net/wifi/WifiManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsConfig: int getProvisionedValue(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//telephony/java/com/android/ims/ImsConfig.java
Inconsistency (Non-Annotation):<com.android.ims.ImsConfig: String getProvisionedStringValue(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//telephony/java/com/android/ims/ImsConfig.java
Inconsistency (Non-Annotation):<com.android.ims.ImsConfig: int setProvisionedValue(int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//telephony/java/com/android/ims/ImsConfig.java
Inconsistency (Non-Annotation):<com.android.ims.ImsConfig: int setProvisionedStringValue(int,String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//telephony/java/com/android/ims/ImsConfig.java
Inconsistency (Non-Annotation):<android.app.Notification.Builder: Builder addPerson(String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
Inconsistency (Non-Annotation):<android.app.Notification.MessagingStyle: CharSequence getUserDisplayName()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
Inconsistency (Non-Annotation):<android.app.Notification.MessagingStyle: MessagingStyle addMessage(CharSequence,long,CharSequence)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
Inconsistency (Non-Annotation):<android.app.Notification.MessagingStyle.Message: CharSequence getSender()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
Inconsistency (Non-Annotation):<android.view.animation.Animation: void setDetachWallpaper(boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/view/animation/Animation.java
Inconsistency (Non-Annotation):<android.view.animation.Animation: boolean getDetachWallpaper()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/view/animation/Animation.java
Inconsistency (Non-Annotation):<android.opengl.GLES30: void glGetTransformFeedbackVarying(int,int,int,IntBuffer,IntBuffer,IntBuffer,byte)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//opengl/java/android/opengl/GLES30.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramFragment.Builder: ProgramFragment create()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramFragment.java
Inconsistency (Non-Annotation):<com.android.uiautomator.testrunner.UiAutomatorTestCase: IAutomationSupport getAutomationSupport()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//cmds/uiautomator/instrumentation/testrunner-src/com/android/uiautomator/testrunner/UiAutomatorTestCase.java
Inconsistency (Non-Annotation):<android.drm.DrmSupportInfo: String getDescriprition()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//drm/java/android/drm/DrmSupportInfo.java
Inconsistency (Non-Annotation):<android.app.ActivityManagerNative: IActivityManager asInterface(IBinder)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/ActivityManagerNative.java
Inconsistency (Non-Annotation):<android.app.ActivityManagerNative: IActivityManager getDefault()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/ActivityManagerNative.java
Inconsistency (Non-Annotation):<android.app.ActivityManagerNative: boolean isSystemReady()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/ActivityManagerNative.java
Inconsistency (Non-Annotation):<android.app.ActivityManagerNative: void broadcastStickyIntent(Intent,String,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/ActivityManagerNative.java
Inconsistency (Non-Annotation):<android.app.ActivityManagerNative: void broadcastStickyIntent(Intent,String,int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/ActivityManagerNative.java
Inconsistency (Non-Annotation):<android.app.ActivityManagerNative: void noteWakeupAlarm(PendingIntent,int,String,String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/ActivityManagerNative.java
Inconsistency (Non-Annotation):<android.app.ActivityManagerNative: void noteAlarmStart(PendingIntent,int,String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/ActivityManagerNative.java
Inconsistency (Non-Annotation):<android.app.ActivityManagerNative: void noteAlarmFinish(PendingIntent,int,String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/ActivityManagerNative.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction: void bindConstants(Constants)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramVertexFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction.InternalBuilder: InternalBuilder addInput(Element)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramVertexFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction.InternalBuilder: ProgramVertexFixedFunction create()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramVertexFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction.Builder: Builder setTextureMatrixEnable(boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramVertexFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction.Builder: ProgramVertexFixedFunction create()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramVertexFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction.Constants: void destroy()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramVertexFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction.Constants: void setModelview(Matrix4f)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramVertexFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction.Constants: void setProjection(Matrix4f)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramVertexFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction.Constants: void setTexture(Matrix4f)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//rs/java/android/renderscript/ProgramVertexFixedFunction.java
<android.telephony.SignalStrength: boolean isGsm()>
/**
 * @return true if this is for GSM
 *
 * @deprecated This method returns true if there are any 3gpp type SignalStrength elements in
 * this SignalStrength report or if the report contains no valid SignalStrength
 * information. Instead callers should use
 * {@link android.telephony.SignalStrength#getCellSignalStrengths
 * getCellSignalStrengths()} to determine which types of information are contained
 * in the SignalStrength report.
 */
====>[PUBLIC]<android.telephony.SignalStrength: boolean isGsm()>    ---->    android.telephony.SignalStrength#getCellSignalStrengths  getCellSignalStrengths()
<android.telephony.PhoneNumberUtils: byte[] numberToCalledPartyBCD(String)>
/**
 * Convert a dialing number to BCD byte array
 *
 * @param number dialing number string. If the dialing number starts with '+', set to
 * international TOA
 *
 * @return BCD byte array
 *
 * @deprecated use {@link #numberToCalledPartyBCD(String, int)} instead. Calling this method
 * is equivalent to calling {@link #numberToCalledPartyBCD(String, int)} with
 * {@link #BCD_EXTENDED_TYPE_EF_ADN} as the extended type.
 */
====>[PUBLIC]<android.telephony.PhoneNumberUtils: byte[] numberToCalledPartyBCD(String)>    ---->    #numberToCalledPartyBCD(String, int)
<android.net.Proxy: String getDefaultHost()>
/**
 * Return the default proxy host specified by the carrier.
 * @return String containing the host name or null if there is no proxy for
 * this carrier.
 * @deprecated Use standard java vm proxy values to find the host, port and
 * exclusion list.  This call ignores the exclusion list and no
 * longer reports only mobile-data apn-based proxy values.
 */
====>[PUBLIC]<android.net.Proxy: String getDefaultHost()>    ---->    
<android.app.admin.DevicePolicyManager: String getDeviceInitializerApp()>
/**
 * @hide
 * @deprecated Do not use
 * @removed
 */
====>[HIDDEN]<android.app.admin.DevicePolicyManager: String getDeviceInitializerApp()>    ---->    
<android.graphics.ImageDecoder: boolean getAsAlphaMask()>
/**
 * @removed
 * @deprecated Renamed to {@link #isDecodeAsAlphaMaskEnabled}.
 */
====>[HIDDEN]<android.graphics.ImageDecoder: boolean getAsAlphaMask()>    ---->    #isDecodeAsAlphaMaskEnabled
<android.renderscript.Mesh.Builder: Builder addIndexSetType(Primitive)>
/**
 * @deprecated in API 16
 * Adds an index set primitive type to the builder object
 *
 * @param p primitive type
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.Builder: Builder addIndexSetType(Primitive)>    ---->    
<com.android.systemui.bubbles.BubbleStackView: void expandStack()>
/**
 * Expands the stack of bubbles.
 * <p>
 * Must be called from the main thread.
 *
 * @deprecated use {@link #setExpanded(boolean)} and {@link #setSelectedBubble(Bubble)}
 */
====>[PUBLIC]<com.android.systemui.bubbles.BubbleStackView: void expandStack()>    ---->    #setExpanded(boolean)
<android.net.wifi.WifiManager: void removePasspointConfiguration(String)>
/**
 * Remove the Passpoint configuration identified by its FQDN (Fully Qualified Domain Name).
 *
 * @param fqdn The FQDN of the Passpoint configuration to be removed
 * @throws IllegalArgumentException if no configuration is associated with the given FQDN or
 * Passpoint is not enabled on the device.
 * @deprecated This is no longer supported.
 */
====>[PUBLIC]<android.net.wifi.WifiManager: void removePasspointConfiguration(String)>    ---->    
<android.provider.MediaStore.Images.Media: Cursor query(ContentResolver,Uri,String[])>
/**
 * @deprecated all queries should be performed through
 * {@link ContentResolver} directly, which offers modern
 * features like {@link CancellationSignal}.
 */
====>[PUBLIC]<android.provider.MediaStore.Images.Media: Cursor query(ContentResolver,Uri,String[])>    ---->    ContentResolver
<android.webkit.CacheManager: void saveCacheFile(String,CacheResult)>
/**
 * Adds a cache entry to the HTTP cache for the specicifed URL. Also closes
 * the cache entry's output stream.
 *
 * @param url the URL for which the cache entry should be added
 * @param cacheResult the cache entry to add
 * @deprecated Access to the HTTP cache will be removed in a future release.
 */
====>[PUBLIC]<android.webkit.CacheManager: void saveCacheFile(String,CacheResult)>    ---->    
Inconsistency (Non-Documentation):<android.content.ContextWrapper: int getWallpaperDesiredMinimumWidth()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/content/ContextWrapper.java
<android.content.ContextWrapper: int getWallpaperDesiredMinimumWidth()>

====>[PUBLIC]<android.content.ContextWrapper: int getWallpaperDesiredMinimumWidth()>    ---->    
<android.location.LocationManager: void setLocationControllerExtraPackage(String)>
/**
 * Set the extra location controller package for location services on the device.
 *
 * @removed
 * @deprecated Use {@link #setExtraLocationControllerPackage} instead.
 * @hide
 */
====>[HIDDEN]<android.location.LocationManager: void setLocationControllerExtraPackage(String)>    ---->    #setExtraLocationControllerPackage
<android.renderscript.RSSurfaceView: void setRenderScriptGL(RenderScriptGL)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.RSSurfaceView: void setRenderScriptGL(RenderScriptGL)>    ---->    
<android.telecom.RemoteConference: void setAudioState(AudioState)>
/**
 * Request to change the conference's audio routing to the specified state. The specified state
 * can include audio routing (Bluetooth, Speaker, etc) and muting state.
 *
 * @see android.telecom.AudioState
 * @deprecated Use {@link #setCallAudioState(CallAudioState)} instead.
 * @hide
 */
====>[HIDDEN]<android.telecom.RemoteConference: void setAudioState(AudioState)>    ---->    #setCallAudioState(CallAudioState)
<android.os.storage.StorageManager: long benchmark(String)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.os.storage.StorageManager: long benchmark(String)>    ---->    
Inconsistency (Non-Documentation):<android.net.NetworkPolicyManager: boolean isUidValidForPolicy(Context,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/net/NetworkPolicyManager.java
<android.net.NetworkPolicyManager: boolean isUidValidForPolicy(Context,int)>
/**
 * Check if given UID can have a {@link #setUidPolicy(int, int)} defined,
 * usually to protect critical system services.
 */
====>[PUBLIC]<android.net.NetworkPolicyManager: boolean isUidValidForPolicy(Context,int)>    ---->    
<android.graphics.RenderNode: RecordingCanvas start(int,int)>
/**
 * @hide
 * @deprecated use {@link #beginRecording(int, int)} instead
 */
====>[HIDDEN]<android.graphics.RenderNode: RecordingCanvas start(int,int)>    ---->    #beginRecording(int, int)
<android.telecom.StatusHints: Drawable getIcon(Context)>
/**
 * @return An icon displayed in the in-call UI.
 *
 * @hide
 */
====>[HIDDEN]<android.telecom.StatusHints: Drawable getIcon(Context)>    ---->    
<android.hardware.radio.RadioManager.ProgramInfo: int getSubChannel()>
/**
 * Sub channel ID. E.g 1 for HD radio HD1
 * @return the program sub channel
 * @deprecated Use {@link getSelector()} instead.
 */
====>[PUBLIC]<android.hardware.radio.RadioManager.ProgramInfo: int getSubChannel()>    ---->    getSelector()
<android.app.Activity: boolean enterPictureInPictureMode(PictureInPictureArgs)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.Activity: boolean enterPictureInPictureMode(PictureInPictureArgs)>    ---->    
<android.webkit.WebView: boolean overlayVerticalScrollbar()>
/**
 * Gets whether vertical scrollbar has overlay style.
 *
 * @deprecated This method is now obsolete.
 * @return {@code false}
 */
====>[PUBLIC]<android.webkit.WebView: boolean overlayVerticalScrollbar()>    ---->    
<android.util.proto.ProtoOutputStream: void endRepeatedObject(long)>
/**
 * End a child object. Pass in the token from the correspoinding startRepeatedObject call.
 *
 * @deprecated Use #end() instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void endRepeatedObject(long)>    ---->    #end()
<android.widget.ImageView: void setAlpha(int)>
/**
 * Sets the alpha value that should be applied to the image.
 *
 * @param alpha the alpha value that should be applied to the image
 *
 * @deprecated use #setImageAlpha(int) instead
 */
====>[PUBLIC]<android.widget.ImageView: void setAlpha(int)>    ---->    #setImageAlpha(int)
<android.speech.tts.TextToSpeech: int synthesizeToFile(String,HashMap<String, String>,String)>
/**
 * Synthesizes the given text to a file using the specified parameters.
 * This method is asynchronous, i.e. the method just adds the request to the queue of TTS
 * requests and then returns. The synthesis might not have finished (or even started!) at the
 * time when this method returns. In order to reliably detect errors during synthesis,
 * we recommend setting an utterance progress listener (see
 * {@link #setOnUtteranceProgressListener}) and using the
 * {@link Engine#KEY_PARAM_UTTERANCE_ID} parameter.
 *
 * @param text The text that should be synthesized. No longer than
 * {@link #getMaxSpeechInputLength()} characters.
 * @param params Parameters for the request. Can be null.
 * Supported parameter names:
 * {@link Engine#KEY_PARAM_UTTERANCE_ID}.
 * Engine specific parameters may be passed in but the parameter keys
 * must be prefixed by the name of the engine they are intended for. For example
 * the keys "com.svox.pico_foo" and "com.svox.pico:bar" will be passed to the
 * engine named "com.svox.pico" if it is being used.
 * @param filename Absolute file filename to write the generated audio data to.It should be
 * something like "/sdcard/myappsounds/mysound.wav".
 *
 * @return {@link #ERROR} or {@link #SUCCESS} of <b>queuing</b> the synthesizeToFile operation.
 * @deprecated As of API level 21, replaced by
 * {@link #synthesizeToFile(CharSequence, Bundle, File, String)}.
 */
====>[PUBLIC]<android.speech.tts.TextToSpeech: int synthesizeToFile(String,HashMap<String, String>,String)>    ---->    #synthesizeToFile(CharSequence, Bundle, File, String)
<android.app.Activity: void setProgress(int)>
/**
 * Sets the progress for the progress bars in the title.
 * <p>
 * In order for the progress bar to be shown, the feature must be requested
 * via {@link #requestWindowFeature(int)}.
 *
 * @param progress The progress for the progress bar. Valid ranges are from
 * 0 to 10000 (both inclusive). If 10000 is given, the progress
 * bar will be completely filled and will fade out.
 * @deprecated No longer supported starting in API 21.
 */
====>[PUBLIC]<android.app.Activity: void setProgress(int)>    ---->    
<android.os.StatFs: int getBlockCount()>
/**
 * @deprecated Use {@link #getBlockCountLong()} instead.
 */
====>[PUBLIC]<android.os.StatFs: int getBlockCount()>    ---->    #getBlockCountLong()
<android.util.proto.ProtoOutputStream: void writeRepeatedUInt64(long,long)>
/**
 * Write a single proto "uint64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedUInt64(long,long)>    ---->    #write
<android.renderscript.Mesh.AllocationBuilder: AllocationBuilder addIndexSetType(Primitive)>
/**
 * @deprecated in API 16
 * Adds an index set type to the builder
 *
 * @param p index set primitive type
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.AllocationBuilder: AllocationBuilder addIndexSetType(Primitive)>    ---->    
<android.util.proto.ProtoOutputStream: void writeInt64(long,long)>
/**
 * Write a single proto "int64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeInt64(long,long)>    ---->    #write
<android.text.method.DigitsKeyListener: void <init>(boolean,boolean)>
/**
 * Allocates a DigitsKeyListener that accepts the ASCII digits 0 through 9, plus the ASCII plus
 * or minus sign (only at the beginning) and/or the ASCII period ('.') as the decimal point
 * (only one per field) if specified.
 *
 * @deprecated Use {@link #DigitsKeyListener(Locale, boolean, boolean)} instead.
 */
====>[PUBLIC]<android.text.method.DigitsKeyListener: void <init>(boolean,boolean)>    ---->    #DigitsKeyListener(Locale, boolean, boolean)
<android.content.pm.PackageItemInfo: CharSequence loadSafeLabel(PackageManager)>
/**
 * @hide
 * @deprecated use loadSafeLabel(PackageManager, float, int) instead
 */
====>[HIDDEN]<android.content.pm.PackageItemInfo: CharSequence loadSafeLabel(PackageManager)>    ---->    loadSafeLabel(PackageManager, float, int)
<android.os.Environment: File getUserConfigDirectory(int)>
/**
 * Returns the config directory for a user. This is for use by system
 * services to store files relating to the user which should be readable by
 * any app running as that user.
 *
 * @deprecated This directory is valid and still exists, but callers should
 * <em>strongly</em> consider switching to
 * {@link #getDataMiscCeDirectory(int)} which is protected with
 * user credentials or {@link #getDataMiscDeDirectory(int)}
 * which supports fast user wipe.
 * @hide
 */
====>[HIDDEN]<android.os.Environment: File getUserConfigDirectory(int)>    ---->    #getDataMiscCeDirectory(int)
<android.text.style.ImageSpan: void <init>(Bitmap)>
/**
 * @deprecated Use {@link #ImageSpan(Context, Bitmap)} instead.
 */
====>[PUBLIC]<android.text.style.ImageSpan: void <init>(Bitmap)>    ---->    #ImageSpan(Context, Bitmap)
<android.net.NetworkPolicyManager: Iterator<Pair<ZonedDateTime, ZonedDateTime>> cycleIterator(NetworkPolicy)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.net.NetworkPolicyManager: Iterator<Pair<ZonedDateTime, ZonedDateTime>> cycleIterator(NetworkPolicy)>    ---->    
<android.test.TouchUtils: void drag(ActivityInstrumentationTestCase,float,float,float,float,int)>
/**
 * Simulate touching a specific location and dragging to a new location.
 *
 * @param test The test case that is being run
 * @param fromX X coordinate of the initial touch, in screen coordinates
 * @param toX Xcoordinate of the drag destination, in screen coordinates
 * @param fromY X coordinate of the initial touch, in screen coordinates
 * @param toY Y coordinate of the drag destination, in screen coordinates
 * @param stepCount How many move steps to include in the drag
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: void drag(ActivityInstrumentationTestCase,float,float,float,float,int)>    ---->    android.test.ActivityInstrumentationTestCase2
<android.widget.PopupWindow: boolean isLayoutInScreenEnabled()>
/**
 * <p>Indicates whether the popup window will be forced into using absolute screen coordinates
 * for positioning.</p>
 *
 * @return true if the window will always be positioned in screen coordinates.
 *
 * @deprecated Use {@link #isLaidOutInScreen()} instead
 * @removed
 */
====>[HIDDEN]<android.widget.PopupWindow: boolean isLayoutInScreenEnabled()>    ---->    #isLaidOutInScreen()
<android.view.View: void setDrawingCacheBackgroundColor(int)>
/**
 * Setting a solid background color for the drawing cache's bitmaps will improve
 * performance and memory usage. Note, though that this should only be used if this
 * view will always be drawn on top of a solid color.
 *
 * @param color The background color to use for the drawing cache's bitmap
 *
 * @see #setDrawingCacheEnabled(boolean)
 * @see #buildDrawingCache()
 * @see #getDrawingCache()
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: void setDrawingCacheBackgroundColor(int)>    ---->    #setLayerType(int, Paint)
<android.telephony.SignalStrength: int getCdmaEcio()>
/**
 * Get the CDMA Ec/Io value in dB*10
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthCdma#getCdmaEcio}.
 *
 * @see android.telephony#CellSignalStrengthCdma
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 */
====>[PUBLIC]<android.telephony.SignalStrength: int getCdmaEcio()>    ---->    android.telephony#CellSignalStrengthCdma
<android.media.MediaCodec: ByteBuffer[] getInputBuffers()>
/**
 * Retrieve the set of input buffers.  Call this after start()
 * returns. After calling this method, any ByteBuffers
 * previously returned by an earlier call to this method MUST no
 * longer be used.
 *
 * @deprecated Use the new {@link #getInputBuffer} method instead
 * each time an input buffer is dequeued.
 *
 * <b>Note:</b> As of API 21, dequeued input buffers are
 * automatically {@link java.nio.Buffer#clear cleared}.
 *
 * <em>Do not use this method if using an input surface.</em>
 *
 * @throws IllegalStateException if not in the Executing state,
 * or codec is configured in asynchronous mode.
 * @throws MediaCodec.CodecException upon codec error.
 */
====>[PUBLIC]<android.media.MediaCodec: ByteBuffer[] getInputBuffers()>    ---->    #getInputBuffer
<android.hardware.fingerprint.FingerprintManager: boolean hasEnrolledFingerprints()>
/**
 * Determine if there is at least one fingerprint enrolled.
 *
 * @return true if at least one fingerprint is enrolled, false otherwise
 * @deprecated See {@link BiometricPrompt} and
 * {@link FingerprintManager#FINGERPRINT_ERROR_NO_FINGERPRINTS}
 */
====>[PUBLIC]<android.hardware.fingerprint.FingerprintManager: boolean hasEnrolledFingerprints()>    ---->    BiometricPrompt
<android.app.usage.StorageStatsManager: long getTotalBytes(String)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.usage.StorageStatsManager: long getTotalBytes(String)>    ---->    
<android.database.sqlite.SQLiteQueryBuilder: boolean isProjectionAggregationAllowed()>
/**
 * @deprecated Projection aggregation is now always allowed
 *
 * @hide
 */
====>[HIDDEN]<android.database.sqlite.SQLiteQueryBuilder: boolean isProjectionAggregationAllowed()>    ---->    
Inconsistency (Non-Documentation):<android.net.NetworkStats: NetworkStats combineValues(String,int,int,long,long,long,long,long)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/net/NetworkStats.java
<android.net.NetworkStats: NetworkStats combineValues(String,int,int,long,long,long,long,long)>

====>[PUBLIC]<android.net.NetworkStats: NetworkStats combineValues(String,int,int,long,long,long,long,long)>    ---->    
<android.widget.PopupWindow: void setClipToScreenEnabled(boolean)>
/**
 * <p>Clip this popup window to the screen, but not to the containing window.</p>
 *
 * <p>If the popup is showing, calling this method will take effect only
 * the next time the popup is shown or through a manual call to one of
 * the {@link #update()} methods.</p>
 *
 * @deprecated Use {@link #setIsClippedToScreen(boolean)} instead
 * @removed
 */
====>[HIDDEN]<android.widget.PopupWindow: void setClipToScreenEnabled(boolean)>    ---->    #setIsClippedToScreen(boolean)
<android.app.backup.BackupManager: String getDataManagementLabel(String)>
/**
 * Returns a {@link String} describing what the specified transport's data management intent is
 * used for. This value is set by {@link #updateTransportAttributes(ComponentName, String,
 * Intent, String, Intent, CharSequence)}.
 *
 * @param transportName The name of the registered transport.
 * @deprecated Since Android Q, please use the variant {@link
 * #getDataManagementIntentLabel(String)} instead.
 * @hide
 */
====>[HIDDEN]<android.app.backup.BackupManager: String getDataManagementLabel(String)>    ---->    #getDataManagementIntentLabel(String)
<android.content.pm.PackageManager: int installExistingPackageAsUser(String,int)>
/**
 * If there is already an application with the given package name installed
 * on the system for other users, also install it for the specified user.
 * @hide
 *
 * @deprecated use {@link PackageInstaller#installExistingPackage()} instead.
 */
====>[HIDDEN]<android.content.pm.PackageManager: int installExistingPackageAsUser(String,int)>    ---->    PackageInstaller#installExistingPackage()
<android.webkit.UrlInterceptHandler: PluginData getPluginData(String,Map<String, String>)>
/**
 * Given an URL, returns the PluginData which contains the
 * surrogate response for the request, or {@code null} if the handler is
 * not interested.
 *
 * @param url URL string.
 * @param headers The headers associated with the request.
 * @return The PluginData containing the surrogate response.
 *
 * @hide
 * @deprecated Do not use, this interface is deprecated.
 */
====>[HIDDEN]<android.webkit.UrlInterceptHandler: PluginData getPluginData(String,Map<String, String>)>    ---->    
<android.preference.PreferenceActivity: boolean onPreferenceTreeClick(PreferenceScreen,Preference)>
/**
 * {@inheritDoc}
 *
 * @deprecated This function is not relevant for a modern fragment-based
 * PreferenceActivity.
 */
====>[PUBLIC]<android.preference.PreferenceActivity: boolean onPreferenceTreeClick(PreferenceScreen,Preference)>    ---->    
Inconsistency (Non-Documentation):<android.app.Notification.Action.WearableExtender: CharSequence getConfirmLabel()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.Action.WearableExtender: CharSequence getConfirmLabel()>
/**
 * Get the label to display to confirm that the action should be executed.
 * This is usually an imperative verb like "Send".
 *
 * @return the label to confirm the action should be executed
 */
====>[PUBLIC]<android.app.Notification.Action.WearableExtender: CharSequence getConfirmLabel()>    ---->    
Inconsistency (Non-Documentation):<android.app.Notification.Action.WearableExtender: WearableExtender setCancelLabel(CharSequence)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.Action.WearableExtender: WearableExtender setCancelLabel(CharSequence)>
/**
 * Set a label to display to cancel the action.
 * This is usually an imperative verb, like "Cancel".
 *
 * @param label the label to display to cancel the action
 * @return this object for method chaining
 */
====>[PUBLIC]<android.app.Notification.Action.WearableExtender: WearableExtender setCancelLabel(CharSequence)>    ---->    
Inconsistency (Non-Documentation):<android.content.IContentProvider: ContentProviderResult[] applyBatch(String,ArrayList<ContentProviderOperation>)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/content/IContentProvider.java
<android.content.IContentProvider: ContentProviderResult[] applyBatch(String,ArrayList<ContentProviderOperation>)>

====>[PUBLIC]<android.content.IContentProvider: ContentProviderResult[] applyBatch(String,ArrayList<ContentProviderOperation>)>    ---->    
<android.net.NetworkInfo: void setExtraInfo(String)>
/**
 * Set the extraInfo field.
 * @param extraInfo an optional {@code String} providing addditional network state
 * information passed up from the lower networking layers.
 * @deprecated See {@link NetworkInfo#getExtraInfo}.
 * @hide
 */
====>[HIDDEN]<android.net.NetworkInfo: void setExtraInfo(String)>    ---->    NetworkInfo#getExtraInfo
<com.android.settingslib.wifi.AccessPoint: String getConfigName()>
/**
 * Returns the name associated with the stored config.
 * @deprecated Please use {@link #getTitle()} instead to get the display name of an AccessPoint.
 */
====>[PUBLIC]<com.android.settingslib.wifi.AccessPoint: String getConfigName()>    ---->    #getTitle()
<android.os.Debug: int getGlobalGcInvocationCount()>
/**
 * Returns the number of non-concurrent GC invocations between a
 * {@link #startAllocCounting() start} and {@link #stopAllocCounting() stop}.
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: int getGlobalGcInvocationCount()>    ---->    
<android.accounts.AccountManager: AccountManagerFuture<Boolean> removeAccount(Account,AccountManagerCallback<Boolean>,Handler)>
/**
 * Removes an account from the AccountManager.  Does nothing if the account
 * does not exist.  Does not delete the account from the server.
 * The authenticator may have its own policies preventing account
 * deletion, in which case the account will not be deleted.
 *
 * <p>This method requires the caller to have a signature match with the
 * authenticator that manages the specified account.
 *
 * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,
 * MANAGE_ACCOUNTS permission is needed for those platforms. See docs for
 * this function in API level 22.
 *
 * @param account The {@link Account} to remove
 * @param callback Callback to invoke when the request completes,
 * null for no callback
 * @param handler {@link Handler} identifying the callback thread,
 * null for the main thread
 * @return An {@link AccountManagerFuture} which resolves to a Boolean,
 * true if the account has been successfully removed
 * @deprecated use
 * {@link #removeAccount(Account, Activity, AccountManagerCallback, Handler)}
 * instead
 */
====>[PUBLIC]<android.accounts.AccountManager: AccountManagerFuture<Boolean> removeAccount(Account,AccountManagerCallback<Boolean>,Handler)>    ---->    #removeAccount(Account, Activity, AccountManagerCallback, Handler)
<android.content.Context: File getSharedPrefsFile(String)>
/**
 * @hide
 * @deprecated use {@link #getSharedPreferencesPath(String)}
 */
====>[HIDDEN]<android.content.Context: File getSharedPrefsFile(String)>    ---->    #getSharedPreferencesPath(String)
<android.graphics.drawable.BitmapDrawable: void <init>(Resources)>
/**
 * Create an empty drawable, setting initial target density based on
 * the display metrics of the resources.
 *
 * @deprecated Use {@link #BitmapDrawable(android.content.res.Resources, android.graphics.Bitmap)}
 * instead to specify a bitmap to draw with.
 */
====>[PUBLIC]<android.graphics.drawable.BitmapDrawable: void <init>(Resources)>    ---->    #BitmapDrawable(android.content.res.Resources, android.graphics.Bitmap)
<com.android.systemui.media.NotificationPlayer: void play(Context,Uri,boolean,int)>
/**
 * Start playing the sound.  It will actually start playing at some
 * point in the future.  There are no guarantees about latency here.
 * Calling this before another audio file is done playing will stop
 * that one and start the new one.
 *
 * @param context Your application's context.
 * @param uri The URI to play.  (see {@link MediaPlayer#setDataSource(Context, Uri)})
 * @param looping Whether the audio should loop forever.
 * (see {@link MediaPlayer#setLooping(boolean)})
 * @param stream the AudioStream to use.
 * (see {@link MediaPlayer#setAudioStreamType(int)})
 * @deprecated use {@link #play(Context, Uri, boolean, AudioAttributes)} instead.
 */
====>[PUBLIC]<com.android.systemui.media.NotificationPlayer: void play(Context,Uri,boolean,int)>    ---->    #play(Context, Uri, boolean, AudioAttributes)
<android.text.DynamicLayout: void <init>(CharSequence,CharSequence,TextPaint,int,Alignment,TextDirectionHeuristic,float,float,boolean,int,int,int,TruncateAt,int)>
/**
 * Make a layout for the transformed text (password transformation being the primary example of
 * a transformation) that will be updated as the base text is changed. If ellipsize is non-null,
 * the Layout will ellipsize the text down to ellipsizedWidth.
 *
 * @hide
 * @deprecated Use {@link Builder} instead.
 */
====>[HIDDEN]<android.text.DynamicLayout: void <init>(CharSequence,CharSequence,TextPaint,int,Alignment,TextDirectionHeuristic,float,float,boolean,int,int,int,TruncateAt,int)>    ---->    Builder
<android.telephony.TelephonyManager: void call(String,String)>
/**
 * @deprecated Use  {@link android.telecom.TelecomManager#placeCall(Uri address,
 * Bundle extras)} instead.
 * @hide
 */
====>[HIDDEN]<android.telephony.TelephonyManager: void call(String,String)>    ---->    android.telecom.TelecomManager#placeCall(Uri address,  Bundle extras)
<android.renderscript.Mesh.AllocationBuilder: void <init>(RenderScript)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.Mesh.AllocationBuilder: void <init>(RenderScript)>    ---->    
<android.telephony.SignalStrength: int getWcdmaRscp()>
/**
 * Gets WCDMA RSCP as a dBm value between -120 and -24, as defined in TS 27.007 8.69.
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthWcdma#getRscp}.
 *
 * @see android.telephony#CellSignalStrengthWcdma
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getWcdmaRscp()>    ---->    android.telephony#CellSignalStrengthWcdma
<android.widget.TextView: void setTextAppearance(Context,int)>
/**
 * Sets the text color, size, style, hint color, and highlight color
 * from the specified TextAppearance resource.
 *
 * @deprecated Use {@link #setTextAppearance(int)} instead.
 */
====>[PUBLIC]<android.widget.TextView: void setTextAppearance(Context,int)>    ---->    #setTextAppearance(int)
Inconsistency (Non-Documentation):<android.net.NetworkStatsHistory.DataStreamUtils: long[] readFullLongArray(DataInputStream)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/net/NetworkStatsHistory.java
<android.net.NetworkStatsHistory.DataStreamUtils: long[] readFullLongArray(DataInputStream)>

====>[PUBLIC]<android.net.NetworkStatsHistory.DataStreamUtils: long[] readFullLongArray(DataInputStream)>    ---->    
<android.renderscript.Mesh: Allocation getVertexAllocation(int)>
/**
 * @deprecated in API 16
 * @param slot index in the list of allocations to return
 * @return vertex data allocation at the given index
 */
====>[PUBLIC]<android.renderscript.Mesh: Allocation getVertexAllocation(int)>    ---->    
<android.content.ClipboardManager: CharSequence getText()>
/**
 * @deprecated Use {@link #getPrimaryClip()} instead.  This retrieves
 * the primary clip and tries to coerce it to a string.
 */
====>[PUBLIC]<android.content.ClipboardManager: CharSequence getText()>    ---->    #getPrimaryClip()
<android.webkit.Plugin: void <init>(String,String,String,String)>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin: void <init>(String,String,String,String)>    ---->    
<android.app.Fragment: void onAttach(Activity)>
/**
 * @deprecated Use {@link #onAttach(Context)} instead.
 */
====>[PUBLIC]<android.app.Fragment: void onAttach(Activity)>    ---->    #onAttach(Context)
<android.telephony.euicc.DownloadableSubscription: void setConfirmationCode(String)>
/**
 * Sets the confirmation code.
 * @hide
 * @deprecated - Do not use.
 */
====>[HIDDEN]<android.telephony.euicc.DownloadableSubscription: void setConfirmationCode(String)>    ---->    
<android.content.Intent: IBinder getIBinderExtra(String)>
/**
 * Retrieve extended data from the intent.
 *
 * @param name The name of the desired item.
 *
 * @return the value of an item previously added with putExtra(),
 * or null if no IBinder value was found.
 *
 * @see #putExtra(String, IBinder)
 *
 * @deprecated
 * @hide
 */
====>[HIDDEN]<android.content.Intent: IBinder getIBinderExtra(String)>    ---->    
<android.renderscript.RSSurfaceView: RenderScriptGL createRenderScriptGL(SurfaceConfig)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.RSSurfaceView: RenderScriptGL createRenderScriptGL(SurfaceConfig)>    ---->    
<android.content.res.Resources: void <init>(AssetManager,DisplayMetrics,Configuration)>
/**
 * Create a new Resources object on top of an existing set of assets in an
 * AssetManager.
 *
 * @deprecated Resources should not be constructed by apps.
 * See {@link android.content.Context#createConfigurationContext(Configuration)}.
 *
 * @param assets Previously created AssetManager.
 * @param metrics Current display metrics to consider when
 * selecting/computing resource values.
 * @param config Desired device configuration to consider when
 * selecting/computing resource values (optional).
 */
====>[PUBLIC]<android.content.res.Resources: void <init>(AssetManager,DisplayMetrics,Configuration)>    ---->    android.content.Context#createConfigurationContext(Configuration)
<android.util.proto.ProtoOutputStream: void writePackedSFixed32(long,int[])>
/**
 * Write a list of packed proto "sfixed32" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedSFixed32(long,int[])>    ---->    #write
<android.app.slice.SliceManager: Slice bindSlice(Intent,List<SliceSpec>)>
/**
 * @deprecated TO BE REMOVED.
 * @removed
 */
====>[HIDDEN]<android.app.slice.SliceManager: Slice bindSlice(Intent,List<SliceSpec>)>    ---->    
<android.app.FragmentController: List<Fragment> retainNonConfig()>
/**
 * Returns a list of Fragments that have opted to retain their instance across
 * configuration changes.
 *
 * @deprecated use {@link #retainNestedNonConfig()} to also track retained
 * nested child fragments
 */
====>[PUBLIC]<android.app.FragmentController: List<Fragment> retainNonConfig()>    ---->    #retainNestedNonConfig()
<android.webkit.WebChromeClient: void onExceededDatabaseQuota(String,String,long,long,long,QuotaUpdater)>
/**
 * Tell the client that the quota has been exceeded for the Web SQL Database
 * API for a particular origin and request a new quota. The client must
 * respond by invoking the
 * {@link WebStorage.QuotaUpdater#updateQuota(long) updateQuota(long)}
 * method of the supplied {@link WebStorage.QuotaUpdater} instance. The
 * minimum value that can be set for the new quota is the current quota. The
 * default implementation responds with the current quota, so the quota will
 * not be increased.
 * @param url The URL of the page that triggered the notification
 * @param databaseIdentifier The identifier of the database where the quota
 * was exceeded.
 * @param quota The quota for the origin, in bytes
 * @param estimatedDatabaseSize The estimated size of the offending
 * database, in bytes
 * @param totalQuota The total quota for all origins, in bytes
 * @param quotaUpdater An instance of {@link WebStorage.QuotaUpdater} which
 * must be used to inform the WebView of the new quota.
 * @deprecated This method is no longer called; WebView now uses the HTML5 / JavaScript Quota
 * Management API.
 */
====>[PUBLIC]<android.webkit.WebChromeClient: void onExceededDatabaseQuota(String,String,long,long,long,QuotaUpdater)>    ---->    
<android.content.res.Resources: void updateConfiguration(Configuration,DisplayMetrics)>
/**
 * Store the newly updated configuration.
 *
 * @deprecated See {@link android.content.Context#createConfigurationContext(Configuration)}.
 */
====>[PUBLIC]<android.content.res.Resources: void updateConfiguration(Configuration,DisplayMetrics)>    ---->    android.content.Context#createConfigurationContext(Configuration)
<android.webkit.WebSettings: void setUseDoubleTree(boolean)>
/**
 * Controlled a rendering optimization that is no longer present. Setting
 * it now has no effect.
 *
 * @deprecated This setting now has no effect.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebSettings: void setUseDoubleTree(boolean)>    ---->    
<android.app.admin.DevicePolicyManager: ComponentName getDeviceInitializerComponent()>
/**
 * @hide
 * @deprecated Do not use
 * @removed
 */
====>[HIDDEN]<android.app.admin.DevicePolicyManager: ComponentName getDeviceInitializerComponent()>    ---->    
<android.provider.Settings.System: void setShowGTalkServiceStatus(ContentResolver,boolean)>
/**
 * @deprecated - Do not use
 */
====>[PUBLIC]<android.provider.Settings.System: void setShowGTalkServiceStatus(ContentResolver,boolean)>    ---->    
<android.app.Service: void setForeground(boolean)>
/**
 * @deprecated This is a now a no-op, use
 * {@link #startForeground(int, Notification)} instead.  This method
 * has been turned into a no-op rather than simply being deprecated
 * because analysis of numerous poorly behaving devices has shown that
 * increasingly often the trouble is being caused in part by applications
 * that are abusing it.  Thus, given a choice between introducing
 * problems in existing applications using this API (by allowing them to
 * be killed when they would like to avoid it), vs allowing the performance
 * of the entire system to be decreased, this method was deemed less
 * important.
 *
 * @hide
 */
====>[HIDDEN]<android.app.Service: void setForeground(boolean)>    ---->    #startForeground(int, Notification)
<android.telephony.euicc.DownloadableSubscription: void setAccessRules(List<UiccAccessRule>)>
/**
 * Set the {@link UiccAccessRule}s dictating access to this subscription.
 * @hide
 * @deprecated - Do not use.
 */
====>[HIDDEN]<android.telephony.euicc.DownloadableSubscription: void setAccessRules(List<UiccAccessRule>)>    ---->    
<android.text.StaticLayout: void <init>(CharSequence,int,int,TextPaint,int,Alignment,float,float,boolean,TruncateAt,int)>
/**
 * @deprecated Use {@link Builder} instead.
 */
====>[PUBLIC]<android.text.StaticLayout: void <init>(CharSequence,int,int,TextPaint,int,Alignment,float,float,boolean,TruncateAt,int)>    ---->    Builder
<android.app.Activity: void onMultiWindowModeChanged(boolean)>
/**
 * Called by the system when the activity changes from fullscreen mode to multi-window mode and
 * visa-versa.
 *
 * @see android.R.attr#resizeableActivity
 *
 * @param isInMultiWindowMode True if the activity is in multi-window mode.
 *
 * @deprecated Use {@link #onMultiWindowModeChanged(boolean, Configuration)} instead.
 */
====>[PUBLIC]<android.app.Activity: void onMultiWindowModeChanged(boolean)>    ---->    #onMultiWindowModeChanged(boolean, Configuration)
Inconsistency (Non-Documentation):<android.net.NetworkStatsHistory: void removeBucketsBefore(long)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/net/NetworkStatsHistory.java
<android.net.NetworkStatsHistory: void removeBucketsBefore(long)>
/**
 * Remove buckets older than requested cutoff.
 */
====>[PUBLIC]<android.net.NetworkStatsHistory: void removeBucketsBefore(long)>    ---->    
<android.provider.MediaStore.Images.Thumbnails: Cursor queryMiniThumbnails(ContentResolver,Uri,int,String[])>
/**
 * @deprecated all queries should be performed through
 * {@link ContentResolver} directly, which offers modern
 * features like {@link CancellationSignal}.
 */
====>[PUBLIC]<android.provider.MediaStore.Images.Thumbnails: Cursor queryMiniThumbnails(ContentResolver,Uri,int,String[])>    ---->    ContentResolver
<android.renderscript.RenderScriptGL: void setSurfaceTexture(SurfaceTexture,int,int)>
/**
 * @deprecated in API 16
 * Bind an os surface
 *
 * @param w
 * @param h
 * @param sur
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL: void setSurfaceTexture(SurfaceTexture,int,int)>    ---->    
<android.hardware.location.ContextHubManager: NanoAppInstanceInfo getNanoAppInstanceInfo(int)>
/**
 * get information about the nano app instance
 *
 * NOTE: The returned NanoAppInstanceInfo does _not_ contain correct
 * information for several fields, specifically:
 * - getName()
 * - getPublisher()
 * - getNeededExecMemBytes()
 * - getNeededReadMemBytes()
 * - getNeededWriteMemBytes()
 *
 * For example, say you call loadNanoApp() with a NanoApp that has
 * getName() returning "My Name".  Later, if you call getNanoAppInstanceInfo
 * for that nanoapp, the returned NanoAppInstanceInfo's getName()
 * method will claim "Preloaded app, unknown", even though you would
 * have expected "My Name".  For now, as the user, you'll need to
 * separately track the above fields if they are of interest to you.
 *
 * TODO(b/30943489): Have the returned NanoAppInstanceInfo contain the
 * correct information.
 *
 * @param nanoAppHandle handle of the nanoapp instance
 * @return NanoAppInstanceInfo the NanoAppInstanceInfo of the nanoapp, or null if the nanoapp
 * does not exist
 *
 * @see NanoAppInstanceInfo
 *
 * @deprecated Use {@link #queryNanoApps(ContextHubInfo)} instead to explicitly query the hub
 * for loaded nanoapps.
 */
====>[PUBLIC]<android.hardware.location.ContextHubManager: NanoAppInstanceInfo getNanoAppInstanceInfo(int)>    ---->    #queryNanoApps(ContextHubInfo)
<android.view.ViewConfiguration: int getMinimumFlingVelocity()>
/**
 * @return Minimum velocity to initiate a fling, as measured in dips per second.
 *
 * @deprecated Use {@link #getScaledMinimumFlingVelocity()} instead.
 */
====>[PUBLIC]<android.view.ViewConfiguration: int getMinimumFlingVelocity()>    ---->    #getScaledMinimumFlingVelocity()
<android.location.Location: void removeAltitude()>
/**
 * Remove the altitude from this location.
 *
 * <p>Following this call {@link #hasAltitude} will return false,
 * and {@link #getAltitude} will return 0.0.
 *
 * @deprecated use a new Location object for location updates.
 */
====>[PUBLIC]<android.location.Location: void removeAltitude()>    ---->    
Inconsistency (Non-Documentation):<android.app.Notification.Action.WearableExtender: CharSequence getInProgressLabel()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.Action.WearableExtender: CharSequence getInProgressLabel()>
/**
 * Get the label to display while the wearable is preparing to automatically execute
 * the action. This is usually a 'ing' verb ending in ellipsis like "Sending..."
 *
 * @return the label to display while the action is being prepared to execute
 */
====>[PUBLIC]<android.app.Notification.Action.WearableExtender: CharSequence getInProgressLabel()>    ---->    
<android.util.proto.ProtoOutputStream: void writeRepeatedSInt32(long,int)>
/**
 * Write a single repeated proto "sint32" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedSInt32(long,int)>    ---->    #write
<android.content.res.AssetManager: int addAssetPath(String)>
/**
 * @deprecated Use {@link #setApkAssets(ApkAssets[], boolean)}
 * @hide
 */
====>[HIDDEN]<android.content.res.AssetManager: int addAssetPath(String)>    ---->    #setApkAssets(ApkAssets[], boolean)
<android.net.ConnectivityManager: void setBackgroundDataSetting(boolean)>
/**
 * Sets the value of the setting for background data usage.
 *
 * @param allowBackgroundData Whether an application should use data while
 * it is in the background.
 *
 * @attr ref android.Manifest.permission#CHANGE_BACKGROUND_DATA_SETTING
 * @see #getBackgroundDataSetting()
 * @hide
 */
====>[HIDDEN]<android.net.ConnectivityManager: void setBackgroundDataSetting(boolean)>    ---->    
<android.graphics.ImageDecoder: ImageDecoder setMutable(boolean)>
/**
 * @removed
 * @deprecated Renamed to {@link #setMutableRequired}.
 */
====>[HIDDEN]<android.graphics.ImageDecoder: ImageDecoder setMutable(boolean)>    ---->    #setMutableRequired
<android.net.wifi.WifiManager: WifiLock createWifiLock(String)>
/**
 * Creates a new WifiLock.
 *
 * @param tag a tag for the WifiLock to identify it in debugging messages.  This string is
 * never shown to the user under normal conditions, but should be descriptive
 * enough to identify your application and the specific WifiLock within it, if it
 * holds multiple WifiLocks.
 *
 * @return a new, unacquired WifiLock with the given tag.
 *
 * @see WifiLock
 *
 * @deprecated This API is non-functional.
 */
====>[PUBLIC]<android.net.wifi.WifiManager: WifiLock createWifiLock(String)>    ---->    
<com.android.server.ServiceWatcher: T runOnBinderBlocking(BlockingBinderRunner<T>,T)>
/**
 * Runs the given function synchronously if currently connected, and returns the default value
 * if not currently connected or if any exception is thrown.
 *
 * @deprecated Using this function is an indication that your AIDL API is broken. Calls from
 * system server to outside MUST be one-way, and so cannot return any result, and this
 * method should not be needed or used. Use a separate callback interface to allow outside
 * components to return results back to the system server.
 */
====>[PUBLIC]<com.android.server.ServiceWatcher: T runOnBinderBlocking(BlockingBinderRunner<T>,T)>    ---->    
<android.location.GnssMeasurement: void setCarrierPhase(double)>
/**
 * Sets the RF phase detected by the receiver.
 *
 * @deprecated use {@link #setAccumulatedDeltaRangeMeters(double)}
 * and {@link #setAccumulatedDeltaRangeState(int)} instead.
 *
 * @hide
 */
====>[HIDDEN]<android.location.GnssMeasurement: void setCarrierPhase(double)>    ---->    #setAccumulatedDeltaRangeMeters(double)
<android.webkit.WebSettings: boolean enableSmoothTransition()>
/**
 * Gets whether the WebView enables smooth transition while panning or
 * zooming.
 *
 * @see #setEnableSmoothTransition
 *
 * @deprecated This method is now obsolete, and will become a no-op in future.
 */
====>[PUBLIC]<android.webkit.WebSettings: boolean enableSmoothTransition()>    ---->    
<android.telephony.SignalStrength: int getLteSignalStrength()>
/**
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthLte#getRssi}.
 *
 * @see android.telephony#CellSignalStrengthLte
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getLteSignalStrength()>    ---->    android.telephony#CellSignalStrengthLte
<android.content.pm.PackageManager: int installExistingPackage(String,int)>
/**
 * If there is already an application with the given package name installed
 * on the system for other users, also install it for the calling user.
 * @hide
 *
 * @deprecated use {@link PackageInstaller#installExistingPackage()} instead.
 */
====>[HIDDEN]<android.content.pm.PackageManager: int installExistingPackage(String,int)>    ---->    PackageInstaller#installExistingPackage()
<android.net.ConnectivityManager: void setNetworkPreference(int)>
/**
 * Specifies the preferred network type.  When the device has more
 * than one type available the preferred network type will be used.
 *
 * @param preference the network type to prefer over all others.  It is
 * unspecified what happens to the old preferred network in the
 * overall ordering.
 * @deprecated Functionality has been removed as it no longer makes sense,
 * with many more than two networks - we'd need an array to express
 * preference.  Instead we use dynamic network properties of
 * the networks to describe their precedence.
 */
====>[PUBLIC]<android.net.ConnectivityManager: void setNetworkPreference(int)>    ---->    
<android.view.textclassifier.TextClassification: Intent getIntent()>
/**
 * Returns an intent that may be fired to act on the classified text.
 *
 * <p><strong>NOTE: </strong>This field is not parcelled and will always return null when this
 * object is read from a parcel.
 *
 * @deprecated Use {@link #getActions()} instead.
 */
====>[PUBLIC]<android.view.textclassifier.TextClassification: Intent getIntent()>    ---->    #getActions()
<com.android.internal.widget.PagerAdapter: void setPrimaryItem(View,int,Object)>
/**
 * Called to inform the adapter of which item is currently considered to
 * be the "primary", that is the one show to the user as the current page.
 *
 * @param container The containing View from which the page will be removed.
 * @param position The page position that is now the primary.
 * @param object The same object that was returned by
 * {@link #instantiateItem(android.view.View, int)}.
 *
 * @deprecated Use {@link #setPrimaryItem(android.view.ViewGroup, int, Object)}
 */
====>[PUBLIC]<com.android.internal.widget.PagerAdapter: void setPrimaryItem(View,int,Object)>    ---->    #setPrimaryItem(android.view.ViewGroup, int, Object)
<android.net.wifi.aware.DiscoverySession: NetworkSpecifier createNetworkSpecifierPassphrase(PeerHandle,String)>
/**
 * Create a {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} for
 * an encrypted WiFi Aware connection (link) to the specified peer. The
 * {@link android.net.NetworkRequest.Builder#addTransportType(int)} should be set to
 * {@link android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE}.
 * <p>
 * This method should be used when setting up a connection with a peer discovered through Aware
 * discovery or communication (in such scenarios the MAC address of the peer is shielded by
 * an opaque peer ID handle). If an Aware connection is needed to a peer discovered using other
 * OOB (out-of-band) mechanism then use the alternative
 * {@link WifiAwareSession#createNetworkSpecifierPassphrase(int, byte[], String)} method -
 * which uses the peer's MAC address.
 * <p>
 * Note: per the Wi-Fi Aware specification the roles are fixed - a Subscriber is an INITIATOR
 * and a Publisher is a RESPONDER.
 * @deprecated Use the replacement {@link WifiAwareNetworkSpecifier.Builder}.
 *
 * @param peerHandle The peer's handle obtained through
 * {@link DiscoverySessionCallback#onServiceDiscovered(PeerHandle,
 * byte[], java.util.List)} or
 * {@link DiscoverySessionCallback#onMessageReceived(PeerHandle,
 * byte[])}. On a RESPONDER this value is used to gate the acceptance of a connection request
 * from only that peer.
 * @param passphrase The passphrase to be used to encrypt the link. The PMK is generated from
 * the passphrase. Use the
 * {@link #createNetworkSpecifierOpen(PeerHandle)} API to
 * specify an open (unencrypted) link.
 *
 * @return A {@link NetworkSpecifier} to be used to construct
 * {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} to pass to
 * {@link android.net.ConnectivityManager#requestNetwork(android.net.NetworkRequest,
 * android.net.ConnectivityManager.NetworkCallback)}
 * [or other varieties of that API].
 */
====>[PUBLIC]<android.net.wifi.aware.DiscoverySession: NetworkSpecifier createNetworkSpecifierPassphrase(PeerHandle,String)>    ---->    WifiAwareNetworkSpecifier.Builder
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: int getGravity()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.WearableExtender: int getGravity()>
/**
 * Get the gravity that this notification should have within the available viewport space.
 * Supported values include {@link android.view.Gravity#TOP},
 * {@link android.view.Gravity#CENTER_VERTICAL} and {@link android.view.Gravity#BOTTOM}.
 * The default value is {@link android.view.Gravity#BOTTOM}.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: int getGravity()>    ---->    
<android.app.backup.BackupManager: void updateTransportAttributes(ComponentName,String,Intent,String,Intent,String)>
/**
 * Update the attributes of the transport identified by {@code transportComponent}. If the
 * specified transport has not been bound at least once (for registration), this call will be
 * ignored. Only the host process of the transport can change its description, otherwise a
 * {@link SecurityException} will be thrown.
 *
 * @param transportComponent The identity of the transport being described.
 * @param name A {@link String} with the new name for the transport. This is NOT for
 * identification. MUST NOT be {@code null}.
 * @param configurationIntent An {@link Intent} that can be passed to {@link
 * Context#startActivity} in order to launch the transport's configuration UI. It may be
 * {@code null} if the transport does not offer any user-facing configuration UI.
 * @param currentDestinationString A {@link String} describing the destination to which the
 * transport is currently sending data. MUST NOT be {@code null}.
 * @param dataManagementIntent An {@link Intent} that can be passed to {@link
 * Context#startActivity} in order to launch the transport's data-management UI. It may be
 * {@code null} if the transport does not offer any user-facing data management UI.
 * @param dataManagementLabel A {@link String} to be used as the label for the transport's data
 * management affordance. This MUST be {@code null} when dataManagementIntent is {@code
 * null} and MUST NOT be {@code null} when dataManagementIntent is not {@code null}.
 * @throws SecurityException If the UID of the calling process differs from the package UID of
 * {@code transportComponent} or if the caller does NOT have BACKUP permission.
 * @deprecated Since Android Q, please use the variant {@link
 * #updateTransportAttributes(ComponentName, String, Intent, String, Intent, CharSequence)}
 * instead.
 * @hide
 */
====>[HIDDEN]<android.app.backup.BackupManager: void updateTransportAttributes(ComponentName,String,Intent,String,Intent,String)>    ---->    #updateTransportAttributes(ComponentName, String, Intent, String, Intent, CharSequence)
<android.media.AudioManager: void registerRemoteControlClient(RemoteControlClient)>
/**
 * Registers the remote control client for providing information to display on the remote
 * controls.
 * @param rcClient The remote control client from which remote controls will receive
 * information to display.
 * @see RemoteControlClient
 * @deprecated Use {@link MediaSession} instead.
 */
====>[PUBLIC]<android.media.AudioManager: void registerRemoteControlClient(RemoteControlClient)>    ---->    MediaSession
<android.graphics.drawable.BitmapDrawable: void <init>()>
/**
 * Create an empty drawable, not dealing with density.
 * @deprecated Use {@link #BitmapDrawable(android.content.res.Resources, android.graphics.Bitmap)}
 * instead to specify a bitmap to draw with and ensure the correct density is set.
 */
====>[PUBLIC]<android.graphics.drawable.BitmapDrawable: void <init>()>    ---->    #BitmapDrawable(android.content.res.Resources, android.graphics.Bitmap)
<android.text.style.SuggestionSpan: void notifySelection(Context,String,int)>
/**
 * Does nothing.
 *
 * @deprecated this is deprecated in {@link android.os.Build.VERSION_CODES#Q}.
 * @hide
 */
====>[HIDDEN]<android.text.style.SuggestionSpan: void notifySelection(Context,String,int)>    ---->    
<android.renderscript.ProgramRaster: ProgramRaster CULL_BACK(RenderScript)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.ProgramRaster: ProgramRaster CULL_BACK(RenderScript)>    ---->    
<android.content.Context: void removeStickyBroadcastAsUser(Intent,UserHandle)>
/**
 * <p>Version of {@link #removeStickyBroadcast(Intent)} that allows you to specify the
 * user the broadcast will be sent to.  This is not available to applications
 * that are not pre-installed on the system image.
 *
 * <p>You must hold the {@link android.Manifest.permission#BROADCAST_STICKY}
 * permission in order to use this API.  If you do not hold that
 * permission, {@link SecurityException} will be thrown.
 *
 * @deprecated Sticky broadcasts should not be used.  They provide no security (anyone
 * can access them), no protection (anyone can modify them), and many other problems.
 * The recommended pattern is to use a non-sticky broadcast to report that <em>something</em>
 * has changed, with another mechanism for apps to retrieve the current value whenever
 * desired.
 *
 * @param intent The Intent that was previously broadcast.
 * @param user UserHandle to remove the sticky broadcast from.
 *
 * @see #sendStickyBroadcastAsUser
 */
====>[PUBLIC]<android.content.Context: void removeStickyBroadcastAsUser(Intent,UserHandle)>    ---->    #sendStickyBroadcastAsUser
<android.telecom.Connection: AudioState getAudioState()>
/**
 * @return The audio state of the connection, describing how its audio is currently
 * being routed by the system. This is {@code null} if this Connection
 * does not directly know about its audio state.
 * @deprecated Use {@link #getCallAudioState()} instead.
 * @hide
 */
====>[HIDDEN]<android.telecom.Connection: AudioState getAudioState()>    ---->    #getCallAudioState()
Inconsistency (Non-Documentation):<android.app.Notification.Action.WearableExtender: WearableExtender setInProgressLabel(CharSequence)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.Action.WearableExtender: WearableExtender setInProgressLabel(CharSequence)>
/**
 * Set a label to display while the wearable is preparing to automatically execute the
 * action. This is usually a 'ing' verb ending in ellipsis like "Sending..."
 *
 * @param label the label to display while the action is being prepared to execute
 * @return this object for method chaining
 */
====>[PUBLIC]<android.app.Notification.Action.WearableExtender: WearableExtender setInProgressLabel(CharSequence)>    ---->    
<android.view.ViewGroup: boolean isAlwaysDrawnWithCacheEnabled()>
/**
 * Indicates whether this ViewGroup will always try to draw its children using their
 * drawing cache. By default this property is enabled.
 *
 * @return true if the animation cache is enabled, false otherwise
 *
 * @see #setAlwaysDrawnWithCacheEnabled(boolean)
 * @see #setChildrenDrawnWithCacheEnabled(boolean)
 * @see View#setDrawingCacheEnabled(boolean)
 *
 * @deprecated As of {@link android.os.Build.VERSION_CODES#M}, this property is ignored.
 * Child views may no longer have their caching behavior disabled by parents.
 */
====>[PUBLIC]<android.view.ViewGroup: boolean isAlwaysDrawnWithCacheEnabled()>    ---->    
<android.view.inputmethod.InputMethodSubtype: void <init>(int,int,String,String,String,boolean,boolean,int)>
/**
 * Constructor.
 * @deprecated use {@link InputMethodSubtypeBuilder} instead.
 * "isAsciiCapable" is "false" in this constructor.
 * @param nameId Resource ID of the subtype name string. The string resource may have exactly
 * one %s in it. If there is, the %s part will be replaced with the locale's display name by
 * the formatter. Please refer to {@link #getDisplayName} for details.
 * @param iconId Resource ID of the subtype icon drawable.
 * @param locale The locale supported by the subtype
 * @param mode The mode supported by the subtype
 * @param extraValue The extra value of the subtype. This string is free-form, but the API
 * supplies tools to deal with a key-value comma-separated list; see
 * {@link #containsExtraValueKey} and {@link #getExtraValueOf}.
 * @param isAuxiliary true when this subtype is auxiliary, false otherwise. An auxiliary
 * subtype will not be shown in the list of enabled IMEs for choosing the current IME in
 * the Settings even when this subtype is enabled. Please note that this subtype will still
 * be shown in the list of IMEs in the IME switcher to allow the user to tentatively switch
 * to this subtype while an IME is shown. The framework will never switch the current IME to
 * this subtype by {@link android.view.inputmethod.InputMethodManager#switchToLastInputMethod}.
 * The intent of having this flag is to allow for IMEs that are invoked in a one-shot way as
 * auxiliary input mode, and return to the previous IME once it is finished (e.g. voice input).
 * @param overridesImplicitlyEnabledSubtype true when this subtype should be enabled by default
 * if no other subtypes in the IME are enabled explicitly. Note that a subtype with this
 * parameter being true will not be shown in the list of subtypes in each IME's subtype enabler.
 * Having an "automatic" subtype is an example use of this flag.
 * @param id The unique ID for the subtype. The input method framework keeps track of enabled
 * subtypes by ID. When the IME package gets upgraded, enabled IDs will stay enabled even if
 * other attributes are different. If the ID is unspecified or 0,
 * Arrays.hashCode(new Object[] {locale, mode, extraValue,
 * isAuxiliary, overridesImplicitlyEnabledSubtype, isAsciiCapable}) will be used instead.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodSubtype: void <init>(int,int,String,String,String,boolean,boolean,int)>    ---->    InputMethodSubtypeBuilder
<android.app.FragmentManagerImpl: void dispatchMultiWindowModeChanged(boolean)>
/**
 * @deprecated use {@link #dispatchMultiWindowModeChanged(boolean, Configuration)}
 */
====>[PUBLIC]<android.app.FragmentManagerImpl: void dispatchMultiWindowModeChanged(boolean)>    ---->    #dispatchMultiWindowModeChanged(boolean, Configuration)
<android.media.MediaPlayer: void setAudioStreamType(int)>
/**
 * Sets the audio stream type for this MediaPlayer. See {@link AudioManager}
 * for a list of stream types. Must call this method before prepare() or
 * prepareAsync() in order for the target stream type to become effective
 * thereafter.
 *
 * @param streamtype the audio stream type
 * @deprecated use {@link #setAudioAttributes(AudioAttributes)}
 * @see android.media.AudioManager
 */
====>[PUBLIC]<android.media.MediaPlayer: void setAudioStreamType(int)>    ---->    android.media.AudioManager
<android.app.Notification.Builder: Builder setSound(Uri,AudioAttributes)>
/**
 * Set the sound to play, along with specific {@link AudioAttributes audio attributes} to
 * use during playback.
 *
 * @deprecated use {@link NotificationChannel#setSound(Uri, AudioAttributes)} instead.
 * @see Notification#sound
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder setSound(Uri,AudioAttributes)>    ---->    NotificationChannel#setSound(Uri, AudioAttributes)
<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder addVertex(float,float,float)>
/**
 * @deprecated in API 16
 * Adds a float3 vertex to the mesh
 *
 * @param x position x
 * @param y position y
 * @param z position z
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder addVertex(float,float,float)>    ---->    
<android.content.Context: int getWallpaperDesiredMinimumWidth()>
/**
 * @deprecated Use {@link android.app.WallpaperManager#getDesiredMinimumWidth()
 * WallpaperManager.getDesiredMinimumWidth()} instead.
 */
====>[PUBLIC]<android.content.Context: int getWallpaperDesiredMinimumWidth()>    ---->    android.app.WallpaperManager#getDesiredMinimumWidth()  WallpaperManager.getDesiredMinimumWidth()
<android.telephony.SignalStrength: int getWcdmaDbm()>
/**
 * Gets WCDMA signal strength as a dBm value between -120 and -24, as defined in TS 27.007 8.69.
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthWcdma#getDbm}.
 *
 * @see android.telephony#CellSignalStrengthWcdma
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getWcdmaDbm()>    ---->    android.telephony#CellSignalStrengthWcdma
<android.renderscript.ProgramRaster: ProgramRaster CULL_NONE(RenderScript)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.ProgramRaster: ProgramRaster CULL_NONE(RenderScript)>    ---->    
<android.content.ContentResolver: SyncInfo getCurrentSync()>
/**
 * If a sync is active returns the information about it, otherwise returns null.
 * <p>
 * This method requires the caller to hold the permission
 * {@link android.Manifest.permission#READ_SYNC_STATS}.
 * <p>
 * @return the SyncInfo for the currently active sync or null if one is not active.
 * @deprecated
 * Since multiple concurrent syncs are now supported you should use
 * {@link #getCurrentSyncs()} to get the accurate list of current syncs.
 * This method returns the first item from the list of current syncs
 * or null if there are none.
 */
====>[PUBLIC]<android.content.ContentResolver: SyncInfo getCurrentSync()>    ---->    #getCurrentSyncs()
<android.service.notification.ConditionProviderService: void notifyCondition(Condition)>
/**
 * Informs the notification manager that the state of a Condition has changed. Use this method
 * to put the system into Do Not Disturb mode or request that it exits Do Not Disturb mode. This
 * call will be ignored unless there is an enabled {@link android.app.AutomaticZenRule} owned by
 * service that has an {@link android.app.AutomaticZenRule#getConditionId()} equal to this
 * {@link Condition#id}.
 * @param condition the condition that has changed.
 *
 * @deprecated see
 * {@link android.app.NotificationManager#setAutomaticZenRuleState(String, Condition)}.
 */
====>[PUBLIC]<android.service.notification.ConditionProviderService: void notifyCondition(Condition)>    ---->    android.app.NotificationManager#setAutomaticZenRuleState(String, Condition)
<android.telephony.NeighboringCellInfo: void <init>(int,int)>
/**
 * Initialize the object from rssi and cid.
 *
 * NeighboringCellInfo is one time shot for the neighboring cells based on
 * the radio network type at that moment. Its constructor needs radio network
 * type.
 *
 * @deprecated by {@link #NeighboringCellInfo(int, String, int)}
 */
====>[PUBLIC]<android.telephony.NeighboringCellInfo: void <init>(int,int)>    ---->    #NeighboringCellInfo(int, String, int)
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: byte[] startRecoverySession(String,byte[],byte[],byte[],List<KeyChainProtectionParams>)>
/**
 * Initializes recovery session given the X509-encoded public key of the recovery service.
 *
 * @param sessionId A unique ID to identify the recovery session.
 * @param verifierPublicKey X509-encoded public key.
 * @param vaultParams Additional params associated with vault.
 * @param vaultChallenge Challenge issued by vault service.
 * @param secrets Lock-screen hashes. For now only a single secret is supported.
 * @return Encrypted bytes of recovery claim. This can then be issued to the vault service.
 * @deprecated Use {@link #startRecoverySessionWithCertPath(String, String, RecoveryCertPath,
 * byte[], byte[], List)} instead.
 *
 * @hide
 */
====>[HIDDEN]<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: byte[] startRecoverySession(String,byte[],byte[],byte[],List<KeyChainProtectionParams>)>    ---->    #startRecoverySessionWithCertPath(String, String, RecoveryCertPath,  byte[], byte[], List)
<android.webkit.CacheManager: boolean endCacheTransaction()>
/**
 * Ends the innermost cache transaction and returns whether this was the
 * only running transaction.
 *
 * @return {@code true} if this was the only running transaction
 * @deprecated This method no longer has any effect and always returns {@code false}.
 */
====>[PUBLIC]<android.webkit.CacheManager: boolean endCacheTransaction()>    ---->    
<android.service.voice.VoiceInteractionSession: void onHandleAssistSecondary(Bundle,AssistStructure,AssistContent,int,int)>
/**
 * Called to receive data from other applications that the user was or is interacting with,
 * that are currently on the screen in a multi-window display environment, not including the
 * currently focused activity. This could be
 * a free-form window, a picture-in-picture window, or another window in a split-screen display.
 * <p>
 * This method is very similar to
 * {@link #onHandleAssist} except that it is called
 * for additional non-focused activities along with an index and count that indicates
 * which additional activity the data is for. {@code index} will be between 1 and
 * {@code count}-1 and this method is called once for each additional window, in no particular
 * order. The {@code count} indicates how many windows to expect assist data for, including the
 * top focused activity, which continues to be returned via {@link #onHandleAssist}.
 * <p>
 * To be responsive to assist requests, process assist data as soon as it is received,
 * without waiting for all queued activities to return assist data.
 *
 * @param data Arbitrary data supplied by the app through
 * {@link android.app.Activity#onProvideAssistData Activity.onProvideAssistData}.
 * May be null if assist data has been disabled by the user or device policy.
 * @param structure If available, the structure definition of all windows currently
 * displayed by the app.  May be null if assist data has been disabled by the user
 * or device policy; will be an empty stub if the application has disabled assist
 * by marking its window as secure.
 * @param content Additional content data supplied by the app through
 * {@link android.app.Activity#onProvideAssistContent Activity.onProvideAssistContent}.
 * May be null if assist data has been disabled by the user or device policy; will
 * not be automatically filled in with data from the app if the app has marked its
 * window as secure.
 * @param index the index of the additional activity that this data
 * is for.
 * @param count the total number of additional activities for which the assist data is being
 * returned, including the focused activity that is returned via
 * {@link #onHandleAssist}.
 *
 * @deprecated use {@link #onHandleAssist(AssistState)}
 */
====>[PUBLIC]<android.service.voice.VoiceInteractionSession: void onHandleAssistSecondary(Bundle,AssistStructure,AssistContent,int,int)>    ---->    #onHandleAssist(AssistState)
<com.android.uiautomator.core.QueryController: String getCurrentActivityName()>
/**
 * Last activity to report accessibility events.
 * @deprecated The results returned should be considered unreliable
 * @return String name of activity
 */
====>[PUBLIC]<com.android.uiautomator.core.QueryController: String getCurrentActivityName()>    ---->    
Inconsistency (Non-Documentation):<javax.microedition.khronos.egl.EGL10: EGLSurface eglCreatePixmapSurface(EGLDisplay,EGLConfig,Object,int[])> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//opengl/java/javax/microedition/khronos/egl/EGL10.java
<javax.microedition.khronos.egl.EGL10: EGLSurface eglCreatePixmapSurface(EGLDisplay,EGLConfig,Object,int[])>

====>[PUBLIC]<javax.microedition.khronos.egl.EGL10: EGLSurface eglCreatePixmapSurface(EGLDisplay,EGLConfig,Object,int[])>    ---->    
<android.view.ViewDebug: void startRecyclerTracing(String,View)>
/**
 * @deprecated This method is now unused and invoking it is a no-op
 */
====>[PUBLIC]<android.view.ViewDebug: void startRecyclerTracing(String,View)>    ---->    
<android.renderscript.ProgramVertex: int getInputCount()>
/**
 * @deprecated in API 16
 * @return number of input attribute elements
 */
====>[PUBLIC]<android.renderscript.ProgramVertex: int getInputCount()>    ---->    
<android.text.method.DigitsKeyListener: void <init>()>
/**
 * Allocates a DigitsKeyListener that accepts the ASCII digits 0 through 9.
 *
 * @deprecated Use {@link #DigitsKeyListener(Locale)} instead.
 */
====>[PUBLIC]<android.text.method.DigitsKeyListener: void <init>()>    ---->    #DigitsKeyListener(Locale)
<android.telephony.TelephonyManager: boolean isTtyModeSupported()>
/**
 * @deprecated Use {@link TelecomManager#isTtySupported()} instead
 * Whether the phone supports TTY mode.
 *
 * @return {@code true} if the device supports TTY mode, and {@code false} otherwise.
 */
====>[PUBLIC]<android.telephony.TelephonyManager: boolean isTtyModeSupported()>    ---->    TelecomManager#isTtySupported()
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(Rect)>
/**
 * Sets the node bounds in the viewParent's coordinates.
 * {@link #getParent()} does not represent the source's viewParent.
 * Instead it represents the result of {@link View#getParentForAccessibility()},
 * which returns the closest ancestor where {@link View#isImportantForAccessibility()} is true.
 * So this method is not reliable.
 *
 * <p>
 * <strong>Note:</strong> Cannot be called from an
 * {@link android.accessibilityservice.AccessibilityService}.
 * This class is made immutable before being delivered to an AccessibilityService.
 * </p>
 *
 * @param bounds The node bounds.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 * @deprecated Accessibility services should not care about these bounds.
 */
====>[PUBLIC]<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(Rect)>    ---->    
<android.webkit.WebView: int findAll(String)>
/**
 * Finds all instances of find on the page and highlights them.
 * Notifies any registered {@link FindListener}.
 *
 * @param find the string to find
 * @return the number of occurrences of the String "find" that were found
 * @deprecated {@link #findAllAsync} is preferred.
 * @see #setFindListener
 */
====>[PUBLIC]<android.webkit.WebView: int findAll(String)>    ---->    #setFindListener
<android.media.tv.TvInputInfo: Intent createSettingsIntent()>
/**
 * Returns an intent to start the settings activity for this TV input.
 *
 * @deprecated Use {@link #createSetupIntent()} instead. Settings activity is deprecated.
 * Use setup activity instead to provide settings.
 */
====>[PUBLIC]<android.media.tv.TvInputInfo: Intent createSettingsIntent()>    ---->    #createSetupIntent()
<android.app.Notification.Builder: Builder setPriority(int)>
/**
 * Set the priority of this notification.
 *
 * @see Notification#priority
 * @deprecated use {@link NotificationChannel#setImportance(int)} instead.
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder setPriority(int)>    ---->    NotificationChannel#setImportance(int)
<android.app.UiAutomation: boolean revokeRuntimePermission(String,String,UserHandle)>
/**
 * @deprecated replaced by
 * {@link #revokeRuntimePermissionAsUser(String, String, UserHandle)}.
 * @hide
 */
====>[HIDDEN]<android.app.UiAutomation: boolean revokeRuntimePermission(String,String,UserHandle)>    ---->    #revokeRuntimePermissionAsUser(String, String, UserHandle)
<android.os.StatFs: int getAvailableBlocks()>
/**
 * @deprecated Use {@link #getAvailableBlocksLong()} instead.
 */
====>[PUBLIC]<android.os.StatFs: int getAvailableBlocks()>    ---->    #getAvailableBlocksLong()
<android.database.sqlite.SQLiteProgram: int getUniqueId()>
/**
 * Unimplemented.
 * @deprecated This method is deprecated and must not be used.
 */
====>[PUBLIC]<android.database.sqlite.SQLiteProgram: int getUniqueId()>    ---->    
<android.os.UserManager: void setUserRestriction(String,boolean,UserHandle)>
/**
 * @hide
 * Sets the value of a specific restriction on a specific user.
 * Requires the MANAGE_USERS permission.
 * @param key the key of the restriction
 * @param value the value for the restriction
 * @param userHandle the user whose restriction is to be changed.
 * @deprecated use {@link android.app.admin.DevicePolicyManager#addUserRestriction(
 * android.content.ComponentName, String)} or
 * {@link android.app.admin.DevicePolicyManager#clearUserRestriction(
 * android.content.ComponentName, String)} instead.
 */
====>[HIDDEN]<android.os.UserManager: void setUserRestriction(String,boolean,UserHandle)>    ---->    android.app.admin.DevicePolicyManager#addUserRestriction(  android.content.ComponentName, String)
<android.provider.Contacts.Settings: String getSetting(ContentResolver,String,String)>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.Settings: String getSetting(ContentResolver,String,String)>    ---->    android.provider.ContactsContract
<android.renderscript.ProgramFragmentFixedFunction.Builder: void <init>(RenderScript)>
/**
 * @deprecated
 * Creates a builder for fixed function fragment program
 *
 * @param rs Context to which the program will belong.
 */
====>[PUBLIC]<android.renderscript.ProgramFragmentFixedFunction.Builder: void <init>(RenderScript)>    ---->    
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onStartedWakingUp()>
/**
 * Called when the device has started waking up.
 *
 * @deprecated use {@link com.android.systemui.keyguard.WakefulnessLifecycle}.
 */
====>[PUBLIC]<com.android.keyguard.KeyguardUpdateMonitorCallback: void onStartedWakingUp()>    ---->    com.android.systemui.keyguard.WakefulnessLifecycle
<android.graphics.Canvas: void insertReorderBarrier()>
/**
 * @deprecated use {@link #enableZ()} instead
 * @hide
 */
====>[HIDDEN]<android.graphics.Canvas: void insertReorderBarrier()>    ---->    #enableZ()
<android.provider.Contacts.People: void <init>()>
/**
 * no public constructor since this is a utility class
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.People: void <init>()>    ---->    android.provider.ContactsContract
<android.renderscript.ProgramFragmentFixedFunction.InternalBuilder: ProgramFragmentFixedFunction create()>
/**
 * @deprecated in API 16
 * Creates ProgramFragmentFixedFunction from the current state
 * of the builder
 *
 * @return  ProgramFragmentFixedFunction
 */
====>[PUBLIC]<android.renderscript.ProgramFragmentFixedFunction.InternalBuilder: ProgramFragmentFixedFunction create()>    ---->    
<android.renderscript.Font: Font createFromResource(RenderScript,Resources,int,float)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.Font: Font createFromResource(RenderScript,Resources,int,float)>    ---->    
<android.renderscript.Mesh: Primitive getPrimitive(int)>
/**
 * @deprecated in API 16
 * @param slot locaiton within the list of index set primitives
 * @return index set primitive type
 */
====>[PUBLIC]<android.renderscript.Mesh: Primitive getPrimitive(int)>    ---->    
<android.view.inputmethod.InputMethodManager: InputMethodManager peekInstance()>
/**
 * Deprecated. Do not use.
 *
 * @return {@link #sInstance}
 * @deprecated Use {@link Context#getSystemService(Class)} instead. This method cannot fully
 * support multi-display scenario.
 * @hide
 */
====>[HIDDEN]<android.view.inputmethod.InputMethodManager: InputMethodManager peekInstance()>    ---->    Context#getSystemService(Class)
<android.graphics.EmbossMaskFilter: void <init>(float[],float,float,float)>
/**
 * Create an emboss maskfilter
 *
 * @deprecated This subclass is not supported and should not be instantiated.
 *
 * @param direction  array of 3 scalars [x, y, z] specifying the direction of the light source
 * @param ambient    0...1 amount of ambient light
 * @param specular   coefficient for specular highlights (e.g. 8)
 * @param blurRadius amount to blur before applying lighting (e.g. 3)
 * @return           the emboss maskfilter
 */
====>[PUBLIC]<android.graphics.EmbossMaskFilter: void <init>(float[],float,float,float)>    ---->    
<android.content.pm.ShortcutInfo.Builder: Builder setTextResId(int)>
/**
 * @hide -- old signature, the internal code still uses it.
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo.Builder: Builder setTextResId(int)>    ---->    
<android.provider.Contacts.Settings: void setSetting(ContentResolver,String,String,String)>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.Settings: void setSetting(ContentResolver,String,String,String)>    ---->    android.provider.ContactsContract
Inconsistency (Non-Documentation):<android.accounts.AccountManager: Intent newChooseAccountIntent(Account,ArrayList<Account>,String[],boolean,String,String,String[],Bundle)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/accounts/AccountManager.java
<android.accounts.AccountManager: Intent newChooseAccountIntent(Account,ArrayList<Account>,String[],boolean,String,String,String[],Bundle)>
/**
 * Deprecated in favor of {@link #newChooseAccountIntent(Account, List, String[], String,
 * String, String[], Bundle)}.
 *
 * Returns an intent to an {@link Activity} that prompts the user to choose from a list of
 * accounts.
 * The caller will then typically start the activity by calling
 * <code>startActivityForResult(intent, ...);</code>.
 * <p>
 * On success the activity returns a Bundle with the account name and type specified using
 * keys {@link #KEY_ACCOUNT_NAME} and {@link #KEY_ACCOUNT_TYPE}.
 * Chosen account is marked as {@link #VISIBILITY_USER_MANAGED_VISIBLE} to the caller
 * (see {@link #setAccountVisibility}) and will be returned to it in consequent
 * {@link #getAccountsByType}) calls.
 * <p>
 * The most common case is to call this with one account type, e.g.:
 * <p>
 * <pre>  newChooseAccountIntent(null, null, new String[]{"com.google"}, false, null,
 * null, null, null);</pre>
 * @param selectedAccount if specified, indicates that the {@link Account} is the currently
 * selected one, according to the caller's definition of selected.
 * @param allowableAccounts an optional {@link List} of accounts that are allowed to be
 * shown. If not specified then this field will not limit the displayed accounts.
 * @param allowableAccountTypes an optional string array of account types. These are used
 * both to filter the shown accounts and to filter the list of account types that are shown
 * when adding an account. If not specified then this field will not limit the displayed
 * account types when adding an account.
 * @param alwaysPromptForAccount boolean that is ignored.
 * @param descriptionOverrideText if non-null this string is used as the description in the
 * accounts chooser screen rather than the default
 * @param addAccountAuthTokenType this string is passed as the {@link #addAccount}
 * authTokenType parameter
 * @param addAccountRequiredFeatures this string array is passed as the {@link #addAccount}
 * requiredFeatures parameter
 * @param addAccountOptions This {@link Bundle} is passed as the {@link #addAccount} options
 * parameter
 * @return an {@link Intent} that can be used to launch the ChooseAccount activity flow.
 */
====>[PUBLIC]<android.accounts.AccountManager: Intent newChooseAccountIntent(Account,ArrayList<Account>,String[],boolean,String,String,String[],Bundle)>    ---->    
<android.telephony.PhoneNumberUtils: boolean isEmergencyNumber(int,String,String)>
/**
 * Checks if a given number is an emergency number for a specific country.
 *
 * @param subId the subscription id of the SIM.
 * @param number the number to look up.
 * @param defaultCountryIso the specific country which the number should be checked against
 * @return if the number is an emergency number for the specific country, then return true,
 * otherwise false
 *
 * @deprecated Please use {@link TelephonyManager#isEmergencyNumber(String)}
 * instead.
 *
 * @hide
 */
====>[HIDDEN]<android.telephony.PhoneNumberUtils: boolean isEmergencyNumber(int,String,String)>    ---->    TelephonyManager#isEmergencyNumber(String)
<android.location.LocationManager: void removeGpsStatusListener(Listener)>
/**
 * Removes a GPS status listener.
 *
 * @param listener GPS status listener object to remove
 * @deprecated use {@link #unregisterGnssStatusCallback(GnssStatus.Callback)} instead.
 */
====>[PUBLIC]<android.location.LocationManager: void removeGpsStatusListener(Listener)>    ---->    #unregisterGnssStatusCallback(GnssStatus.Callback)
<android.telephony.SignalStrength: int getCdmaAsuLevel()>
/**
 * Get the cdma signal level as an asu value between 0..31, 99 is unknown
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthCdma#getAsuLevel}. Since there is no definition of
 * ASU for CDMA, the resultant value is Android-specific and is not recommended
 * for use.
 *
 * @see android.telephony#CellSignalStrengthCdma
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getCdmaAsuLevel()>    ---->    android.telephony#CellSignalStrengthCdma
Inconsistency (Non-Documentation):<com.android.server.pm.PackageInstallerService: String allocateExternalStageCidLegacy()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//services/core/java/com/android/server/pm/PackageInstallerService.java
<com.android.server.pm.PackageInstallerService: String allocateExternalStageCidLegacy()>

====>[PUBLIC]<com.android.server.pm.PackageInstallerService: String allocateExternalStageCidLegacy()>    ---->    
<android.provider.Contacts.People: void setPhotoData(ContentResolver,Uri,byte[])>
/**
 * Set the photo for this person. data may be null
 * @param cr the ContentResolver to use
 * @param person the Uri of the person whose photo is to be updated
 * @param data the byte[] that represents the photo
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.People: void setPhotoData(ContentResolver,Uri,byte[])>    ---->    android.provider.ContactsContract
<android.app.slice.SliceManager: void pinSlice(Uri,List<SliceSpec>)>
/**
 * @deprecated TO BE REMOVED
 * @removed
 */
====>[HIDDEN]<android.app.slice.SliceManager: void pinSlice(Uri,List<SliceSpec>)>    ---->    
<android.app.ActionBar: int getSelectedNavigationIndex()>
/**
 * Get the position of the selected navigation item in list or tabbed navigation modes.
 *
 * @return Position of the selected item.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: int getSelectedNavigationIndex()>    ---->    
<android.test.TouchUtils: void dragViewToBottom(ActivityInstrumentationTestCase,View,int)>
/**
 * Simulate touching the center of a view and dragging to the bottom of the screen.
 *
 * @param test The test case that is being run
 * @param v The view that should be dragged
 * @param stepCount How many move steps to include in the drag
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: void dragViewToBottom(ActivityInstrumentationTestCase,View,int)>    ---->    android.test.ActivityInstrumentationTestCase2
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)>
/**
 * Allow a previously configured network to be associated with. If
 * <code>attemptConnect</code> is true, an attempt to connect to the selected
 * network is initiated. This may result in the asynchronous delivery
 * of state change events.
 * <p>
 * <b>Note:</b> Network communication may not use Wi-Fi even if Wi-Fi is connected;
 * traffic may instead be sent through another network, such as cellular data,
 * Bluetooth tethering, or Ethernet. For example, traffic will never use a
 * Wi-Fi network that does not provide Internet access (e.g. a wireless
 * printer), if another network that does offer Internet access (e.g.
 * cellular data) is available. Applications that need to ensure that their
 * network traffic uses Wi-Fi should use APIs such as
 * {@link Network#bindSocket(java.net.Socket)},
 * {@link Network#openConnection(java.net.URL)}, or
 * {@link ConnectivityManager#bindProcessToNetwork} to do so.
 *
 * Applications are not allowed to enable networks created by other
 * applications.
 *
 * @param netId the ID of the network as returned by {@link #addNetwork} or {@link
 * #getConfiguredNetworks}.
 * @param attemptConnect The way to select a particular network to connect to is specify
 * {@code true} for this parameter.
 * @return {@code true} if the operation succeeded
 *
 * @deprecated
 * a) See {@link WifiNetworkSpecifier.Builder#build()} for new
 * mechanism to trigger connection to a Wi-Fi network.
 * b) See {@link #addNetworkSuggestions(List)},
 * {@link #removeNetworkSuggestions(List)} for new API to add Wi-Fi networks for consideration
 * when auto-connecting to wifi.
 * <b>Compatibility Note:</b> For applications targeting
 * {@link android.os.Build.VERSION_CODES#Q} or above, this API will always return false.
 */
====>[PUBLIC]<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)>    ---->    WifiNetworkSpecifier.Builder#build()
<android.view.View: int getDrawingCacheQuality()>
/**
 * Returns the quality of the drawing cache.
 *
 * @return One of {@link #DRAWING_CACHE_QUALITY_AUTO},
 * {@link #DRAWING_CACHE_QUALITY_LOW}, or {@link #DRAWING_CACHE_QUALITY_HIGH}
 *
 * @see #setDrawingCacheQuality(int)
 * @see #setDrawingCacheEnabled(boolean)
 * @see #isDrawingCacheEnabled()
 *
 * @attr ref android.R.styleable#View_drawingCacheQuality
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: int getDrawingCacheQuality()>    ---->    #setLayerType(int, Paint)
<com.android.systemui.plugins.Plugin: int getVersion()>
/**
 * @deprecated
 * @see Requires
 */
====>[PUBLIC]<com.android.systemui.plugins.Plugin: int getVersion()>    ---->    Requires
<android.net.TrafficStats: long getUidTcpRxBytes(int)>
/**
 * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},
 * transport layer statistics are no longer available, and will
 * always return {@link #UNSUPPORTED}.
 * @see #getUidRxBytes(int)
 */
====>[PUBLIC]<android.net.TrafficStats: long getUidTcpRxBytes(int)>    ---->    #getUidRxBytes(int)
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: int getContentIconGravity()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.WearableExtender: int getContentIconGravity()>
/**
 * Get the gravity that the content icon should have within the notification display.
 * Supported values include {@link android.view.Gravity#START} and
 * {@link android.view.Gravity#END}. The default value is {@link android.view.Gravity#END}.
 * @see #getContentIcon
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: int getContentIconGravity()>    ---->    
<android.provider.MediaStore.Images.Media: Cursor query(ContentResolver,Uri,String[],String,String[],String)>
/**
 * @deprecated all queries should be performed through
 * {@link ContentResolver} directly, which offers modern
 * features like {@link CancellationSignal}.
 */
====>[PUBLIC]<android.provider.MediaStore.Images.Media: Cursor query(ContentResolver,Uri,String[],String,String[],String)>    ---->    ContentResolver
Inconsistency (Non-Documentation):<android.webkit.WebSettings: boolean getSaveFormData()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/webkit/WebSettings.java
<android.webkit.WebSettings: boolean getSaveFormData()>
/**
 * Gets whether the WebView saves form data.
 *
 * @return whether the WebView saves form data
 * @see #setSaveFormData
 */
====>[PUBLIC]<android.webkit.WebSettings: boolean getSaveFormData()>    ---->    
<android.app.ActionBar: void addTab(Tab,int,boolean)>
/**
 * Add a tab for use in tabbed navigation mode. The tab will be insterted at
 * <code>position</code>.
 *
 * @param tab The tab to add
 * @param position The new position of the tab
 * @param setSelected True if the added tab should become the selected tab.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: void addTab(Tab,int,boolean)>    ---->    
<android.webkit.WebChromeClient: void onShowCustomView(View,int,CustomViewCallback)>
/**
 * Notify the host application that the current page would
 * like to show a custom View in a particular orientation.
 * @param view is the View object to be shown.
 * @param requestedOrientation An orientation constant as used in
 * {@link ActivityInfo#screenOrientation ActivityInfo.screenOrientation}.
 * @param callback is the callback to be invoked if and when the view
 * is dismissed.
 * @deprecated This method supports the obsolete plugin mechanism,
 * and will not be invoked in future
 */
====>[PUBLIC]<android.webkit.WebChromeClient: void onShowCustomView(View,int,CustomViewCallback)>    ---->    
<android.bluetooth.BluetoothGatt: void abortReliableWrite(BluetoothDevice)>
/**
 * @deprecated Use {@link #abortReliableWrite()}
 */
====>[PUBLIC]<android.bluetooth.BluetoothGatt: void abortReliableWrite(BluetoothDevice)>    ---->    #abortReliableWrite()
<android.telephony.ims.feature.MmTelFeature.MmTelCapabilities: void <init>(Capabilities)>
/**
 * @deprecated Use {@link MmTelCapabilities} to construct a new instance instead.
 */
====>[PUBLIC]<android.telephony.ims.feature.MmTelFeature.MmTelCapabilities: void <init>(Capabilities)>    ---->    MmTelCapabilities
<android.media.MediaFile: void addFileType(String,int,String)>
/**
 * @deprecated file types no longer exist
 */
====>[PUBLIC]<android.media.MediaFile: void addFileType(String,int,String)>    ---->    
<android.preference.PreferenceActivity: PreferenceScreen getPreferenceScreen()>
/**
 * Gets the root of the preference hierarchy that this activity is showing.
 *
 * @return The {@link PreferenceScreen} that is the root of the preference
 * hierarchy.
 *
 * @deprecated This function is not relevant for a modern fragment-based
 * PreferenceActivity.
 */
====>[PUBLIC]<android.preference.PreferenceActivity: PreferenceScreen getPreferenceScreen()>    ---->    
<android.content.pm.ShortcutInfo: CharSequence getText()>
/**
 * @hide -- old signature, the internal code still uses it.
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo: CharSequence getText()>    ---->    
<android.graphics.Canvas: void insertInorderBarrier()>
/**
 * @deprecated use {@link #disableZ()} instead
 * @hide
 */
====>[HIDDEN]<android.graphics.Canvas: void insertInorderBarrier()>    ---->    #disableZ()
<android.os.storage.StorageManager: boolean isUsbMassStorageEnabled()>
/**
 * Query if a USB Mass Storage (UMS) is enabled on the device.
 * @return true if UMS host is enabled.
 *
 * @hide
 */
====>[HIDDEN]<android.os.storage.StorageManager: boolean isUsbMassStorageEnabled()>    ---->    
Inconsistency (Non-Documentation):<android.os.Environment.UserEnvironment: File getExternalStoragePublicDirectory(String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/os/Environment.java
<android.os.Environment.UserEnvironment: File getExternalStoragePublicDirectory(String)>

====>[PUBLIC]<android.os.Environment.UserEnvironment: File getExternalStoragePublicDirectory(String)>    ---->    
<com.android.ims.ImsConfig: int getProvisionedValue(int)>
/**
 * @deprecated see {@link #getConfigInt(int)} instead.
 */
====>[PUBLIC]<com.android.ims.ImsConfig: int getProvisionedValue(int)>    ---->    #getConfigInt(int)
<android.text.StaticLayout: void <init>(CharSequence,TextPaint,int,Alignment,float,float,boolean)>
/**
 * @deprecated Use {@link Builder} instead.
 */
====>[PUBLIC]<android.text.StaticLayout: void <init>(CharSequence,TextPaint,int,Alignment,float,float,boolean)>    ---->    Builder
<android.widget.espresso.FloatingToolbarEspressoUtils: void assertFloatingToolbarIsNotDisplayed()>
/**
 * Asserts that the floating toolbar is not displayed on screen.
 *
 * @throws AssertionError if the assertion fails
 * @deprecated Negative assertions are taking too long to timeout in Espresso.
 */
====>[PUBLIC]<android.widget.espresso.FloatingToolbarEspressoUtils: void assertFloatingToolbarIsNotDisplayed()>    ---->    
<android.graphics.Canvas: boolean clipRect(float,float,float,float,Op)>
/**
 * Modify the current clip with the specified rectangle, which is
 * expressed in local coordinates.
 *
 * @param left   The left side of the rectangle to intersect with the
 * current clip
 * @param top    The top of the rectangle to intersect with the current
 * clip
 * @param right  The right side of the rectangle to intersect with the
 * current clip
 * @param bottom The bottom of the rectangle to intersect with the current
 * clip
 * @param op     How the clip is modified
 * @return       true if the resulting clip is non-empty
 *
 * @deprecated Region.Op values other than {@link Region.Op#INTERSECT} and
 * {@link Region.Op#DIFFERENCE} have the ability to expand the clip. The canvas clipping APIs
 * are intended to only expand the clip as a result of a restore operation. This enables a view
 * parent to clip a canvas to clearly define the maximal drawing area of its children. The
 * recommended alternative calls are {@link #clipRect(float,float,float,float)} and
 * {@link #clipOutRect(float,float,float,float)};
 *
 * As of API Level API level {@value Build.VERSION_CODES#P} only {@link Region.Op#INTERSECT} and
 * {@link Region.Op#DIFFERENCE} are valid Region.Op parameters.
 */
====>[PUBLIC]<android.graphics.Canvas: boolean clipRect(float,float,float,float,Op)>    ---->    Region.Op#INTERSECT
<android.net.wifi.WifiManager.WpsCallback: void onSucceeded()>
/**
 * WPS operation completed successfully
 * @deprecated This API is deprecated
 */
====>[PUBLIC]<android.net.wifi.WifiManager.WpsCallback: void onSucceeded()>    ---->    
<android.webkit.URLUtil: boolean isCookielessProxyUrl(String)>
/**
 * @return {@code true} if the url is a proxy url to allow cookieless network
 * requests from a file url.
 * @deprecated Cookieless proxy is no longer supported.
 */
====>[PUBLIC]<android.webkit.URLUtil: boolean isCookielessProxyUrl(String)>    ---->    
<android.service.carrier.CarrierMessagingService: void onSendTextSms(String,int,String,ResultCallback<SendSmsResult>)>
/**
 * Override this method to intercept text SMSs sent from the device.
 * @deprecated Override {@link #onSendTextSms} below instead.
 *
 * @param text the text to send
 * @param subId SMS subscription ID of the SIM
 * @param destAddress phone number of the recipient of the message
 * @param callback result callback. Call with a {@link SendSmsResult}.
 */
====>[PUBLIC]<android.service.carrier.CarrierMessagingService: void onSendTextSms(String,int,String,ResultCallback<SendSmsResult>)>    ---->    #onSendTextSms
<android.content.res.Resources: int getColor(int)>
/**
 * Returns a color integer associated with a particular resource ID. If the
 * resource holds a complex {@link ColorStateList}, then the default color
 * from the set is returned.
 *
 * @param id The desired resource identifier, as generated by the aapt
 * tool. This integer encodes the package, type, and resource
 * entry. The value 0 is an invalid identifier.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does
 * not exist.
 *
 * @return A single color value in the form 0xAARRGGBB.
 * @deprecated Use {@link #getColor(int, Theme)} instead.
 */
====>[PUBLIC]<android.content.res.Resources: int getColor(int)>    ---->    #getColor(int, Theme)
<android.app.PictureInPictureArgs: void setActions(List<RemoteAction>)>
/**
 * @hide
 */
====>[HIDDEN]<android.app.PictureInPictureArgs: void setActions(List<RemoteAction>)>    ---->    
<android.app.backup.RestoreSession: int restoreSome(long,RestoreObserver,String[])>
/**
 * Restore select packages from the given set onto the device, replacing the
 * current data of any app contained in the set with the data previously
 * backed up.
 *
 * <p>Callers must hold the android.permission.BACKUP permission to use this method.
 *
 * @return Zero on success, nonzero on error. The observer will only receive
 * progress callbacks if this method returned zero.
 * @param token The token from {@link getAvailableRestoreSets()} corresponding to
 * the restore set that should be used.
 * @param observer If non-null, this binder points to an object that will receive
 * progress callbacks during the restore operation.
 * @param packages The set of packages for which to attempt a restore.  Regardless of
 * the contents of the actual back-end dataset named by {@code token}, only
 * applications mentioned in this list will have their data restored.
 *
 * @deprecated use {@link RestoreSession#restorePackages(long, RestoreObserver, Set)}
 * instead.
 * @removed
 */
====>[HIDDEN]<android.app.backup.RestoreSession: int restoreSome(long,RestoreObserver,String[])>    ---->    RestoreSession#restorePackages(long, RestoreObserver, Set)
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,String)>
/**
 * Tells the underlying networking system that the caller is finished
 * using the named feature. The interpretation of {@code feature}
 * is completely up to each networking implementation.
 *
 * <p>This method requires the caller to hold either the
 * {@link android.Manifest.permission#CHANGE_NETWORK_STATE} permission
 * or the ability to modify system settings as determined by
 * {@link android.provider.Settings.System#canWrite}.</p>
 *
 * @param networkType specifies which network the request pertains to
 * @param feature the name of the feature that is no longer needed
 * @return an integer value representing the outcome of the request.
 * The interpretation of this value is specific to each networking
 * implementation+feature combination, except that the value {@code -1}
 * always indicates failure.
 *
 * @deprecated Deprecated in favor of the cleaner
 * {@link #unregisterNetworkCallback(NetworkCallback)} API.
 * In {@link VERSION_CODES#M}, and above, this method is unsupported and will
 * throw {@code UnsupportedOperationException} if called.
 * @removed
 */
====>[HIDDEN]<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,String)>    ---->    #unregisterNetworkCallback(NetworkCallback)
<android.service.persistentdata.PersistentDataBlockManager: void setOemUnlockEnabled(boolean)>
/**
 * Writes a byte enabling or disabling the ability to "OEM unlock" the device.
 *
 * @deprecated use {@link OemLockManager#setOemUnlockAllowedByUser(boolean)} instead.
 */
====>[PUBLIC]<android.service.persistentdata.PersistentDataBlockManager: void setOemUnlockEnabled(boolean)>    ---->    OemLockManager#setOemUnlockAllowedByUser(boolean)
<android.os.SystemClock: Clock uptimeMillisClock()>
/**
 * @removed
 */
====>[HIDDEN]<android.os.SystemClock: Clock uptimeMillisClock()>    ---->    
<android.telecom.Connection.VideoProvider: void changeCallDataUsage(long)>
/**
 * @see #setCallDataUsage(long)
 *
 * @param dataUsage The updated data usage (in byes).
 * @deprecated - Use {@link #setCallDataUsage(long)} instead.
 * @hide
 */
====>[HIDDEN]<android.telecom.Connection.VideoProvider: void changeCallDataUsage(long)>    ---->    #setCallDataUsage(long)
<android.renderscript.RSTextureView: void <init>(Context,AttributeSet)>
/**
 * @deprecated in API 16
 * Standard View constructor. In order to render something, you
 * must call {@link android.opengl.GLSurfaceView#setRenderer} to
 * register a renderer.
 */
====>[PUBLIC]<android.renderscript.RSTextureView: void <init>(Context,AttributeSet)>    ---->    android.opengl.GLSurfaceView#setRenderer
<android.text.StaticLayout: void <init>(CharSequence,int,int,TextPaint,int,Alignment,TextDirectionHeuristic,float,float,boolean,TruncateAt,int,int)>
/**
 * @hide
 * @deprecated Use {@link Builder} instead.
 */
====>[HIDDEN]<android.text.StaticLayout: void <init>(CharSequence,int,int,TextPaint,int,Alignment,TextDirectionHeuristic,float,float,boolean,TruncateAt,int,int)>    ---->    Builder
<android.test.TouchUtils: int dragViewToY(ActivityInstrumentationTestCase,View,int,int)>
/**
 * Simulate touching a view and dragging it to a specified location. Only moves vertically.
 *
 * @param test The test case that is being run
 * @param v The view that should be dragged
 * @param gravity Which part of the view to use for the initial down event. A combination of
 * (TOP, CENTER_VERTICAL, BOTTOM) and (LEFT, CENTER_HORIZONTAL, RIGHT)
 * @param toY Final location of the view after dragging
 *
 * @return distance in pixels covered by the drag
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: int dragViewToY(ActivityInstrumentationTestCase,View,int,int)>    ---->    android.test.ActivityInstrumentationTestCase2
<android.nfc.NfcAdapter: NfcAdapter getDefaultAdapter()>
/**
 * Legacy NfcAdapter getter, always use {@link #getDefaultAdapter(Context)} instead.<p>
 * This method was deprecated at API level 10 (Gingerbread MR1) because a context is required
 * for many NFC API methods. Those methods will fail when called on an NfcAdapter
 * object created from this method.<p>
 * @deprecated use {@link #getDefaultAdapter(Context)}
 * @hide
 */
====>[HIDDEN]<android.nfc.NfcAdapter: NfcAdapter getDefaultAdapter()>    ---->    #getDefaultAdapter(Context)
<android.webkit.WebSettings: boolean getLightTouchEnabled()>
/**
 * Gets whether light touches are enabled.
 * @see #setLightTouchEnabled
 * @deprecated This setting is obsolete.
 */
====>[PUBLIC]<android.webkit.WebSettings: boolean getLightTouchEnabled()>    ---->    
<android.view.KeyEvent: String getCharacters()>
/**
 * For the special case of a {@link #ACTION_MULTIPLE} event with key
 * code of {@link #KEYCODE_UNKNOWN}, this is a raw string of characters
 * associated with the event.  In all other cases it is null.
 *
 * @return Returns a String of 1 or more characters associated with
 * the event.
 *
 * @deprecated no longer used by the input system.
 */
====>[PUBLIC]<android.view.KeyEvent: String getCharacters()>    ---->    
<android.os.Debug: int getGlobalExternalFreedCount()>
/**
 * This method exists for compatibility and always returns 0.
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: int getGlobalExternalFreedCount()>    ---->    
<android.util.proto.ProtoOutputStream: void writeRepeatedDouble(long,double)>
/**
 * Write a single repeated proto "double" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedDouble(long,double)>    ---->    #write
<android.telephony.SignalStrength: int getLteRssnr()>
/**
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthLte#getRssnr}.
 *
 * @see android.telephony#CellSignalStrengthLte
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getLteRssnr()>    ---->    android.telephony#CellSignalStrengthLte
<android.telecom.TelecomManager: boolean setDefaultDialer(String)>
/**
 * Used to set the default dialer package.
 *
 * @param packageName to set the default dialer to, or {@code null} if the system provided
 * dialer should be used instead.
 *
 * @result {@code true} if the default dialer was successfully changed, {@code false} if
 * the specified package does not correspond to an installed dialer, or is already
 * the default dialer.
 *
 * Requires permission: {@link android.Manifest.permission#MODIFY_PHONE_STATE}
 * Requires permission: {@link android.Manifest.permission#WRITE_SECURE_SETTINGS}
 *
 * @hide
 * @deprecated Use
 * {@link android.app.role.RoleManager#addRoleHolderAsUser(String, String, int, UserHandle,
 * Executor, java.util.function.Consumer)} instead.
 * @removed
 */
====>[HIDDEN]<android.telecom.TelecomManager: boolean setDefaultDialer(String)>    ---->    android.app.role.RoleManager#addRoleHolderAsUser(String, String, int, UserHandle,  Executor, java.util.function.Consumer)
<android.webkit.WebViewDatabase: boolean hasUsernamePassword()>
/**
 * Gets whether there are any saved username/password pairs for web forms.
 * Note that these are unrelated to HTTP authentication credentials.
 *
 * @return {@code true} if there are any saved username/password pairs
 * @see WebView#savePassword
 * @see #clearUsernamePassword
 * @deprecated Saving passwords in WebView will not be supported in future versions.
 */
====>[PUBLIC]<android.webkit.WebViewDatabase: boolean hasUsernamePassword()>    ---->    
<android.webkit.WebViewDatabase: void clearUsernamePassword()>
/**
 * Clears any saved username/password pairs for web forms.
 * Note that these are unrelated to HTTP authentication credentials.
 *
 * @see WebView#savePassword
 * @see #hasUsernamePassword
 * @deprecated Saving passwords in WebView will not be supported in future versions.
 */
====>[PUBLIC]<android.webkit.WebViewDatabase: void clearUsernamePassword()>    ---->    
<android.renderscript.ProgramFragmentFixedFunction.Builder: ProgramFragmentFixedFunction create()>
/**
 * @deprecated in API 16
 * Creates the fixed function fragment program from the current
 * state of the builder.
 */
====>[PUBLIC]<android.renderscript.ProgramFragmentFixedFunction.Builder: ProgramFragmentFixedFunction create()>    ---->    
<android.util.AtomicFile: void truncate()>
/**
 * @hide
 * @deprecated This is not safe.
 */
====>[HIDDEN]<android.util.AtomicFile: void truncate()>    ---->    
<android.widget.CalendarView: void setSelectedWeekBackgroundColor(int)>
/**
 * Sets the background color for the selected week.
 *
 * @param color The week background color.
 *
 * @attr ref android.R.styleable#CalendarView_selectedWeekBackgroundColor
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: void setSelectedWeekBackgroundColor(int)>    ---->    
<android.view.View: boolean willNotCacheDrawing()>
/**
 * Returns whether or not this View can cache its drawing or not.
 *
 * @return true if this view does not cache its drawing, false otherwise
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: boolean willNotCacheDrawing()>    ---->    #setLayerType(int, Paint)
<android.view.MotionEvent: MotionEvent obtain(long,long,int,int,int[],PointerCoords[],int,float,float,int,int,int,int)>
/**
 * Create a new MotionEvent, filling in all of the basic values that
 * define the motion.
 *
 * @param downTime The time (in ms) when the user originally pressed down to start
 * a stream of position events.  This must be obtained from {@link SystemClock#uptimeMillis()}.
 * @param eventTime The the time (in ms) when this specific event was generated.  This
 * must be obtained from {@link SystemClock#uptimeMillis()}.
 * @param action The kind of action being performed, such as {@link #ACTION_DOWN}.
 * @param pointerCount The number of pointers that will be in this event.
 * @param pointerIds An array of <em>pointerCount</em> values providing
 * an identifier for each pointer.
 * @param pointerCoords An array of <em>pointerCount</em> values providing
 * a {@link PointerCoords} coordinate object for each pointer.
 * @param metaState The state of any meta / modifier keys that were in effect when
 * the event was generated.
 * @param xPrecision The precision of the X coordinate being reported.
 * @param yPrecision The precision of the Y coordinate being reported.
 * @param deviceId The id for the device that this event came from.  An id of
 * zero indicates that the event didn't come from a physical device; other
 * numbers are arbitrary and you shouldn't depend on the values.
 * @param edgeFlags A bitfield indicating which edges, if any, were touched by this
 * MotionEvent.
 * @param source The source of this event.
 * @param flags The motion event flags.
 *
 * @deprecated Use {@link #obtain(long, long, int, int, PointerProperties[], PointerCoords[], int, int, float, float, int, int, int, int)}
 * instead.
 */
====>[PUBLIC]<android.view.MotionEvent: MotionEvent obtain(long,long,int,int,int[],PointerCoords[],int,float,float,int,int,int,int)>    ---->    #obtain(long, long, int, int, PointerProperties[], PointerCoords[], int, int, float, float, int, int, int, int)
<android.renderscript.ProgramVertexFixedFunction.Constants: void setTexture(Matrix4f)>
/**
 * @deprecated in API 16
 * Sets the texture matrix in the fixed function matrix buffer.
 * Texture matrix must be enabled in the
 * ProgramVertexFixedFunction builder for the shader to utilize
 * it.
 *
 * @param m modelview matrix
 */
====>[PUBLIC]<android.renderscript.ProgramVertexFixedFunction.Constants: void setTexture(Matrix4f)>    ---->    
<android.view.inputmethod.InputMethodManager: void notifyUserAction()>
/**
 * Notify that a user took some action with this input method.
 *
 * @deprecated Just kept to avoid possible app compat issue.
 * @hide
 */
====>[HIDDEN]<android.view.inputmethod.InputMethodManager: void notifyUserAction()>    ---->    
<android.speech.tts.TextToSpeech: int setOnUtteranceCompletedListener(OnUtteranceCompletedListener)>
/**
 * Sets the listener that will be notified when synthesis of an utterance completes.
 *
 * @param listener The listener to use.
 *
 * @return {@link #ERROR} or {@link #SUCCESS}.
 *
 * @deprecated Use {@link #setOnUtteranceProgressListener(UtteranceProgressListener)}
 * instead.
 */
====>[PUBLIC]<android.speech.tts.TextToSpeech: int setOnUtteranceCompletedListener(OnUtteranceCompletedListener)>    ---->    #setOnUtteranceProgressListener(UtteranceProgressListener)
<android.text.SpannableStringBuilder: int getTextRunCursor(int,int,int,int,int,Paint)>
/**
 * Returns the next cursor position in the run.  This avoids placing the cursor between
 * surrogates, between characters that form conjuncts, between base characters and combining
 * marks, or within a reordering cluster.
 *
 * <p>The context is the shaping context for cursor movement, generally the bounds of the metric
 * span enclosing the cursor in the direction of movement.
 * <code>contextStart</code>, <code>contextEnd</code> and <code>offset</code> are relative to
 * the start of the string.</p>
 *
 * <p>If cursorOpt is CURSOR_AT and the offset is not a valid cursor position,
 * this returns -1.  Otherwise this will never return a value before contextStart or after
 * contextEnd.</p>
 *
 * @param contextStart the start index of the context
 * @param contextEnd the (non-inclusive) end index of the context
 * @param dir 1 if the run is RTL, otherwise 0
 * @param offset the cursor position to move from
 * @param cursorOpt how to move the cursor, one of CURSOR_AFTER,
 * CURSOR_AT_OR_AFTER, CURSOR_BEFORE,
 * CURSOR_AT_OR_BEFORE, or CURSOR_AT
 * @param p the Paint object that is requesting this information
 * @return the offset of the next position, or -1
 * @deprecated This is an internal method, refrain from using it in your code
 */
====>[PUBLIC]<android.text.SpannableStringBuilder: int getTextRunCursor(int,int,int,int,int,Paint)>    ---->    
<android.webkit.WebSettings: void setPluginsPath(String)>
/**
 * Sets a custom path to plugins used by the WebView. This method is
 * obsolete since each plugin is now loaded from its own package.
 *
 * @param pluginsPath a String path to the directory containing plugins
 * @deprecated This method is no longer used as plugins are loaded from
 * their own APK via the system's package manager.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}
 */
====>[HIDDEN]<android.webkit.WebSettings: void setPluginsPath(String)>    ---->    
<android.app.slice.Slice.Builder: void <init>(Uri)>
/**
 * @deprecated TO BE REMOVED
 * @removed
 */
====>[HIDDEN]<android.app.slice.Slice.Builder: void <init>(Uri)>    ---->    
<android.text.method.DigitsKeyListener: DigitsKeyListener getInstance()>
/**
 * Returns a DigitsKeyListener that accepts the ASCII digits 0 through 9.
 *
 * @deprecated Use {@link #getInstance(Locale)} instead.
 */
====>[PUBLIC]<android.text.method.DigitsKeyListener: DigitsKeyListener getInstance()>    ---->    #getInstance(Locale)
<com.android.internal.graphics.palette.Palette: Palette generate(Bitmap)>
/**
 * @deprecated Use {@link Palette.Builder} to generate the Palette.
 */
====>[PUBLIC]<com.android.internal.graphics.palette.Palette: Palette generate(Bitmap)>    ---->    Palette.Builder
<android.webkit.WebView: void onGlobalFocusChanged(View,View)>
/**
 * @deprecated WebView should not have implemented
 * ViewTreeObserver.OnGlobalFocusChangeListener. This method does nothing now.
 */
====>[HIDDEN]<android.webkit.WebView: void onGlobalFocusChanged(View,View)>    ---->    
<android.accessibilityservice.AccessibilityServiceInfo: String getDescription()>
/**
 * Gets the non-localized description of the accessibility service.
 * <p>
 * <strong>Statically set from
 * {@link AccessibilityService#SERVICE_META_DATA meta-data}.</strong>
 * </p>
 * @return The description.
 *
 * @deprecated Use {@link #loadDescription(PackageManager)}.
 */
====>[PUBLIC]<android.accessibilityservice.AccessibilityServiceInfo: String getDescription()>    ---->    #loadDescription(PackageManager)
Inconsistency (Non-Documentation):<android.speech.tts.TextToSpeech: boolean areDefaultsEnforced()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/speech/tts/TextToSpeech.java
<android.speech.tts.TextToSpeech: boolean areDefaultsEnforced()>
/**
 * Checks whether the user's settings should override settings requested
 * by the calling application. As of the Ice cream sandwich release,
 * user settings never forcibly override the app's settings.
 */
====>[PUBLIC]<android.speech.tts.TextToSpeech: boolean areDefaultsEnforced()>    ---->    
<android.view.ViewConfiguration: int getDoubleTapSlop()>
/**
 * @return Distance in dips between the first touch and second touch to still be
 * considered a double tap
 * @deprecated Use {@link #getScaledDoubleTapSlop()} instead.
 * @hide The only client of this should be GestureDetector, which needs this
 * for clients that still use its deprecated constructor.
 */
====>[HIDDEN]<android.view.ViewConfiguration: int getDoubleTapSlop()>    ---->    #getScaledDoubleTapSlop()
<android.widget.CursorAdapter: void <init>(Context,Cursor)>
/**
 * Constructor that always enables auto-requery.
 *
 * @deprecated This option is discouraged, as it results in Cursor queries
 * being performed on the application's UI thread and thus can cause poor
 * responsiveness or even Application Not Responding errors.  As an alternative,
 * use {@link android.app.LoaderManager} with a {@link android.content.CursorLoader}.
 *
 * @param c The cursor from which to get the data.
 * @param context The context
 */
====>[PUBLIC]<android.widget.CursorAdapter: void <init>(Context,Cursor)>    ---->    android.app.LoaderManager
<android.widget.CalendarView: int getSelectedWeekBackgroundColor()>
/**
 * Gets the background color for the selected week.
 *
 * @return The week background color.
 *
 * @attr ref android.R.styleable#CalendarView_selectedWeekBackgroundColor
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: int getSelectedWeekBackgroundColor()>    ---->    
Inconsistency (Non-Documentation):<android.database.CursorWrapper: boolean requery()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/database/CursorWrapper.java
<android.database.CursorWrapper: boolean requery()>

====>[PUBLIC]<android.database.CursorWrapper: boolean requery()>    ---->    
<android.view.View: Bitmap getDrawingCache()>
/**
 * <p>Calling this method is equivalent to calling <code>getDrawingCache(false)</code>.</p>
 *
 * @return A non-scaled bitmap representing this view or null if cache is disabled.
 *
 * @see #getDrawingCache(boolean)
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: Bitmap getDrawingCache()>    ---->    #setLayerType(int, Paint)
<android.graphics.RenderNode: boolean setLayerPaint(Paint)>
/**
 * @hide
 * @deprecated use {@link #setUseCompositingLayer(boolean, Paint)} instead
 */
====>[HIDDEN]<android.graphics.RenderNode: boolean setLayerPaint(Paint)>    ---->    #setUseCompositingLayer(boolean, Paint)
<android.webkit.WebSettings: void setAppCacheMaxSize(long)>
/**
 * Sets the maximum size for the Application Cache content. The passed size
 * will be rounded to the nearest value that the database can support, so
 * this should be viewed as a guide, not a hard limit. Setting the
 * size to a value less than current database size does not cause the
 * database to be trimmed. The default size is {@link Long#MAX_VALUE}.
 * It is recommended to leave the maximum size set to the default value.
 *
 * @param appCacheMaxSize the maximum size in bytes
 * @deprecated In future quota will be managed automatically.
 */
====>[PUBLIC]<android.webkit.WebSettings: void setAppCacheMaxSize(long)>    ---->    
<android.view.Display: float[] getSupportedRefreshRates()>
/**
 * Get the supported refresh rates of this display in frames per second.
 * <p>
 * This method only returns refresh rates for the display's default modes. For more options, use
 * {@link #getSupportedModes()}.
 *
 * @deprecated use {@link #getSupportedModes()} instead
 */
====>[PUBLIC]<android.view.Display: float[] getSupportedRefreshRates()>    ---->    #getSupportedModes()
<android.nfc.NfcAdapter: void setNdefPushMessageCallback(CreateNdefMessageCallback,Activity,Activity)>
/**
 * Set a callback that dynamically generates NDEF messages to send using Android Beam (TM).
 *
 * <p>This method may be called at any time before {@link Activity#onDestroy},
 * but the NDEF message callback can only occur when the
 * specified activity(s) are in resumed (foreground) state. The recommended
 * approach is to call this method during your Activity's
 * {@link Activity#onCreate} - see sample
 * code below. This method does not immediately perform any I/O or blocking work,
 * so is safe to call on your main thread.
 *
 * <p>Only one NDEF message can be pushed by the currently resumed activity.
 * If both {@link #setNdefPushMessage} and
 * {@link #setNdefPushMessageCallback} are set, then
 * the callback will take priority.
 *
 * <p>If neither {@link #setNdefPushMessage} or
 * {@link #setNdefPushMessageCallback} have been called for your activity, then
 * the Android OS may choose to send a default NDEF message on your behalf,
 * such as a URI for your application.
 *
 * <p>If {@link #setNdefPushMessage} is called with a null NDEF message,
 * and/or {@link #setNdefPushMessageCallback} is called with a null callback,
 * then NDEF push will be completely disabled for the specified activity(s).
 * This also disables any default NDEF message the Android OS would have
 * otherwise sent on your behalf for those activity(s).
 *
 * <p>If you want to prevent the Android OS from sending default NDEF
 * messages completely (for all activities), you can include a
 * {@code <meta-data>} element inside the {@code <application>}
 * element of your AndroidManifest.xml file, like this:
 * <pre>
 * &lt;application ...>
 * &lt;meta-data android:name="android.nfc.disable_beam_default"
 * android:value="true" />
 * &lt;/application></pre>
 *
 * <p>The API allows for multiple activities to be specified at a time,
 * but it is strongly recommended to just register one at a time,
 * and to do so during the activity's {@link Activity#onCreate}. For example:
 * <pre>
 * protected void onCreate(Bundle savedInstanceState) {
 * super.onCreate(savedInstanceState);
 * NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this);
 * if (nfcAdapter == null) return;  // NFC not available on this device
 * nfcAdapter.setNdefPushMessageCallback(callback, this);
 * }</pre>
 * And that is it. Only one call per activity is necessary. The Android
 * OS will automatically release its references to the callback and the
 * Activity object when it is destroyed if you follow this pattern.
 *
 * <p class="note">Do not pass in an Activity that has already been through
 * {@link Activity#onDestroy}. This is guaranteed if you call this API
 * during {@link Activity#onCreate}.
 * <p class="note">For sending large content such as pictures and songs,
 * consider using {@link #setBeamPushUris}, which switches to alternate transports
 * such as Bluetooth to achieve a fast transfer rate.
 * <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
 *
 * @param callback callback, or null to disable
 * @param activity activity for which the NDEF message will be pushed
 * @param activities optional additional activities, however we strongly recommend
 * to only register one at a time, and to do so in that activity's
 * {@link Activity#onCreate}
 * @throws UnsupportedOperationException if FEATURE_NFC is unavailable.
 * @deprecated this feature is deprecated. File sharing can work using other technology like
 * Bluetooth.
 */
====>[PUBLIC]<android.nfc.NfcAdapter: void setNdefPushMessageCallback(CreateNdefMessageCallback,Activity,Activity)>    ---->    
<android.os.UserManager: boolean canSwitchUsers()>
/**
 * @deprecated use {@link #getUserSwitchability()} instead.
 *
 * @removed
 * @hide
 */
====>[HIDDEN]<android.os.UserManager: boolean canSwitchUsers()>    ---->    #getUserSwitchability()
<android.speech.tts.UtteranceProgressListener: void onUtteranceRangeStart(String,int,int)>
/**
 * @removed
 */
====>[HIDDEN]<android.speech.tts.UtteranceProgressListener: void onUtteranceRangeStart(String,int,int)>    ---->    
<android.renderscript.RenderScriptGL.SurfaceConfig: void setSamples(int,int,float)>
/**
 * @deprecated in API 16
 * Configure the multisample rendering.
 *
 * @param minimum The required number of samples, must be at least 1.
 * @param preferred The targe number of samples, must be at least
 * minimum
 * @param Q  The quality of samples, range 0-1.  Used to decide between
 * different formats which have the same number of samples but
 * different rendering quality.
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL.SurfaceConfig: void setSamples(int,int,float)>    ---->    
<android.hardware.fingerprint.FingerprintManager: void authenticate(CryptoObject,CancellationSignal,int,AuthenticationCallback,Handler)>
/**
 * Request authentication of a crypto object. This call warms up the fingerprint hardware
 * and starts scanning for a fingerprint. It terminates when
 * {@link AuthenticationCallback#onAuthenticationError(int, CharSequence)} or
 * {@link AuthenticationCallback#onAuthenticationSucceeded(AuthenticationResult)} is called, at
 * which point the object is no longer valid. The operation can be canceled by using the
 * provided cancel object.
 *
 * @param crypto object associated with the call or null if none required.
 * @param cancel an object that can be used to cancel authentication
 * @param flags optional flags; should be 0
 * @param callback an object to receive authentication events
 * @param handler an optional handler to handle callback events
 *
 * @throws IllegalArgumentException if the crypto operation is not supported or is not backed
 * by <a href="{@docRoot}training/articles/keystore.html">Android Keystore
 * facility</a>.
 * @throws IllegalStateException if the crypto primitive is not initialized.
 * @deprecated See {@link BiometricPrompt#authenticate(CancellationSignal, Executor,
 * BiometricPrompt.AuthenticationCallback)} and {@link BiometricPrompt#authenticate(
 * BiometricPrompt.CryptoObject, CancellationSignal, Executor,
 * BiometricPrompt.AuthenticationCallback)}
 */
====>[PUBLIC]<android.hardware.fingerprint.FingerprintManager: void authenticate(CryptoObject,CancellationSignal,int,AuthenticationCallback,Handler)>    ---->    BiometricPrompt#authenticate(CancellationSignal, Executor,  BiometricPrompt.AuthenticationCallback)
<android.location.LocationManager: boolean addGpsStatusListener(Listener)>
/**
 * Adds a GPS status listener.
 *
 * @param listener GPS status listener object to register
 *
 * @return true if the listener was successfully added
 *
 * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present
 * @deprecated use {@link #registerGnssStatusCallback(GnssStatus.Callback)} instead.
 */
====>[PUBLIC]<android.location.LocationManager: boolean addGpsStatusListener(Listener)>    ---->    #registerGnssStatusCallback(GnssStatus.Callback)
<android.content.Intent: Object getExtra(String)>
/**
 * Retrieve extended data from the intent.
 *
 * @param name The name of the desired item.
 *
 * @return the value of an item previously added with putExtra(),
 * or null if none was found.
 *
 * @deprecated
 * @hide
 */
====>[HIDDEN]<android.content.Intent: Object getExtra(String)>    ---->    
<android.hardware.SensorManager: int getSensors()>
/**
 * @return available sensors.
 * @deprecated This method is deprecated, use
 * {@link SensorManager#getSensorList(int)} instead
 */
====>[PUBLIC]<android.hardware.SensorManager: int getSensors()>    ---->    SensorManager#getSensorList(int)
<android.util.proto.ProtoOutputStream: void writePackedInt32(long,int[])>
/**
 * Write a list of packed proto "int32" type field value.
 *
 * Note that these are stored in memory as signed values and written as unsigned
 * varints, which if negative, are 10 bytes long. If you know the data is likely
 * to be negative, use "sint32".
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedInt32(long,int[])>    ---->    #write
<android.renderscript.ProgramFragment.Builder: ProgramFragment create()>
/**
 * @deprecated in API 16
 * Creates ProgramFragment from the current state of the builder
 *
 * @return  ProgramFragment
 */
====>[PUBLIC]<android.renderscript.ProgramFragment.Builder: ProgramFragment create()>    ---->    
<android.telephony.PhoneNumberUtils: void formatJapaneseNumber(Editable)>
/**
 * Formats a phone number in-place using the Japanese formatting rules.
 * Numbers will be formatted as:
 *
 * <p><code>
 * 03-xxxx-xxxx
 * 090-xxxx-xxxx
 * 0120-xxx-xxx
 * +81-3-xxxx-xxxx
 * +81-90-xxxx-xxxx
 * </code></p>
 *
 * @param text the number to be formatted, will be modified with
 * the formatting
 *
 * @deprecated Use link #formatNumber(String phoneNumber, String defaultCountryIso) instead
 */
====>[PUBLIC]<android.telephony.PhoneNumberUtils: void formatJapaneseNumber(Editable)>    ---->    link #formatNumber(String phoneNumber, String defaultCountryIso)
<android.net.NetworkInfo: boolean isRoaming()>
/**
 * Indicates whether the device is currently roaming on this network. When
 * {@code true}, it suggests that use of data on this network may incur
 * extra costs.
 *
 * @return {@code true} if roaming is in effect, {@code false} otherwise.
 * @deprecated Callers should switch to checking
 * {@link NetworkCapabilities#NET_CAPABILITY_NOT_ROAMING}
 * instead, since that handles more complex situations, such as
 * VPNs.
 */
====>[PUBLIC]<android.net.NetworkInfo: boolean isRoaming()>    ---->    NetworkCapabilities#NET_CAPABILITY_NOT_ROAMING
<android.graphics.drawable.BitmapDrawable: void <init>(String)>
/**
 * Create a drawable by opening a given file path and decoding the bitmap.
 * @deprecated Use {@link #BitmapDrawable(Resources, String)} to ensure
 * that the drawable has correctly set its target density.
 */
====>[PUBLIC]<android.graphics.drawable.BitmapDrawable: void <init>(String)>    ---->    #BitmapDrawable(Resources, String)
<android.hardware.location.ContextHubManager: int[] getContextHubHandles()>
/**
 * Get a handle to all the context hubs in the system
 *
 * @return array of context hub handles
 *
 * @deprecated Use {@link #getContextHubs()} instead. The use of handles are deprecated in the
 * new APIs.
 */
====>[PUBLIC]<android.hardware.location.ContextHubManager: int[] getContextHubHandles()>    ---->    #getContextHubs()
<android.app.admin.DevicePolicyManager: void setCertInstallerPackage(ComponentName,String)>
/**
 * Called by a profile owner or device owner to grant access to privileged certificate
 * manipulation APIs to a third-party certificate installer app. Granted APIs include
 * {@link #getInstalledCaCerts}, {@link #hasCaCertInstalled}, {@link #installCaCert},
 * {@link #uninstallCaCert}, {@link #uninstallAllUserCaCerts} and {@link #installKeyPair}.
 * <p>
 * Delegated certificate installer is a per-user state. The delegated access is persistent until
 * it is later cleared by calling this method with a null value or uninstallling the certificate
 * installer.
 * <p>
 * <b>Note:</b>Starting from {@link android.os.Build.VERSION_CODES#N}, if the caller
 * application's target SDK version is {@link android.os.Build.VERSION_CODES#N} or newer, the
 * supplied certificate installer package must be installed when calling this API, otherwise an
 * {@link IllegalArgumentException} will be thrown.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param installerPackage The package name of the certificate installer which will be given
 * access. If {@code null} is given the current package will be cleared.
 * @throws SecurityException if {@code admin} is not a device or a profile owner.
 *
 * @deprecated From {@link android.os.Build.VERSION_CODES#O}. Use {@link #setDelegatedScopes}
 * with the {@link #DELEGATION_CERT_INSTALL} scope instead.
 */
====>[PUBLIC]<android.app.admin.DevicePolicyManager: void setCertInstallerPackage(ComponentName,String)>    ---->    #setDelegatedScopes
<android.content.pm.PackageInstaller: void addSessionCallback(SessionCallback,Handler)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.content.pm.PackageInstaller: void addSessionCallback(SessionCallback,Handler)>    ---->    
Inconsistency (Non-Documentation):<android.util.RecurrenceRule: RecurrenceRule buildNever()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/util/RecurrenceRule.java
<android.util.RecurrenceRule: RecurrenceRule buildNever()>

====>[PUBLIC]<android.util.RecurrenceRule: RecurrenceRule buildNever()>    ---->    
<android.graphics.drawable.Drawable: void setDither(boolean)>
/**
 * Set to true to have the drawable dither its colors when drawn to a
 * device with fewer than 8-bits per color component.
 *
 * @see android.graphics.Paint#setDither(boolean);
 * @deprecated This property is ignored.
 */
====>[PUBLIC]<android.graphics.drawable.Drawable: void setDither(boolean)>    ---->    
<android.app.Notification.Builder: Builder setDefaults(int)>
/**
 * Set which notification properties will be inherited from system defaults.
 * <p>
 * The value should be one or more of the following fields combined with
 * bitwise-or:
 * {@link #DEFAULT_SOUND}, {@link #DEFAULT_VIBRATE}, {@link #DEFAULT_LIGHTS}.
 * <p>
 * For all default values, use {@link #DEFAULT_ALL}.
 *
 * @deprecated use {@link NotificationChannel#enableVibration(boolean)} and
 * {@link NotificationChannel#enableLights(boolean)} and
 * {@link NotificationChannel#setSound(Uri, AudioAttributes)} instead.
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder setDefaults(int)>    ---->    NotificationChannel#enableVibration(boolean)
<android.util.proto.ProtoOutputStream: void writeFixed32(long,int)>
/**
 * Write a single proto "fixed32" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeFixed32(long,int)>    ---->    #write
<android.webkit.WebView: void freeMemory()>
/**
 * Informs this WebView that memory is low so that it can free any available
 * memory.
 * @deprecated Memory caches are automatically dropped when no longer needed, and in response
 * to system memory pressure.
 */
====>[PUBLIC]<android.webkit.WebView: void freeMemory()>    ---->    
<android.telephony.TelephonyManager: CellLocation getCellLocation()>
/**
 * Returns the current location of the device.
 * <p>
 * If there is only one radio in the device and that radio has an LTE connection,
 * this method will return null. The implementation must not to try add LTE
 * identifiers into the existing cdma/gsm classes.
 * <p>
 * @return Current location of the device or null if not available.
 *
 * @deprecated use {@link #getAllCellInfo} instead, which returns a superset of this API.
 */
====>[PUBLIC]<android.telephony.TelephonyManager: CellLocation getCellLocation()>    ---->    #getAllCellInfo
<android.content.pm.PackageManager: void removePackageFromPreferred(String)>
/**
 * @deprecated This function no longer does anything. It is the platform's
 * responsibility to assign preferred activities and this cannot be modified
 * directly. To determine the activities resolved by the platform, use
 * {@link #resolveActivity} or {@link #queryIntentActivities}. To configure
 * an app to be responsible for a particular role and to check current role
 * holders, see {@link android.app.role.RoleManager}.
 */
====>[PUBLIC]<android.content.pm.PackageManager: void removePackageFromPreferred(String)>    ---->    #resolveActivity
<android.renderscript.RenderScriptGL: void resume()>
/**
 * @deprecated in API 16
 * Resume calls to the root rendering script.
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL: void resume()>    ---->    
<android.provider.MediaStore.Audio.Media: Uri getContentUriForPath(String)>
/**
 * Get the content:// style URI for the given audio media file.
 *
 * @deprecated Apps may not have filesystem permissions to directly
 * access this path.
 */
====>[PUBLIC]<android.provider.MediaStore.Audio.Media: Uri getContentUriForPath(String)>    ---->    
<android.util.proto.ProtoOutputStream: void writeFloat(long,float)>
/**
 * Write a single proto "float" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeFloat(long,float)>    ---->    #write
<android.telephony.TelephonyManager: List<CarrierIdentifier> getAllowedCarriers(int)>
/**
 * Get the allowed carrier list for slotIndex.
 * Requires system privileges.
 *
 * <p>This method returns valid data on devices with {@link
 * android.content.pm.PackageManager#FEATURE_TELEPHONY_CARRIERLOCK} enabled.
 *
 * @deprecated Apps should use {@link getCarriersRestrictionRules} to retrieve the list of
 * allowed and excliuded carriers, as the result of this API is valid only when the excluded
 * list is empty. This API could return an empty list, even if some restrictions are present.
 *
 * @return List of {@link android.telephony.CarrierIdentifier}; empty list
 * means all carriers are allowed.
 * @hide
 */
====>[HIDDEN]<android.telephony.TelephonyManager: List<CarrierIdentifier> getAllowedCarriers(int)>    ---->    getCarriersRestrictionRules
<android.test.InstrumentationTestCase: void injectInsrumentation(Instrumentation)>
/**
 * Injects instrumentation into this test case. This method is
 * called by the test runner during test setup.
 *
 * @param instrumentation the instrumentation to use with this instance
 *
 * @deprecated Incorrect spelling,
 * use {@link #injectInstrumentation(android.app.Instrumentation)} instead.
 */
====>[PUBLIC]<android.test.InstrumentationTestCase: void injectInsrumentation(Instrumentation)>    ---->    #injectInstrumentation(android.app.Instrumentation)
Inconsistency (Non-Documentation):<android.media.ThumbnailUtils: Bitmap transform(Matrix,Bitmap,int,int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//media/java/android/media/ThumbnailUtils.java
<android.media.ThumbnailUtils: Bitmap transform(Matrix,Bitmap,int,int,int)>
/**
 * Transform source Bitmap to targeted width and height.
 */
====>[PUBLIC]<android.media.ThumbnailUtils: Bitmap transform(Matrix,Bitmap,int,int,int)>    ---->    
<android.hardware.radio.RadioTuner: int tune(int,int)>
/**
 * Tune to a specific frequency.
 * The operation is asynchronous and {@link Callback}
 * onProgramInfoChanged() will be called when tune completes or
 * onError() when cancelled or timeout.
 * @param channel the specific channel or frequency to tune to.
 * @param subChannel the specific sub-channel to tune to. N/A if the selected configuration
 * does not support cub channels.
 * @return
 * <ul>
 * <li>{@link RadioManager#STATUS_OK} in case of success, </li>
 * <li>{@link RadioManager#STATUS_ERROR} in case of unspecified error, </li>
 * <li>{@link RadioManager#STATUS_NO_INIT} if the native service cannot be reached, </li>
 * <li>{@link RadioManager#STATUS_BAD_VALUE} if parameters are invalid, </li>
 * <li>{@link RadioManager#STATUS_INVALID_OPERATION} if the call is out of sequence, </li>
 * <li>{@link RadioManager#STATUS_DEAD_OBJECT} if the binder transaction to the native
 * service fails, </li>
 * </ul>
 * @deprecated Use {@link tune(ProgramSelector)} instead.
 */
====>[PUBLIC]<android.hardware.radio.RadioTuner: int tune(int,int)>    ---->    tune(ProgramSelector)
<android.media.AudioTrack: int setStereoVolume(float,float)>
/**
 * Sets the specified left and right output gain values on the AudioTrack.
 * <p>Gain values are clamped to the closed interval [0.0, max] where
 * max is the value of {@link #getMaxVolume}.
 * A value of 0.0 results in zero gain (silence), and
 * a value of 1.0 means unity gain (signal unchanged).
 * The default value is 1.0 meaning unity gain.
 * <p>The word "volume" in the API name is historical; this is actually a linear gain.
 * @param leftGain output gain for the left channel.
 * @param rightGain output gain for the right channel
 * @return error code or success, see {@link #SUCCESS},
 * {@link #ERROR_INVALID_OPERATION}
 * @deprecated Applications should use {@link #setVolume} instead, as it
 * more gracefully scales down to mono, and up to multi-channel content beyond stereo.
 */
====>[PUBLIC]<android.media.AudioTrack: int setStereoVolume(float,float)>    ---->    #setVolume
<android.graphics.Canvas: boolean clipRect(RectF,Op)>
/**
 * Modify the current clip with the specified rectangle.
 *
 * @param rect The rect to intersect with the current clip
 * @param op How the clip is modified
 * @return true if the resulting clip is non-empty
 *
 * @deprecated Region.Op values other than {@link Region.Op#INTERSECT} and
 * {@link Region.Op#DIFFERENCE} have the ability to expand the clip. The canvas clipping APIs
 * are intended to only expand the clip as a result of a restore operation. This enables a view
 * parent to clip a canvas to clearly define the maximal drawing area of its children. The
 * recommended alternative calls are {@link #clipRect(RectF)} and {@link #clipOutRect(RectF)};
 *
 * As of API Level API level {@value Build.VERSION_CODES#P} only {@link Region.Op#INTERSECT} and
 * {@link Region.Op#DIFFERENCE} are valid Region.Op parameters.
 */
====>[PUBLIC]<android.graphics.Canvas: boolean clipRect(RectF,Op)>    ---->    Region.Op#INTERSECT
<android.view.textservice.SpellCheckerSubtype: String getLocale()>
/**
 * @return the locale of the subtype
 *
 * @deprecated Use {@link #getLanguageTag()} instead.
 */
====>[PUBLIC]<android.view.textservice.SpellCheckerSubtype: String getLocale()>    ---->    #getLanguageTag()
<com.android.internal.widget.LockPatternChecker: AsyncTask<?, ?, ?> verifyPassword(LockPatternUtils,String,long,int,OnVerifyCallback)>
/**
 * Verify a password asynchronously.
 *
 * @param utils The LockPatternUtils instance to use.
 * @param password The password to check.
 * @param challenge The challenge to verify against the pattern.
 * @param userId The user to check against the pattern.
 * @param callback The callback to be invoked with the verification result.
 *
 * @deprecated Pass the password as a byte array.
 */
====>[PUBLIC]<com.android.internal.widget.LockPatternChecker: AsyncTask<?, ?, ?> verifyPassword(LockPatternUtils,String,long,int,OnVerifyCallback)>    ---->    
Inconsistency (Non-Documentation):<android.util.RecurrenceRule: RecurrenceRule buildRecurringMonthly(int,ZoneId)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/util/RecurrenceRule.java
<android.util.RecurrenceRule: RecurrenceRule buildRecurringMonthly(int,ZoneId)>

====>[PUBLIC]<android.util.RecurrenceRule: RecurrenceRule buildRecurringMonthly(int,ZoneId)>    ---->    
<android.text.DynamicLayout: void <init>(CharSequence,CharSequence,TextPaint,int,Alignment,float,float,boolean,TruncateAt,int)>
/**
 * @deprecated Use {@link Builder} instead.
 */
====>[PUBLIC]<android.text.DynamicLayout: void <init>(CharSequence,CharSequence,TextPaint,int,Alignment,float,float,boolean,TruncateAt,int)>    ---->    Builder
<android.hardware.radio.RadioManager.ProgramInfo: int getChannel()>
/**
 * Main channel expressed in units according to band type.
 * Currently all defined band types express channels as frequency in kHz
 * @return the program channel
 * @deprecated Use {@link getSelector()} instead.
 */
====>[PUBLIC]<android.hardware.radio.RadioManager.ProgramInfo: int getChannel()>    ---->    getSelector()
Inconsistency (Non-Documentation):<android.media.ThumbnailUtils: ParcelFileDescriptor makeInputStream(Uri,ContentResolver)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//media/java/android/media/ThumbnailUtils.java
<android.media.ThumbnailUtils: ParcelFileDescriptor makeInputStream(Uri,ContentResolver)>

====>[PUBLIC]<android.media.ThumbnailUtils: ParcelFileDescriptor makeInputStream(Uri,ContentResolver)>    ---->    
Inconsistency (Non-Documentation):<android.media.ThumbnailUtils: int computeInitialSampleSize(Options,int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//media/java/android/media/ThumbnailUtils.java
<android.media.ThumbnailUtils: int computeInitialSampleSize(Options,int,int)>

====>[PUBLIC]<android.media.ThumbnailUtils: int computeInitialSampleSize(Options,int,int)>    ---->    
<android.webkit.WebView: void refreshPlugins(boolean)>
/**
 * @deprecated This was used for Gears, which has been deprecated.
 * @hide
 */
====>[HIDDEN]<android.webkit.WebView: void refreshPlugins(boolean)>    ---->    
<android.util.jar.StrictJarFile: Certificate[] getCertificates(ZipEntry)>
/**
 * Return all certificates for a given {@link ZipEntry} belonging to this jar.
 * This method MUST be called only after fully exhausting the InputStream belonging
 * to this entry.
 *
 * Returns {@code null} if this jar file isn't signed or if this method is
 * called before the stream is processed.
 *
 * @deprecated Switch callers to use getCertificateChains instead
 */
====>[PUBLIC]<android.util.jar.StrictJarFile: Certificate[] getCertificates(ZipEntry)>    ---->    getCertificateChains
<android.provider.Contacts.Organizations: CharSequence getDisplayLabel(Context,int,CharSequence)>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.Organizations: CharSequence getDisplayLabel(Context,int,CharSequence)>    ---->    android.provider.ContactsContract
<android.content.Context: Drawable getWallpaper()>
/**
 * @deprecated Use {@link android.app.WallpaperManager#getDrawable
 * WallpaperManager.get()} instead.
 */
====>[PUBLIC]<android.content.Context: Drawable getWallpaper()>    ---->    android.app.WallpaperManager#getDrawable  WallpaperManager.get()
<android.webkit.WebView: boolean canZoomIn()>
/**
 * Gets whether this WebView can be zoomed in.
 *
 * @return {@code true} if this WebView can be zoomed in
 *
 * @deprecated This method is prone to inaccuracy due to race conditions
 * between the web rendering and UI threads; prefer
 * {@link WebViewClient#onScaleChanged}.
 */
====>[PUBLIC]<android.webkit.WebView: boolean canZoomIn()>    ---->    WebViewClient#onScaleChanged
<android.widget.PopupWindow: void setLayoutInScreenEnabled(boolean)>
/**
 * <p>Allows the popup window to force the flag
 * {@link WindowManager.LayoutParams#FLAG_LAYOUT_IN_SCREEN}, overriding default behavior.
 * This will cause the popup to be positioned in absolute screen coordinates.</p>
 *
 * @param enabled true if the popup should always be positioned in screen coordinates
 * @deprecated Use {@link #setIsLaidOutInScreen(boolean)} instead
 * @removed
 */
====>[HIDDEN]<android.widget.PopupWindow: void setLayoutInScreenEnabled(boolean)>    ---->    #setIsLaidOutInScreen(boolean)
<android.view.ViewConfiguration: long getGlobalActionKeyTimeout()>
/**
 * The amount of time a user needs to press the relevant key to bring up
 * the global actions dialog.
 *
 * @return how long a user needs to press the relevant key to bring up
 * the global actions dialog.
 * @deprecated This timeout should not be used by applications
 */
====>[PUBLIC]<android.view.ViewConfiguration: long getGlobalActionKeyTimeout()>    ---->    
<android.webkit.WebView: boolean canZoomOut()>
/**
 * Gets whether this WebView can be zoomed out.
 *
 * @return {@code true} if this WebView can be zoomed out
 *
 * @deprecated This method is prone to inaccuracy due to race conditions
 * between the web rendering and UI threads; prefer
 * {@link WebViewClient#onScaleChanged}.
 */
====>[PUBLIC]<android.webkit.WebView: boolean canZoomOut()>    ---->    WebViewClient#onScaleChanged
<android.location.GnssMeasurement: void resetCarrierCycles()>
/**
 * Resets the number of full carrier cycles between the satellite and the receiver.
 *
 * @deprecated use {@link #setAccumulatedDeltaRangeMeters(double)}
 * and {@link #setAccumulatedDeltaRangeState(int)} instead.
 * @hide
 */
====>[HIDDEN]<android.location.GnssMeasurement: void resetCarrierCycles()>    ---->    #setAccumulatedDeltaRangeMeters(double)
<android.webkit.WebSettings: void setLightTouchEnabled(boolean)>
/**
 * Enables using light touches to make a selection and activate mouseovers.
 * @deprecated From {@link android.os.Build.VERSION_CODES#JELLY_BEAN} this
 * setting is obsolete and has no effect.
 */
====>[PUBLIC]<android.webkit.WebSettings: void setLightTouchEnabled(boolean)>    ---->    
<android.hardware.hdmi.HdmiControlManager: boolean isRemoteDeviceConnected(HdmiDeviceInfo)>
/**
 * @removed
 * @hide
 * @deprecated Please use {@link #isDeviceConnected(targetDevice)} instead.
 */
====>[HIDDEN]<android.hardware.hdmi.HdmiControlManager: boolean isRemoteDeviceConnected(HdmiDeviceInfo)>    ---->    #isDeviceConnected(targetDevice)
<android.net.NetworkInfo: DetailedState getDetailedState()>
/**
 * Reports the current fine-grained state of the network.
 * @return the fine-grained state
 * @deprecated Apps should instead use the
 * {@link android.net.ConnectivityManager.NetworkCallback} API to
 * learn about connectivity changes. See
 * {@link ConnectivityManager#registerDefaultNetworkCallback} and
 * {@link ConnectivityManager#registerNetworkCallback}. These will
 * give a more accurate picture of the connectivity state of
 * the device and let apps react more easily and quickly to changes.
 */
====>[PUBLIC]<android.net.NetworkInfo: DetailedState getDetailedState()>    ---->    android.net.ConnectivityManager.NetworkCallback
<android.app.DownloadManager.Request: void allowScanningByMediaScanner()>
/**
 * If the file to be downloaded is to be scanned by MediaScanner, this method
 * should be called before {@link DownloadManager#enqueue(Request)} is called.
 *
 * @deprecated Starting in Q, this value is ignored. Files downloaded to
 * directories owned by applications (e.g. {@link Context#getExternalFilesDir(String)})
 * will not be scanned by MediaScanner and the rest will be scanned.
 */
====>[PUBLIC]<android.app.DownloadManager.Request: void allowScanningByMediaScanner()>    ---->    Context#getExternalFilesDir(String)
<android.database.CursorWindow: boolean isString(int,int)>
/**
 * Returns true if the field at the specified row and column index
 * has type {@link Cursor#FIELD_TYPE_STRING} or {@link Cursor#FIELD_TYPE_NULL}.
 *
 * @param row The zero-based row index.
 * @param column The zero-based column index.
 * @return True if the field has type {@link Cursor#FIELD_TYPE_STRING}
 * or {@link Cursor#FIELD_TYPE_NULL}.
 * @deprecated Use {@link #getType(int, int)} instead.
 */
====>[PUBLIC]<android.database.CursorWindow: boolean isString(int,int)>    ---->    #getType(int, int)
<android.widget.CalendarView: void setShownWeekCount(int)>
/**
 * Sets the number of weeks to be shown.
 *
 * @param count The shown week count.
 *
 * @attr ref android.R.styleable#CalendarView_shownWeekCount
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: void setShownWeekCount(int)>    ---->    
<android.os.PowerManager: void userActivity(long,boolean)>
/**
 * Notifies the power manager that user activity happened.
 * <p>
 * Resets the auto-off timer and brightens the screen if the device
 * is not asleep.  This is what happens normally when a key or the touch
 * screen is pressed or when some other user activity occurs.
 * This method does not wake up the device if it has been put to sleep.
 * </p><p>
 * Requires the {@link android.Manifest.permission#DEVICE_POWER} permission.
 * </p>
 *
 * @param when The time of the user activity, in the {@link SystemClock#uptimeMillis()}
 * time base.  This timestamp is used to correctly order the user activity request with
 * other power management functions.  It should be set
 * to the timestamp of the input event that caused the user activity.
 * @param noChangeLights If true, does not cause the keyboard backlight to turn on
 * because of this event.  This is set when the power key is pressed.
 * We want the device to stay on while the button is down, but we're about
 * to turn off the screen so we don't want the keyboard backlight to turn on again.
 * Otherwise the lights flash on and then off and it looks weird.
 *
 * @see #wakeUp
 * @see #goToSleep
 *
 * @removed Requires signature or system permission.
 * @deprecated Use {@link #userActivity(long, int, int)}.
 */
====>[HIDDEN]<android.os.PowerManager: void userActivity(long,boolean)>    ---->    #userActivity(long, int, int)
<android.app.Activity: void onPrepareDialog(int,Dialog,Bundle)>
/**
 * Provides an opportunity to prepare a managed dialog before it is being
 * shown.  The default implementation calls through to
 * {@link #onPrepareDialog(int, Dialog)} for compatibility.
 *
 * <p>
 * Override this if you need to update a managed dialog based on the state
 * of the application each time it is shown. For example, a time picker
 * dialog might want to be updated with the current time. You should call
 * through to the superclass's implementation. The default implementation
 * will set this Activity as the owner activity on the Dialog.
 *
 * @param id The id of the managed dialog.
 * @param dialog The dialog.
 * @param args The dialog arguments provided to {@link #showDialog(int, Bundle)}.
 * @see #onCreateDialog(int, Bundle)
 * @see #showDialog(int)
 * @see #dismissDialog(int)
 * @see #removeDialog(int)
 *
 * @deprecated Use the new {@link DialogFragment} class with
 * {@link FragmentManager} instead; this is also
 * available on older platforms through the Android compatibility package.
 */
====>[PUBLIC]<android.app.Activity: void onPrepareDialog(int,Dialog,Bundle)>    ---->    DialogFragment
<com.android.server.pm.ApexManager: PackageInfo getPackageInfoForApexName(String)>
/**
 * Returns a {@link PackageInfo} for an active APEX package keyed by it's {@code apexName}.
 *
 * @deprecated this API will soon be deleted, please don't depend on it.
 */
====>[PUBLIC]<com.android.server.pm.ApexManager: PackageInfo getPackageInfoForApexName(String)>    ---->    
Inconsistency (Non-Documentation):<com.android.systemui.shared.recents.model.Task: void addCallback(TaskCallbacks)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//packages/SystemUI/shared/src/com/android/systemui/shared/recents/model/Task.java
<com.android.systemui.shared.recents.model.Task: void addCallback(TaskCallbacks)>
/**
 * Add a callback.
 */
====>[PUBLIC]<com.android.systemui.shared.recents.model.Task: void addCallback(TaskCallbacks)>    ---->    
<android.app.Notification.Builder: Builder setSound(Uri,int)>
/**
 * Set the sound to play, along with a specific stream on which to play it.
 *
 * See {@link android.media.AudioManager} for the <code>STREAM_</code> constants.
 *
 * @deprecated use {@link NotificationChannel#setSound(Uri, AudioAttributes)}.
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder setSound(Uri,int)>    ---->    NotificationChannel#setSound(Uri, AudioAttributes)
<android.content.ContentProviderClient: void releaseQuietly(ContentProviderClient)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.content.ContentProviderClient: void releaseQuietly(ContentProviderClient)>    ---->    
<android.telephony.SignalStrength: int getEvdoDbm()>
/**
 * Get the EVDO RSSI value in dBm
 *
 * @return the EVDO RSSI value or {@link #INVALID} if invalid
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthCdma#getEvdoDbm}.
 *
 * @see android.telephony#CellSignalStrengthCdma
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 */
====>[PUBLIC]<android.telephony.SignalStrength: int getEvdoDbm()>    ---->    android.telephony#CellSignalStrengthCdma
<android.renderscript.ProgramRaster: CullMode getCullMode()>
/**
 * @deprecated in API 16
 * Specifies how triangles are culled based on their orientation
 * @return cull mode
 */
====>[PUBLIC]<android.renderscript.ProgramRaster: CullMode getCullMode()>    ---->    
<android.bluetooth.BluetoothHealthCallback: void onHealthAppConfigurationStatusChange(BluetoothHealthAppConfiguration,int)>
/**
 * Callback to inform change in registration state of the health
 * application.
 * <p> This callback is called on the binder thread (not on the UI thread)
 *
 * @param config Bluetooth Health app configuration
 * @param status Success or failure of the registration or unregistration calls. Can be one of
 * {@link BluetoothHealth#APP_CONFIG_REGISTRATION_SUCCESS} or {@link
 * BluetoothHealth#APP_CONFIG_REGISTRATION_FAILURE} or
 * {@link BluetoothHealth#APP_CONFIG_UNREGISTRATION_SUCCESS}
 * or {@link BluetoothHealth#APP_CONFIG_UNREGISTRATION_FAILURE}
 *
 * @deprecated Health Device Profile (HDP) and MCAP protocol are no longer used. New
 * apps should use Bluetooth Low Energy based solutions such as {@link BluetoothGatt},
 * {@link BluetoothAdapter#listenUsingL2capChannel()(int)}, or
 * {@link BluetoothDevice#createL2capChannel(int)}
 */
====>[PUBLIC]<android.bluetooth.BluetoothHealthCallback: void onHealthAppConfigurationStatusChange(BluetoothHealthAppConfiguration,int)>    ---->    BluetoothGatt
<android.preference.PreferenceActivity: Preference findPreference(CharSequence)>
/**
 * Finds a {@link Preference} based on its key.
 *
 * @param key The key of the preference to retrieve.
 * @return The {@link Preference} with the key, or null.
 * @see PreferenceGroup#findPreference(CharSequence)
 *
 * @deprecated This function is not relevant for a modern fragment-based
 * PreferenceActivity.
 */
====>[PUBLIC]<android.preference.PreferenceActivity: Preference findPreference(CharSequence)>    ---->    
Inconsistency (Non-Documentation):<android.app.Fragment: void performMultiWindowModeChanged(boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Fragment.java
<android.app.Fragment: void performMultiWindowModeChanged(boolean)>

====>[PUBLIC]<android.app.Fragment: void performMultiWindowModeChanged(boolean)>    ---->    
<android.app.Notification.Action: void <init>(int,CharSequence,PendingIntent)>
/**
 * @deprecated Use {@link android.app.Notification.Action.Builder}.
 */
====>[PUBLIC]<android.app.Notification.Action: void <init>(int,CharSequence,PendingIntent)>    ---->    android.app.Notification.Action.Builder
<android.os.Debug: int getGlobalFreedCount()>
/**
 * Returns the global count of objects freed by the runtime between a
 * {@link #startAllocCounting() start} and {@link #stopAllocCounting() stop}.
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: int getGlobalFreedCount()>    ---->    
<android.content.Context: void setWallpaper(Bitmap)>
/**
 * @deprecated Use {@link android.app.WallpaperManager#setBitmap(Bitmap)
 * WallpaperManager.set()} instead.
 * <p>This method requires the caller to hold the permission
 * {@link android.Manifest.permission#SET_WALLPAPER}.
 */
====>[PUBLIC]<android.content.Context: void setWallpaper(Bitmap)>    ---->    android.app.WallpaperManager#setBitmap(Bitmap)  WallpaperManager.set()
<android.os.PowerManager: void wakeUp(long,String)>
/**
 * Forces the device to wake up from sleep.
 * <p>
 * If the device is currently asleep, wakes it up, otherwise does nothing.
 * This is what happens when the power key is pressed to turn on the screen.
 * </p><p>
 * Requires the {@link android.Manifest.permission#DEVICE_POWER} permission.
 * </p>
 *
 * @param time The time when the request to wake up was issued, in the
 * {@link SystemClock#uptimeMillis()} time base.  This timestamp is used to correctly
 * order the wake up request with other power management functions.  It should be set
 * to the timestamp of the input event that caused the request to wake up.
 *
 * @param details A free form string to explain the specific details behind the wake up for
 * debugging purposes.
 *
 * @see #userActivity
 * @see #goToSleep
 *
 * @deprecated Use {@link #wakeUp(long, int, String)} instead.
 * @hide
 */
====>[HIDDEN]<android.os.PowerManager: void wakeUp(long,String)>    ---->    #wakeUp(long, int, String)
<android.app.prediction.AppTarget.Builder: Builder setTarget(ShortcutInfo)>
/**
 * @deprecated Use the appropriate constructor.
 * @removed
 */
====>[HIDDEN]<android.app.prediction.AppTarget.Builder: Builder setTarget(ShortcutInfo)>    ---->    
<android.widget.CalendarView: void setSelectedDateVerticalBar(int)>
/**
 * Sets the drawable for the vertical bar shown at the beginning and at
 * the end of the selected date.
 *
 * @param resourceId The vertical bar drawable resource id.
 *
 * @attr ref android.R.styleable#CalendarView_selectedDateVerticalBar
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: void setSelectedDateVerticalBar(int)>    ---->    
<android.renderscript.RenderScriptGL.SurfaceConfig: void <init>()>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL.SurfaceConfig: void <init>()>    ---->    
<android.app.usage.StorageStatsManager: StorageStats queryStatsForPackage(String,String,UserHandle)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.usage.StorageStatsManager: StorageStats queryStatsForPackage(String,String,UserHandle)>    ---->    
<android.net.Proxy: int getPort(Context)>
/**
 * Return the proxy port set by the user.
 * @param ctx A Context used to get the settings for the proxy port.
 * @return The port number to use or -1 if no proxy is to be used.
 * @deprecated Use standard java vm proxy values to find the host, port
 * and exclusion list.  This call ignores the exclusion list.
 */
====>[PUBLIC]<android.net.Proxy: int getPort(Context)>    ---->    
<android.app.Notification.BigPictureStyle: void <init>(Builder)>
/**
 * @deprecated use {@code BigPictureStyle()}.
 */
====>[PUBLIC]<android.app.Notification.BigPictureStyle: void <init>(Builder)>    ---->    
<android.hardware.radio.RadioTuner: int getProgramInformation(ProgramInfo[])>
/**
 * Get current station information.
 * @param info a ProgramInfo array of lengh 1 where the information is returned.
 * @return
 * <ul>
 * <li>{@link RadioManager#STATUS_OK} in case of success, </li>
 * <li>{@link RadioManager#STATUS_ERROR} in case of unspecified error, </li>
 * <li>{@link RadioManager#STATUS_NO_INIT} if the native service cannot be reached, </li>
 * <li>{@link RadioManager#STATUS_BAD_VALUE} if parameters are invalid, </li>
 * <li>{@link RadioManager#STATUS_INVALID_OPERATION} if the call is out of sequence, </li>
 * <li>{@link RadioManager#STATUS_DEAD_OBJECT} if the binder transaction to the native
 * service fails, </li>
 * </ul>
 * @deprecated Use {@link onProgramInfoChanged} callback instead.
 */
====>[PUBLIC]<android.hardware.radio.RadioTuner: int getProgramInformation(ProgramInfo[])>    ---->    onProgramInfoChanged
<android.graphics.Canvas: int saveLayer(RectF,Paint,int)>
/**
 * This behaves the same as save(), but in addition it allocates and
 * redirects drawing to an offscreen bitmap.
 * <p class="note"><strong>Note:</strong> this method is very expensive,
 * incurring more than double rendering cost for contained content. Avoid
 * using this method, especially if the bounds provided are large. It is
 * recommended to use a {@link android.view.View#LAYER_TYPE_HARDWARE hardware layer} on a View
 * to apply an xfermode, color filter, or alpha, as it will perform much
 * better than this method.
 * <p>
 * All drawing calls are directed to a newly allocated offscreen bitmap.
 * Only when the balancing call to restore() is made, is that offscreen
 * buffer drawn back to the current target of the Canvas (either the
 * screen, it's target Bitmap, or the previous layer).
 * <p>
 * Attributes of the Paint - {@link Paint#getAlpha() alpha},
 * {@link Paint#getXfermode() Xfermode}, and
 * {@link Paint#getColorFilter() ColorFilter} are applied when the
 * offscreen bitmap is drawn back when restore() is called.
 *
 * As of API Level API level {@value Build.VERSION_CODES#P} the only valid
 * {@code saveFlags} is {@link #ALL_SAVE_FLAG}.  All other flags are ignored.
 *
 * @deprecated Use {@link #saveLayer(RectF, Paint)} instead.
 * @param bounds May be null. The maximum size the offscreen bitmap
 * needs to be (in local coordinates)
 * @param paint  This is copied, and is applied to the offscreen when
 * restore() is called.
 * @param saveFlags see _SAVE_FLAG constants, generally {@link #ALL_SAVE_FLAG} is recommended
 * for performance reasons.
 * @return       value to pass to restoreToCount() to balance this save()
 */
====>[PUBLIC]<android.graphics.Canvas: int saveLayer(RectF,Paint,int)>    ---->    #saveLayer(RectF, Paint)
<android.webkit.CookieManager: void removeSessionCookie()>
/**
 * Removes all session cookies, which are cookies without an expiration
 * date.
 * @deprecated use {@link #removeSessionCookies(ValueCallback)} instead.
 */
====>[PUBLIC]<android.webkit.CookieManager: void removeSessionCookie()>    ---->    #removeSessionCookies(ValueCallback)
<android.security.keystore.recovery.WrappedApplicationKey: void <init>(String,byte[])>
/**
 * @deprecated Use the builder instead.
 * @hide
 */
====>[HIDDEN]<android.security.keystore.recovery.WrappedApplicationKey: void <init>(String,byte[])>    ---->    the builder
<android.net.wifi.WifiManager: void restoreSupplicantBackupData(byte[],byte[])>
/**
 * Restore state from the older version of back up data.
 * The old backup data was essentially a backup of wpa_supplicant.conf
 * and ipconfig.txt file.
 * @deprecated this is no longer supported.
 * @hide
 */
====>[HIDDEN]<android.net.wifi.WifiManager: void restoreSupplicantBackupData(byte[],byte[])>    ---->    
<android.net.NetworkInfo: void setIsAvailable(boolean)>
/**
 * Sets if the network is available, ie, if the connectivity is possible.
 * @param isAvailable the new availability value.
 * @deprecated Use {@link NetworkCapabilities} instead
 *
 * @hide
 */
====>[HIDDEN]<android.net.NetworkInfo: void setIsAvailable(boolean)>    ---->    NetworkCapabilities
<android.view.ViewGroup: boolean isChildrenDrawnWithCacheEnabled()>
/**
 * Indicates whether the ViewGroup is currently drawing its children using
 * their drawing cache.
 *
 * @return true if children should be drawn with their cache, false otherwise
 *
 * @see #setAlwaysDrawnWithCacheEnabled(boolean)
 * @see #setChildrenDrawnWithCacheEnabled(boolean)
 *
 * @deprecated As of {@link android.os.Build.VERSION_CODES#M}, this property is ignored.
 * Child views may no longer be forced to cache their rendering state by their parents.
 * Use {@link View#setLayerType(int, Paint)} on individual Views instead.
 */
====>[PUBLIC]<android.view.ViewGroup: boolean isChildrenDrawnWithCacheEnabled()>    ---->    View#setLayerType(int, Paint)
<android.telephony.SignalStrength: int getWcdmaLevel()>
/**
 * Get WCDMA as level 0..4
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthWcdma#getDbm}.
 *
 * @see android.telephony#CellSignalStrengthWcdma
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getWcdmaLevel()>    ---->    android.telephony#CellSignalStrengthWcdma
<android.widget.SimpleCursorAdapter: void <init>(Context,int,Cursor,String[],int[])>
/**
 * Constructor the enables auto-requery.
 *
 * @deprecated This option is discouraged, as it results in Cursor queries
 * being performed on the application's UI thread and thus can cause poor
 * responsiveness or even Application Not Responding errors.  As an alternative,
 * use {@link android.app.LoaderManager} with a {@link android.content.CursorLoader}.
 */
====>[PUBLIC]<android.widget.SimpleCursorAdapter: void <init>(Context,int,Cursor,String[],int[])>    ---->    android.app.LoaderManager
<android.widget.FrameLayout: boolean getConsiderGoneChildrenWhenMeasuring()>
/**
 * Determines whether all children, or just those in the VISIBLE or
 * INVISIBLE state, are considered when measuring.
 *
 * @return Whether all children are considered when measuring.
 *
 * @deprecated This method is deprecated in favor of
 * {@link #getMeasureAllChildren() getMeasureAllChildren()}, which was
 * renamed for consistency with
 * {@link #setMeasureAllChildren(boolean) setMeasureAllChildren()}.
 */
====>[PUBLIC]<android.widget.FrameLayout: boolean getConsiderGoneChildrenWhenMeasuring()>    ---->    #getMeasureAllChildren() getMeasureAllChildren()
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: int getCustomSizePreset()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.WearableExtender: int getCustomSizePreset()>
/**
 * Get the custom size preset for the display of this notification out of the available
 * presets found in {@link android.app.Notification.WearableExtender}, e.g.
 * {@link #SIZE_LARGE}.
 * <p>Some custom size presets are only applicable for custom display notifications created
 * using {@link #setDisplayIntent}. Check the documentation for the preset in question.
 * See also {@link #setCustomContentHeight} and {@link #setCustomSizePreset}.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: int getCustomSizePreset()>    ---->    
<android.widget.CalendarView: int getWeekSeparatorLineColor()>
/**
 * Gets the color for the separator line between weeks.
 *
 * @return The week separator color.
 *
 * @attr ref android.R.styleable#CalendarView_weekSeparatorLineColor
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: int getWeekSeparatorLineColor()>    ---->    
<android.app.Activity: void setPictureInPictureArgs(PictureInPictureArgs)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.Activity: void setPictureInPictureArgs(PictureInPictureArgs)>    ---->    
Inconsistency (Non-Documentation):<android.view.Window: void setTitleColor(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/view/Window.java
<android.view.Window: void setTitleColor(int)>

====>[PUBLIC]<android.view.Window: void setTitleColor(int)>    ---->    
<android.test.TouchUtils: int dragViewBy(InstrumentationTestCase,View,int,int,int)>
/**
 * Simulate touching a view and dragging it by the specified amount.
 *
 * @param test The test case that is being run
 * @param v The view that should be dragged
 * @param gravity Which part of the view to use for the initial down event. A combination of
 * (TOP, CENTER_VERTICAL, BOTTOM) and (LEFT, CENTER_HORIZONTAL, RIGHT)
 * @param deltaX Amount to drag horizontally in pixels
 * @param deltaY Amount to drag vertically in pixels
 *
 * @return distance in pixels covered by the drag
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: int dragViewBy(InstrumentationTestCase,View,int,int,int)>    ---->    android.test.ActivityInstrumentationTestCase2
<android.net.wifi.WifiManager: boolean disableNetwork(int)>
/**
 * Disable a configured network. The specified network will not be
 * a candidate for associating. This may result in the asynchronous
 * delivery of state change events.
 *
 * Applications are not allowed to disable networks created by other
 * applications.
 *
 * @param netId the ID of the network as returned by {@link #addNetwork} or {@link
 * #getConfiguredNetworks}.
 * @return {@code true} if the operation succeeded
 *
 * @deprecated
 * a) See {@link WifiNetworkSpecifier.Builder#build()} for new
 * mechanism to trigger connection to a Wi-Fi network.
 * b) See {@link #addNetworkSuggestions(List)},
 * {@link #removeNetworkSuggestions(List)} for new API to add Wi-Fi networks for consideration
 * when auto-connecting to wifi.
 * <b>Compatibility Note:</b> For applications targeting
 * {@link android.os.Build.VERSION_CODES#Q} or above, this API will always return false.
 */
====>[PUBLIC]<android.net.wifi.WifiManager: boolean disableNetwork(int)>    ---->    WifiNetworkSpecifier.Builder#build()
<android.widget.DatePicker: void setSpinnersShown(boolean)>
/**
 * Sets whether the spinners are shown.
 * <p>
 * Calling this method has no effect when the
 * {@link android.R.styleable#DatePicker_datePickerMode} attribute is set
 * to {@code calendar}.
 *
 * @param shown {@code true} to show the spinners, {@code false} to hide
 * them
 * @deprecated Not supported by Material-style {@code calendar} mode
 */
====>[PUBLIC]<android.widget.DatePicker: void setSpinnersShown(boolean)>    ---->    
<com.android.internal.app.SimpleIconFactory: Bitmap createAppBadgedIconBitmap(Drawable,Bitmap)>
/**
 * Creates bitmap using the source drawable and flattened pre-rendered app icon.
 * The bitmap is visually normalized with other icons and has enough spacing to add shadow.
 * This is custom functionality added to Iconloaderlib that will need to be ported.
 *
 * @param icon                      source of the icon associated with a user that has no badge
 * @param renderedAppIcon           pre-rendered app icon to use as a badge, likely the output
 * of createUserBadgedIconBitmap for user 0
 * @return a bitmap suitable for disaplaying as an icon at various system UIs.
 *
 * @deprecated Do not use, functionality will be replaced by iconloader lib eventually.
 */
====>[PUBLIC]<com.android.internal.app.SimpleIconFactory: Bitmap createAppBadgedIconBitmap(Drawable,Bitmap)>    ---->    
<android.webkit.UrlInterceptRegistry: CacheResult getSurrogate(String,Map<String, String>)>
/**
 * Given an url, returns the CacheResult of the first
 * UrlInterceptHandler interested, or {@code null} if none are.
 *
 * @return A CacheResult containing surrogate content.
 *
 * @hide
 * @deprecated This class was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.UrlInterceptRegistry: CacheResult getSurrogate(String,Map<String, String>)>    ---->    
<android.app.ActivityManager: void clearGrantedUriPermissions(String)>
/**
 * Permits an application to clear the persistent URI permissions granted to another.
 *
 * <p>Typically called by Settings, requires {@code CLEAR_APP_GRANTED_URI_PERMISSIONS}.
 *
 * @param packageName application to clear its granted permissions
 *
 * @hide
 * @deprecated use {@link UriGrantsManager#clearGrantedUriPermissions(String)} instead.
 */
====>[HIDDEN]<android.app.ActivityManager: void clearGrantedUriPermissions(String)>    ---->    UriGrantsManager#clearGrantedUriPermissions(String)
<android.view.View: void invalidate(int,int,int,int)>
/**
 * Mark the area defined by the rect (l,t,r,b) as needing to be drawn. The
 * coordinates of the dirty rect are relative to the view. If the view is
 * visible, {@link #onDraw(android.graphics.Canvas)} will be called at some
 * point in the future.
 * <p>
 * This must be called from a UI thread. To call from a non-UI thread, call
 * {@link #postInvalidate()}.
 *
 * @param l the left position of the dirty region
 * @param t the top position of the dirty region
 * @param r the right position of the dirty region
 * @param b the bottom position of the dirty region
 *
 * @deprecated The switch to hardware accelerated rendering in API 14 reduced
 * the importance of the dirty rectangle. In API 21 the given rectangle is
 * ignored entirely in favor of an internally-calculated area instead.
 * Because of this, clients are encouraged to just call {@link #invalidate()}.
 */
====>[PUBLIC]<android.view.View: void invalidate(int,int,int,int)>    ---->    #invalidate()
<android.app.PictureInPictureArgs: void setSourceRectHintInsets(Rect)>
/**
 * Sets the insets to be used with the source rect hint bounds.
 * @hide
 */
====>[HIDDEN]<android.app.PictureInPictureArgs: void setSourceRectHintInsets(Rect)>    ---->    
<android.content.res.Resources: ColorStateList getColorStateList(int)>
/**
 * Returns a color state list associated with a particular resource ID. The
 * resource may contain either a single raw color value or a complex
 * {@link ColorStateList} holding multiple possible colors.
 *
 * @param id The desired resource identifier of a {@link ColorStateList},
 * as generated by the aapt tool. This integer encodes the
 * package, type, and resource entry. The value 0 is an invalid
 * identifier.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does
 * not exist.
 *
 * @return A ColorStateList object containing either a single solid color
 * or multiple colors that can be selected based on a state.
 * @deprecated Use {@link #getColorStateList(int, Theme)} instead.
 */
====>[PUBLIC]<android.content.res.Resources: ColorStateList getColorStateList(int)>    ---->    #getColorStateList(int, Theme)
<android.provider.Settings.System: boolean getShowGTalkServiceStatus(ContentResolver)>
/**
 * @deprecated - Do not use
 */
====>[PUBLIC]<android.provider.Settings.System: boolean getShowGTalkServiceStatus(ContentResolver)>    ---->    
<android.graphics.drawable.Drawable: int getOpacity()>
/**
 * Return the opacity/transparency of this Drawable.  The returned value is
 * one of the abstract format constants in
 * {@link android.graphics.PixelFormat}:
 * {@link android.graphics.PixelFormat#UNKNOWN},
 * {@link android.graphics.PixelFormat#TRANSLUCENT},
 * {@link android.graphics.PixelFormat#TRANSPARENT}, or
 * {@link android.graphics.PixelFormat#OPAQUE}.
 *
 * <p>An OPAQUE drawable is one that draws all all content within its bounds, completely
 * covering anything behind the drawable. A TRANSPARENT drawable is one that draws nothing
 * within its bounds, allowing everything behind it to show through. A TRANSLUCENT drawable
 * is a drawable in any other state, where the drawable will draw some, but not all,
 * of the content within its bounds and at least some content behind the drawable will
 * be visible. If the visibility of the drawable's contents cannot be determined, the
 * safest/best return value is TRANSLUCENT.
 *
 * <p>Generally a Drawable should be as conservative as possible with the
 * value it returns.  For example, if it contains multiple child drawables
 * and only shows one of them at a time, if only one of the children is
 * TRANSLUCENT and the others are OPAQUE then TRANSLUCENT should be
 * returned.  You can use the method {@link #resolveOpacity} to perform a
 * standard reduction of two opacities to the appropriate single output.
 *
 * <p>Note that the returned value does not necessarily take into account a
 * custom alpha or color filter that has been applied by the client through
 * the {@link #setAlpha} or {@link #setColorFilter} methods. Some subclasses,
 * such as {@link BitmapDrawable}, {@link ColorDrawable}, and {@link GradientDrawable},
 * do account for the value of {@link #setAlpha}, but the general behavior is dependent
 * upon the implementation of the subclass.
 *
 * @deprecated This method is no longer used in graphics optimizations
 *
 * @return int The opacity class of the Drawable.
 *
 * @see android.graphics.PixelFormat
 */
====>[PUBLIC]<android.graphics.drawable.Drawable: int getOpacity()>    ---->    android.graphics.PixelFormat
Inconsistency (Non-Documentation):<android.app.ContextImpl: int getWallpaperDesiredMinimumHeight()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/ContextImpl.java
<android.app.ContextImpl: int getWallpaperDesiredMinimumHeight()>

====>[PUBLIC]<android.app.ContextImpl: int getWallpaperDesiredMinimumHeight()>    ---->    
<android.telephony.PhoneNumberUtils: String formatNumber(String,int)>
/**
 * Formats the given number with the given formatting type. Currently
 * {@link #FORMAT_NANP} and {@link #FORMAT_JAPAN} are supported as a formating type.
 *
 * @param source the phone number to format
 * @param defaultFormattingType The default formatting rules to apply if the number does
 * not begin with +[country_code]
 * @return The phone number formatted with the given formatting type.
 *
 * @hide
 * @deprecated Use link #formatNumber(String phoneNumber, String defaultCountryIso) instead
 */
====>[HIDDEN]<android.telephony.PhoneNumberUtils: String formatNumber(String,int)>    ---->    link #formatNumber(String phoneNumber, String defaultCountryIso)
<android.telephony.SignalStrength: int getCdmaDbm()>
/**
 * Get the CDMA RSSI value in dBm
 *
 * @return the CDMA RSSI value or {@link #INVALID} if invalid
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthCdma#getCdmaDbm}.
 *
 * @see android.telephony#CellSignalStrengthCdma
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 */
====>[PUBLIC]<android.telephony.SignalStrength: int getCdmaDbm()>    ---->    android.telephony#CellSignalStrengthCdma
<android.view.Surface: void unlockCanvas(Canvas)>
/**
 * @deprecated This API has been removed and is not supported.  Do not use.
 */
====>[PUBLIC]<android.view.Surface: void unlockCanvas(Canvas)>    ---->    
<android.app.backup.BackupManager: int requestRestore(RestoreObserver)>
/**
 * @deprecated Applications shouldn't request a restore operation using this method. In Android
 * P and later, this method is a no-op.
 *
 * <p>Restore the calling application from backup. The data will be restored from the
 * current backup dataset if the application has stored data there, or from
 * the dataset used during the last full device setup operation if the current
 * backup dataset has no matching data.  If no backup data exists for this application
 * in either source, a non-zero value is returned.
 *
 * <p>If this method returns zero (meaning success), the OS attempts to retrieve a backed-up
 * dataset from the remote transport, instantiate the application's backup agent, and pass the
 * dataset to the agent's
 * {@link android.app.backup.BackupAgent#onRestore(BackupDataInput, int, android.os.ParcelFileDescriptor) onRestore()}
 * method.
 *
 * <p class="caution">Unlike other restore operations, this method doesn't terminate the
 * application after the restore. The application continues running to receive the
 * {@link RestoreObserver} callbacks on the {@code observer} argument. Full backups use an
 * {@link android.app.Application Application} base class while key-value backups use the
 * application subclass declared in the AndroidManifest.xml {@code <application>} tag.
 *
 * @param observer The {@link RestoreObserver} to receive callbacks during the restore
 * operation. This must not be null.
 *
 * @return Zero on success; nonzero on error.
 */
====>[PUBLIC]<android.app.backup.BackupManager: int requestRestore(RestoreObserver)>    ---->    android.app.backup.BackupAgent#onRestore(BackupDataInput, int, android.os.ParcelFileDescriptor) onRestore()
Inconsistency (Non-Documentation):<android.opengl.EGL14: EGLSurface eglCreatePixmapSurface(EGLDisplay,EGLConfig,int,int[],int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//opengl/java/android/opengl/EGL14.java
<android.opengl.EGL14: EGLSurface eglCreatePixmapSurface(EGLDisplay,EGLConfig,int,int[],int)>

====>[PUBLIC]<android.opengl.EGL14: EGLSurface eglCreatePixmapSurface(EGLDisplay,EGLConfig,int,int[],int)>    ---->    
<android.provider.MediaStore: void trash(Context,Uri,long)>
/**
 * Mark the given item as being "trashed", meaning it should be deleted at
 * some point in the future. This is a more gentle operation than simply
 * calling {@link ContentResolver#delete(Uri, String, String[])}, which
 * would take effect immediately.
 * <p>
 * This method preserves trashed items for at least the given timeout before
 * erasing them, giving the user a chance to untrash the item.
 *
 * @see MediaColumns#IS_TRASHED
 * @see MediaStore#setIncludeTrashed(Uri)
 * @see MediaStore#trash(Context, Uri)
 * @see MediaStore#untrash(Context, Uri)
 * @removed
 */
====>[HIDDEN]<android.provider.MediaStore: void trash(Context,Uri,long)>    ---->    
<android.hardware.usb.UsbRequest: boolean queue(ByteBuffer,int)>
/**
 * Queues the request to send or receive data on its endpoint.
 * <p>For OUT endpoints, the given buffer data will be sent on the endpoint. For IN endpoints,
 * the endpoint will attempt to read the given number of bytes into the specified buffer. If the
 * queueing operation is successful, return true. The result will be returned via
 * {@link UsbDeviceConnection#requestWait}</p>
 *
 * @param buffer the buffer containing the bytes to write, or location to store the results of a
 * read. Position and array offset will be ignored and assumed to be 0. Limit and
 * capacity will be ignored. Once the request
 * {@link UsbDeviceConnection#requestWait() is processed} the position will be set
 * to the number of bytes read/written.
 * @param length number of bytes to read or write. Before {@value Build.VERSION_CODES#P}, a
 * value larger than 16384 bytes would be truncated down to 16384. In API
 * {@value Build.VERSION_CODES#P} and after, any value of length is valid.
 *
 * @return true if the queueing operation succeeded
 *
 * @deprecated Use {@link #queue(ByteBuffer)} instead.
 */
====>[PUBLIC]<android.hardware.usb.UsbRequest: boolean queue(ByteBuffer,int)>    ---->    #queue(ByteBuffer)
<android.webkit.WebChromeClient: void onReachedMaxAppCacheSize(long,long,QuotaUpdater)>
/**
 * Notify the host application that the Application Cache has reached the
 * maximum size. The client must respond by invoking the
 * {@link WebStorage.QuotaUpdater#updateQuota(long) updateQuota(long)}
 * method of the supplied {@link WebStorage.QuotaUpdater} instance. The
 * minimum value that can be set for the new quota is the current quota. The
 * default implementation responds with the current quota, so the quota will
 * not be increased.
 * @param requiredStorage The amount of storage required by the Application
 * Cache operation that triggered this notification,
 * in bytes.
 * @param quota the current maximum Application Cache size, in bytes
 * @param quotaUpdater An instance of {@link WebStorage.QuotaUpdater} which
 * must be used to inform the WebView of the new quota.
 * @deprecated This method is no longer called; WebView now uses the HTML5 / JavaScript Quota
 * Management API.
 */
====>[PUBLIC]<android.webkit.WebChromeClient: void onReachedMaxAppCacheSize(long,long,QuotaUpdater)>    ---->    
<android.provider.MediaStore: void trash(Context,Uri)>
/**
 * Mark the given item as being "trashed", meaning it should be deleted at
 * some point in the future. This is a more gentle operation than simply
 * calling {@link ContentResolver#delete(Uri, String, String[])}, which
 * would take effect immediately.
 * <p>
 * This method preserves trashed items for at least 48 hours before erasing
 * them, giving the user a chance to untrash the item.
 *
 * @see MediaColumns#IS_TRASHED
 * @see MediaStore#setIncludeTrashed(Uri)
 * @see MediaStore#trash(Context, Uri)
 * @see MediaStore#untrash(Context, Uri)
 * @removed
 */
====>[HIDDEN]<android.provider.MediaStore: void trash(Context,Uri)>    ---->    
<android.accounts.AccountManager: AccountManagerFuture<Boolean> removeAccountAsUser(Account,AccountManagerCallback<Boolean>,Handler,UserHandle)>
/**
 * @see #removeAccount(Account, AccountManagerCallback, Handler)
 * @hide
 * @deprecated use
 * {@link #removeAccountAsUser(Account, Activity, AccountManagerCallback, Handler)}
 * instead
 */
====>[HIDDEN]<android.accounts.AccountManager: AccountManagerFuture<Boolean> removeAccountAsUser(Account,AccountManagerCallback<Boolean>,Handler,UserHandle)>    ---->    #removeAccountAsUser(Account, Activity, AccountManagerCallback, Handler)
<android.app.ActionBar: Tab getTabAt(int)>
/**
 * Returns the tab at the specified index.
 *
 * @param index Index value in the range 0-get
 * @return
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: Tab getTabAt(int)>    ---->    
<android.view.GestureDetector: void <init>(OnGestureListener)>
/**
 * Creates a GestureDetector with the supplied listener.
 * You may only use this constructor from a UI thread (this is the usual situation).
 * @see android.os.Handler#Handler()
 *
 * @param listener the listener invoked for all the callbacks, this must
 * not be null.
 *
 * @throws NullPointerException if {@code listener} is null.
 *
 * @deprecated Use {@link #GestureDetector(android.content.Context,
 * android.view.GestureDetector.OnGestureListener)} instead.
 */
====>[PUBLIC]<android.view.GestureDetector: void <init>(OnGestureListener)>    ---->    #GestureDetector(android.content.Context,  android.view.GestureDetector.OnGestureListener)
<com.android.server.notification.NotificationRecord: int getUserId()>
/**
 * @deprecated Use {@link #getUser()} instead.
 */
====>[PUBLIC]<com.android.server.notification.NotificationRecord: int getUserId()>    ---->    #getUser()
<android.view.textservice.SpellCheckerSubtype: void <init>(int,String,String)>
/**
 * Constructor.
 * @param nameId The name of the subtype
 * @param locale The locale supported by the subtype
 * @param extraValue The extra value of the subtype
 *
 * @deprecated There is no public API that requires developers to directly instantiate custom
 * {@link SpellCheckerSubtype} objects right now.  Hence only the system is expected to be able
 * to instantiate {@link SpellCheckerSubtype} object.
 */
====>[PUBLIC]<android.view.textservice.SpellCheckerSubtype: void <init>(int,String,String)>    ---->    SpellCheckerSubtype
<android.app.Notification.Builder: Builder setVibrate(long[])>
/**
 * Set the vibration pattern to use.
 *
 * See {@link android.os.Vibrator#vibrate(long[], int)} for a discussion of the
 * <code>pattern</code> parameter.
 *
 * <p>
 * A notification that vibrates is more likely to be presented as a heads-up notification.
 * </p>
 *
 * @deprecated use {@link NotificationChannel#setVibrationPattern(long[])} instead.
 * @see Notification#vibrate
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder setVibrate(long[])>    ---->    NotificationChannel#setVibrationPattern(long[])
<android.app.ActivityManagerNative: void noteWakeupAlarm(PendingIntent,int,String,String)>
/**
 * @deprecated use ActivityManager.noteWakeupAlarm instead.
 */
====>[PUBLIC]<android.app.ActivityManagerNative: void noteWakeupAlarm(PendingIntent,int,String,String)>    ---->    ActivityManager.noteWakeupAlarm
<android.telephony.TelephonyManager: List<NeighboringCellInfo> getNeighboringCellInfo()>
/**
 * Returns the neighboring cell information of the device.
 *
 * @return List of NeighboringCellInfo or null if info unavailable.
 *
 * @removed
 * @deprecated Use {@link #getAllCellInfo} which returns a superset of the information
 * from NeighboringCellInfo, including LTE cell information.
 */
====>[HIDDEN]<android.telephony.TelephonyManager: List<NeighboringCellInfo> getNeighboringCellInfo()>    ---->    #getAllCellInfo
<android.net.http.SslCertificate: void <init>(String,String,Date,Date)>
/**
 * Creates a new SSL certificate object
 * @param issuedTo The entity this certificate is issued to
 * @param issuedBy The entity that issued this certificate
 * @param validNotBefore The not-before date from the certificate validity period
 * @param validNotAfter The not-after date from the certificate validity period
 * @deprecated Use {@link #SslCertificate(X509Certificate)}
 */
====>[PUBLIC]<android.net.http.SslCertificate: void <init>(String,String,Date,Date)>    ---->    #SslCertificate(X509Certificate)
<android.hardware.fingerprint.FingerprintManager: boolean isHardwareDetected()>
/**
 * Determine if fingerprint hardware is present and functional.
 *
 * @return true if hardware is present and functional, false otherwise.
 * @deprecated See {@link BiometricPrompt} and
 * {@link FingerprintManager#FINGERPRINT_ERROR_HW_UNAVAILABLE}
 */
====>[PUBLIC]<android.hardware.fingerprint.FingerprintManager: boolean isHardwareDetected()>    ---->    BiometricPrompt
<android.os.Debug: void resetGlobalExternalFreedCount()>
/**
 * This method exists for compatibility and has no effect.
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: void resetGlobalExternalFreedCount()>    ---->    
<android.webkit.WebView: void savePassword(String,String,String)>
/**
 * Sets a username and password pair for the specified host. This data is
 * used by the WebView to autocomplete username and password fields in web
 * forms. Note that this is unrelated to the credentials used for HTTP
 * authentication.
 *
 * @param host the host that required the credentials
 * @param username the username for the given host
 * @param password the password for the given host
 * @see WebViewDatabase#clearUsernamePassword
 * @see WebViewDatabase#hasUsernamePassword
 * @deprecated Saving passwords in WebView will not be supported in future versions.
 */
====>[PUBLIC]<android.webkit.WebView: void savePassword(String,String,String)>    ---->    
<android.graphics.Canvas: int saveLayer(float,float,float,float,Paint,int)>
/**
 * Helper version of saveLayer() that takes 4 values rather than a RectF.
 *
 * As of API Level API level {@value Build.VERSION_CODES#P} the only valid
 * {@code saveFlags} is {@link #ALL_SAVE_FLAG}.  All other flags are ignored.
 *
 * @deprecated Use {@link #saveLayer(float, float, float, float, Paint)} instead.
 */
====>[PUBLIC]<android.graphics.Canvas: int saveLayer(float,float,float,float,Paint,int)>    ---->    #saveLayer(float, float, float, float, Paint)
<android.telecom.Connection: void onAudioStateChanged(AudioState)>
/**
 * Notifies this Connection that the {@link #getAudioState()} property has a new value.
 *
 * @param state The new connection audio state.
 * @deprecated Use {@link #onCallAudioStateChanged(CallAudioState)} instead.
 * @hide
 */
====>[HIDDEN]<android.telecom.Connection: void onAudioStateChanged(AudioState)>    ---->    #onCallAudioStateChanged(CallAudioState)
<android.media.MediaDrm: void release()>
/**
 * @deprecated replaced by {@link #close()}.
 */
====>[PUBLIC]<android.media.MediaDrm: void release()>    ---->    #close()
<android.telephony.SignalStrength: void setFromNotifierBundle(Bundle)>
/**
 * Set SignalStrength based on intent notifier map
 *
 * @param m intent notifier map
 *
 * @deprecated this method relies on non-stable implementation details, and full access to
 * internal storage is available via {@link getCellSignalStrengths()}.
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: void setFromNotifierBundle(Bundle)>    ---->    getCellSignalStrengths()
<android.app.Notification.MessagingStyle.Message: CharSequence getSender()>
/**
 * Get the text used to display the contact's name in the messaging experience
 *
 * @deprecated use {@link #getSenderPerson()}
 */
====>[PUBLIC]<android.app.Notification.MessagingStyle.Message: CharSequence getSender()>    ---->    #getSenderPerson()
<android.telephony.data.ApnSetting.Builder: Builder setProxyAddress(InetAddress)>
/**
 * Sets the address of an HTTP proxy for the APN. The proxy address can be an IP address or
 * hostname. If {@code proxy} contains both an IP address and hostname, this method ignores
 * the IP address.
 *
 * <p>The {@link java.net.InetAddress} methods
 * {@link java.net.InetAddress#getAllByName getAllByName()} require DNS for hostname
 * resolution. To avoid this requirement when setting a hostname, call
 * {@link java.net.InetAddress#getByAddress(java.lang.String, byte[])} with both the
 * hostname and a dummy IP address. See {@link ApnSetting.Builder above} for an example.
 *
 * @param proxy the proxy address to set for the APN
 * @deprecated use {@link #setProxyAddress(String)} instead.
 */
====>[PUBLIC]<android.telephony.data.ApnSetting.Builder: Builder setProxyAddress(InetAddress)>    ---->    #setProxyAddress(String)
<android.renderscript.Mesh.Builder: Builder addVertexType(Element,int)>
/**
 * @deprecated in API 16
 * Adds a vertex data type to the builder object
 *
 * @param e element describing the vertex data layout
 * @param size number of elements in the buffer
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.Builder: Builder addVertexType(Element,int)>    ---->    
<android.bluetooth.BluetoothAdapter: BluetoothActivityEnergyInfo getControllerActivityEnergyInfo(int)>
/**
 * Return the record of {@link BluetoothActivityEnergyInfo} object that
 * has the activity and energy info. This can be used to ascertain what
 * the controller has been up to, since the last sample.
 *
 * @param updateType Type of info, cached vs refreshed.
 * @return a record with {@link BluetoothActivityEnergyInfo} or null if report is unavailable or
 * unsupported
 * @hide
 * @deprecated use the asynchronous {@link #requestControllerActivityEnergyInfo(ResultReceiver)}
 * instead.
 */
====>[HIDDEN]<android.bluetooth.BluetoothAdapter: BluetoothActivityEnergyInfo getControllerActivityEnergyInfo(int)>    ---->    #requestControllerActivityEnergyInfo(ResultReceiver)
<android.net.wifi.WifiManager: boolean getEnableAutoJoinWhenAssociated()>
/**
 * Deprecated
 * returns false
 * @hide
 * @deprecated
 */
====>[HIDDEN]<android.net.wifi.WifiManager: boolean getEnableAutoJoinWhenAssociated()>    ---->    
Inconsistency (Non-Documentation):<android.app.ContextImpl: int getWallpaperDesiredMinimumWidth()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/ContextImpl.java
<android.app.ContextImpl: int getWallpaperDesiredMinimumWidth()>

====>[PUBLIC]<android.app.ContextImpl: int getWallpaperDesiredMinimumWidth()>    ---->    
<android.provider.MediaStore: Set<String> getAllVolumeNames(Context)>
/**
 * @removed
 */
====>[HIDDEN]<android.provider.MediaStore: Set<String> getAllVolumeNames(Context)>    ---->    
<android.database.sqlite.SQLiteQueryBuilder: String buildQuery(String[],String,String[],String,String,String,String)>
/**
 * @deprecated This method's signature is misleading since no SQL parameter
 * substitution is carried out.  The selection arguments parameter does not get
 * used at all.  To avoid confusion, call
 * {@link #buildQuery(String[], String, String, String, String, String)} instead.
 */
====>[PUBLIC]<android.database.sqlite.SQLiteQueryBuilder: String buildQuery(String[],String,String[],String,String,String,String)>    ---->    #buildQuery(String[], String, String, String, String, String)
<android.renderscript.Mesh.TriangleMeshBuilder: Mesh create(boolean)>
/**
 * @deprecated in API 16
 * Creates the mesh object from the current state of the builder
 *
 * @param uploadToBufferObject specifies whether the vertex data
 * is to be uploaded into the buffer
 * object indicating that it's likely
 * not going to be modified and
 * rendered many times.
 * Alternatively, it indicates the
 * mesh data will be updated
 * frequently and remain in script
 * accessible memory
 */
====>[PUBLIC]<android.renderscript.Mesh.TriangleMeshBuilder: Mesh create(boolean)>    ---->    
Inconsistency (Non-Documentation):<android.app.Activity: void enterPictureInPictureMode()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Activity.java
<android.app.Activity: void enterPictureInPictureMode()>
/**
 * Puts the activity in picture-in-picture mode if possible in the current system state. Any
 * prior calls to {@link #setPictureInPictureParams(PictureInPictureParams)} will still apply
 * when entering picture-in-picture through this call.
 *
 * @see #enterPictureInPictureMode(PictureInPictureParams)
 * @see android.R.attr#supportsPictureInPicture
 */
====>[PUBLIC]<android.app.Activity: void enterPictureInPictureMode()>    ---->    
<android.content.pm.LauncherApps: int getShortcutIconResId(String,String,UserHandle)>
/**
 * @hide kept for testing.
 */
====>[HIDDEN]<android.content.pm.LauncherApps: int getShortcutIconResId(String,String,UserHandle)>    ---->    
<android.view.inputmethod.InputMethodManager: boolean switchToLastInputMethod(IBinder)>
/**
 * Force switch to the last used input method and subtype. If the last input method didn't have
 * any subtypes, the framework will simply switch to the last input method with no subtype
 * specified.
 * @param imeToken Supplies the identifying token given to an input method when it was started,
 * which allows it to perform this operation on itself.
 * @return true if the current input method and subtype was successfully switched to the last
 * used input method and subtype.
 * @deprecated Use {@link InputMethodService#switchToPreviousInputMethod()} instead. This method
 * was intended for IME developers who should be accessing APIs through the service. APIs in
 * this class are intended for app developers interacting with the IME.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodManager: boolean switchToLastInputMethod(IBinder)>    ---->    InputMethodService#switchToPreviousInputMethod()
<android.os.Bundle: void putIBinder(String,IBinder)>
/**
 * Inserts an IBinder value into the mapping of this Bundle, replacing
 * any existing value for the given key.  Either key or value may be null.
 *
 * @param key a String, or null
 * @param value an IBinder object, or null
 *
 * @deprecated
 * @hide This is the old name of the function.
 */
====>[HIDDEN]<android.os.Bundle: void putIBinder(String,IBinder)>    ---->    
<android.app.ActivityManagerNative: void noteAlarmFinish(PendingIntent,int,String)>
/**
 * @deprecated use ActivityManager.noteAlarmFinish instead.
 */
====>[PUBLIC]<android.app.ActivityManagerNative: void noteAlarmFinish(PendingIntent,int,String)>    ---->    ActivityManager.noteAlarmFinish
<android.os.Debug: void resetThreadExternalAllocSize()>
/**
 * This method exists for compatibility and has no effect.
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: void resetThreadExternalAllocSize()>    ---->    
<android.content.Intent: Intent putExtra(String,IBinder)>
/**
 * Add extended data to the intent.  The name must include a package
 * prefix, for example the app com.android.contacts would use names
 * like "com.android.contacts.ShowAll".
 *
 * @param name The name of the extra data, with package prefix.
 * @param value The IBinder data value.
 *
 * @return Returns the same Intent object, for chaining multiple calls
 * into a single statement.
 *
 * @see #putExtras
 * @see #removeExtra
 * @see #getIBinderExtra(String)
 *
 * @deprecated
 * @hide
 */
====>[HIDDEN]<android.content.Intent: Intent putExtra(String,IBinder)>    ---->    
<android.widget.OverScroller: int getDuration()>
/**
 * Returns how long the scroll event will take, in milliseconds.
 *
 * @return The duration of the scroll in milliseconds.
 *
 * @hide Pending removal once nothing depends on it
 * @deprecated OverScrollers don't necessarily have a fixed duration.
 * This function will lie to the best of its ability.
 */
====>[HIDDEN]<android.widget.OverScroller: int getDuration()>    ---->    
Inconsistency (Non-Documentation):<com.android.server.net.IpConfigStore: void writeIpAndProxyConfigurationsToFile(String,SparseArray<IpConfiguration>)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//services/core/java/com/android/server/net/IpConfigStore.java
<com.android.server.net.IpConfigStore: void writeIpAndProxyConfigurationsToFile(String,SparseArray<IpConfiguration>)>
/**
 * @Deprecated use {@link #writeIpConfigurations(String, ArrayMap)} instead.
 * New method uses string as network identifier which could be interface name or MAC address or
 * other token.
 */
====>[PUBLIC]<com.android.server.net.IpConfigStore: void writeIpAndProxyConfigurationsToFile(String,SparseArray<IpConfiguration>)>    ---->    
<android.provider.ContactsContract.CommonDataKinds.Phone: CharSequence getDisplayLabel(Context,int,CharSequence,CharSequence[])>
/**
 * @deprecated use {@link #getTypeLabel(Resources, int, CharSequence)} instead.
 * @hide
 */
====>[HIDDEN]<android.provider.ContactsContract.CommonDataKinds.Phone: CharSequence getDisplayLabel(Context,int,CharSequence,CharSequence[])>    ---->    #getTypeLabel(Resources, int, CharSequence)
<android.hardware.location.ContextHubManager: int loadNanoApp(int,NanoApp)>
/**
 * Load a nano app on a specified context hub.
 *
 * Note that loading is asynchronous.  When we return from this method,
 * the nano app (probably) hasn't loaded yet.  Assuming a return of 0
 * from this method, then the final success/failure for the load, along
 * with the "handle" for the nanoapp, is all delivered in a byte
 * string via a call to Callback.onMessageReceipt.
 *
 * TODO(b/30784270): Provide a better success/failure and "handle" delivery.
 *
 * @param hubHandle handle of context hub to load the app on.
 * @param app the nanoApp to load on the hub
 *
 * @return 0 if the command for loading was sent to the context hub;
 * -1 otherwise
 *
 * @see NanoApp
 *
 * @deprecated Use {@link #loadNanoApp(ContextHubInfo, NanoAppBinary)} instead.
 */
====>[PUBLIC]<android.hardware.location.ContextHubManager: int loadNanoApp(int,NanoApp)>    ---->    #loadNanoApp(ContextHubInfo, NanoAppBinary)
<android.text.style.ImageSpan: void <init>(Bitmap,int)>
/**
 * @deprecated Use {@link #ImageSpan(Context, Bitmap, int)} instead.
 */
====>[PUBLIC]<android.text.style.ImageSpan: void <init>(Bitmap,int)>    ---->    #ImageSpan(Context, Bitmap, int)
<android.app.Notification.Builder: Notification getNotification()>
/**
 * @deprecated Use {@link #build()} instead.
 */
====>[PUBLIC]<android.app.Notification.Builder: Notification getNotification()>    ---->    #build()
<android.telephony.PhoneNumberUtils: boolean isEmergencyNumber(int,String)>
/**
 * Checks a given number against the list of
 * emergency numbers provided by the RIL and SIM card.
 *
 * @param subId the subscription id of the SIM.
 * @param number the number to look up.
 * @return true if the number is in the list of emergency numbers
 * listed in the RIL / SIM, otherwise return false.
 *
 * @deprecated Please use {@link TelephonyManager#isEmergencyNumber(String)}
 * instead.
 *
 * @hide
 */
====>[HIDDEN]<android.telephony.PhoneNumberUtils: boolean isEmergencyNumber(int,String)>    ---->    TelephonyManager#isEmergencyNumber(String)
Inconsistency (Non-Documentation):<com.android.settingslib.NetworkPolicyEditor: int getPolicyCycleDay(NetworkTemplate)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//packages/SettingsLib/src/com/android/settingslib/NetworkPolicyEditor.java
<com.android.settingslib.NetworkPolicyEditor: int getPolicyCycleDay(NetworkTemplate)>

====>[PUBLIC]<com.android.settingslib.NetworkPolicyEditor: int getPolicyCycleDay(NetworkTemplate)>    ---->    
<android.drm.DrmStore.RightsStatus: void <init>()>
/**
 * @deprecated This class should have been an interface instead.
 * The default constuctor should have not been exposed.
 */
====>[PUBLIC]<android.drm.DrmStore.RightsStatus: void <init>()>    ---->    
<android.renderscript.RSTextureView: void onSurfaceTextureSizeChanged(SurfaceTexture,int,int)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.RSTextureView: void onSurfaceTextureSizeChanged(SurfaceTexture,int,int)>    ---->    
<android.graphics.ImageDecoder: void setConserveMemory(boolean)>
/**
 * @removed
 * @deprecated Replaced by {@link #setMemorySizePolicy}.
 */
====>[HIDDEN]<android.graphics.ImageDecoder: void setConserveMemory(boolean)>    ---->    #setMemorySizePolicy
Inconsistency (Non-Documentation):<com.android.server.ConnectivityService: NetworkQuotaInfo getActiveNetworkQuotaInfo()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//services/core/java/com/android/server/ConnectivityService.java
<com.android.server.ConnectivityService: NetworkQuotaInfo getActiveNetworkQuotaInfo()>

====>[PUBLIC]<com.android.server.ConnectivityService: NetworkQuotaInfo getActiveNetworkQuotaInfo()>    ---->    
<android.database.sqlite.SQLiteDatabase: Map<String, String> getSyncedTables()>
/**
 * Deprecated.
 * @deprecated This method no longer serves any useful purpose and has been deprecated.
 */
====>[PUBLIC]<android.database.sqlite.SQLiteDatabase: Map<String, String> getSyncedTables()>    ---->    
<android.net.ConnectivityManager: void reportInetCondition(int,int)>
/**
 * Report network connectivity status.  This is currently used only
 * to alter status bar UI.
 * <p>This method requires the caller to hold the permission
 * {@link android.Manifest.permission#STATUS_BAR}.
 *
 * @param networkType The type of network you want to report on
 * @param percentage The quality of the connection 0 is bad, 100 is good
 * @deprecated Types are deprecated. Use {@link #reportNetworkConnectivity} instead.
 * {@hide}
 */
====>[HIDDEN]<android.net.ConnectivityManager: void reportInetCondition(int,int)>    ---->    #reportNetworkConnectivity
<com.android.server.backup.UserBackupManagerService: String selectBackupTransport(String)>
/**
 * Selects transport {@code transportName} and returns previously selected transport.
 *
 * @deprecated Use {@link #selectBackupTransportAsync(ComponentName,
 * ISelectBackupTransportCallback)} instead.
 */
====>[PUBLIC]<com.android.server.backup.UserBackupManagerService: String selectBackupTransport(String)>    ---->    #selectBackupTransportAsync(ComponentName,  ISelectBackupTransportCallback)
<android.content.pm.ShortcutInfo.Builder: Builder setDisabledMessageResId(int)>
/**
 * @hide We don't support resource strings for dynamic shortcuts for now.  (But unit tests
 * use it.)
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo.Builder: Builder setDisabledMessageResId(int)>    ---->    
<android.renderscript.RSTextureView: RenderScriptGL createRenderScriptGL(SurfaceConfig)>
/**
 * @deprecated in API 16
 * Create a new RenderScriptGL object and attach it to the
 * TextureView if present.
 *
 * @param sc The RS surface config to create.
 *
 * @return RenderScriptGL The new object created.
 */
====>[PUBLIC]<android.renderscript.RSTextureView: RenderScriptGL createRenderScriptGL(SurfaceConfig)>    ---->    
<android.app.DownloadManager.Request: Request setVisibleInDownloadsUi(boolean)>
/**
 * Set whether this download should be displayed in the system's Downloads UI. True by
 * default.
 * @param isVisible whether to display this download in the Downloads UI
 * @return this object
 *
 * @deprecated Starting in Q, this value is ignored. Only files downloaded to
 * public Downloads directory (as returned by
 * {@link Environment#getExternalStoragePublicDirectory(String)} with
 * {@link Environment#DIRECTORY_DOWNLOADS}) will be visible in system's Downloads UI
 * and the rest will not be visible.
 * (e.g. {@link Context#getExternalFilesDir(String)}) will not be visible.
 */
====>[PUBLIC]<android.app.DownloadManager.Request: Request setVisibleInDownloadsUi(boolean)>    ---->    Environment#getExternalStoragePublicDirectory(String)
<android.renderscript.RSSurfaceView: void <init>(Context,AttributeSet)>
/**
 * @deprecated in API 16
 * Standard View constructor. In order to render something, you
 * must call {@link android.opengl.GLSurfaceView#setRenderer} to
 * register a renderer.
 */
====>[PUBLIC]<android.renderscript.RSSurfaceView: void <init>(Context,AttributeSet)>    ---->    android.opengl.GLSurfaceView#setRenderer
<android.net.ConnectivityManager: void reportBadNetwork(Network)>
/**
 * Report a problem network to the framework.  This provides a hint to the system
 * that there might be connectivity problems on this network and may cause
 * the framework to re-evaluate network connectivity and/or switch to another
 * network.
 *
 * @param network The {@link Network} the application was attempting to use
 * or {@code null} to indicate the current default network.
 * @deprecated Use {@link #reportNetworkConnectivity} which allows reporting both
 * working and non-working connectivity.
 */
====>[PUBLIC]<android.net.ConnectivityManager: void reportBadNetwork(Network)>    ---->    #reportNetworkConnectivity
<android.telephony.SignalStrength: int getAsuLevel()>
/**
 * Get the signal level as an asu value with a range dependent on the underlying technology.
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrength#getAsuLevel}. Because the levels vary by technology,
 * this method is misleading and should not be used.
 * @see android.telephony#CellSignalStrength
 * @see android.telephony.SignalStrength#getCellSignalStrengths
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getAsuLevel()>    ---->    android.telephony#CellSignalStrength
<android.telephony.data.ApnSetting.Builder: Builder setMmsProxyAddress(InetAddress)>
/**
 * Sets the address of an MMS proxy for the APN. The MMS proxy address can be an IP address
 * or hostname. If {@code mmsProxy} contains both an IP address and hostname, this method
 * ignores the IP address.
 *
 * <p>The {@link java.net.InetAddress} methods
 * {@link java.net.InetAddress#getByName getByName()} and
 * {@link java.net.InetAddress#getAllByName getAllByName()} require DNS for hostname
 * resolution. To avoid this requirement when setting a hostname, call
 * {@link java.net.InetAddress#getByAddress(java.lang.String, byte[])} with both the
 * hostname and a dummy IP address. See {@link ApnSetting.Builder above} for an example.
 *
 * @param mmsProxy the MMS proxy address to set for the APN
 * @deprecated use {@link #setMmsProxyAddress(String)} instead.
 */
====>[PUBLIC]<android.telephony.data.ApnSetting.Builder: Builder setMmsProxyAddress(InetAddress)>    ---->    #setMmsProxyAddress(String)
<com.android.ims.ImsConfig: int setProvisionedValue(int,int)>
/**
 * @deprecated see {@link #setConfig(int, int)} instead.
 */
====>[PUBLIC]<com.android.ims.ImsConfig: int setProvisionedValue(int,int)>    ---->    #setConfig(int, int)
Inconsistency (Non-Documentation):<android.app.ContextImpl: void removeStickyBroadcast(Intent)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/ContextImpl.java
<android.app.ContextImpl: void removeStickyBroadcast(Intent)>

====>[PUBLIC]<android.app.ContextImpl: void removeStickyBroadcast(Intent)>    ---->    
<android.renderscript.FileA3D: int getIndexEntryCount()>
/**
 * @deprecated in API 16
 * Returns the number of objects stored inside the a3d file
 *
 * @return the number of objects stored inside the a3d file
 */
====>[PUBLIC]<android.renderscript.FileA3D: int getIndexEntryCount()>    ---->    
<android.webkit.WebView: void onChildViewRemoved(View,View)>
/**
 * @deprecated WebView no longer needs to implement
 * ViewGroup.OnHierarchyChangeListener.  This method does nothing now.
 */
====>[HIDDEN]<android.webkit.WebView: void onChildViewRemoved(View,View)>    ---->    
<android.provider.UserDictionary.Words: void addWord(Context,String,int,int)>
/**
 * Adds a word to the dictionary, with the given frequency and the specified
 * specified locale type.
 *
 * @deprecated Please use
 * {@link #addWord(Context, String, int, String, Locale)} instead.
 *
 * @param context the current application context
 * @param word the word to add to the dictionary. This should not be null or
 * empty.
 * @param localeType the locale type for this word. It should be one of
 * {@link #LOCALE_TYPE_ALL} or {@link #LOCALE_TYPE_CURRENT}.
 */
====>[PUBLIC]<android.provider.UserDictionary.Words: void addWord(Context,String,int,int)>    ---->    #addWord(Context, String, int, String, Locale)
<android.hardware.radio.RadioTuner: boolean isAnalogForced()>
/**
 * Checks, if the analog playback is forced, see setAnalogForced.
 *
 * @throws IllegalStateException if the switch is not supported at current
 * configuration.
 * @return {@code true} if analog is forced, {@code false} otherwise.
 * @deprecated Use {@link isConfigFlagSet(int)} instead.
 */
====>[PUBLIC]<android.hardware.radio.RadioTuner: boolean isAnalogForced()>    ---->    isConfigFlagSet(int)
<android.provider.Contacts.People: Bitmap loadContactPhoto(Context,Uri,int,Options)>
/**
 * Opens an InputStream for the person's photo and returns the photo as a Bitmap.
 * If the person's photo isn't present returns the placeholderImageResource instead.
 * @param context the Context
 * @param person the person whose photo should be used
 * @param placeholderImageResource the image resource to use if the person doesn't
 * have a photo
 * @param options the decoding options, can be set to null
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.People: Bitmap loadContactPhoto(Context,Uri,int,Options)>    ---->    android.provider.ContactsContract
<android.telephony.PhoneNumberUtils: boolean isLocalEmergencyNumber(Context,String)>
/**
 * Checks if a given number is an emergency number for the country that the user is in.
 *
 * @param number the number to look up.
 * @param context the specific context which the number should be checked against
 * @return true if the specified number is an emergency number for the country the user
 * is currently in.
 *
 * @deprecated Please use {@link TelephonyManager#isEmergencyNumber(String)}
 * instead.
 */
====>[PUBLIC]<android.telephony.PhoneNumberUtils: boolean isLocalEmergencyNumber(Context,String)>    ---->    TelephonyManager#isEmergencyNumber(String)
Inconsistency (Non-Documentation):<com.android.server.backup.TransportManager: String selectTransport(String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//services/backup/java/com/android/server/backup/TransportManager.java
<com.android.server.backup.TransportManager: String selectTransport(String)>
/**
 * Sets {@code transportName} as selected transport and returns previously selected transport
 * name. If there was no previous transport it returns null.
 *
 * <p>You should NOT call this method in new code. This won't make any checks against {@code
 * transportName}, putting any operation at risk of a {@link TransportNotRegisteredException} or
 * another error at the time it's being executed.
 *
 * <p>{@link Deprecated} as public, this method can be used as private.
 */
====>[PUBLIC]<com.android.server.backup.TransportManager: String selectTransport(String)>    ---->    
<android.net.wifi.WifiManager: boolean reassociate()>
/**
 * Reconnect to the currently active access point, even if we are already
 * connected. This may result in the asynchronous delivery of state
 * change events.
 * @return {@code true} if the operation succeeded
 *
 * @deprecated
 * a) See {@link WifiNetworkSpecifier.Builder#build()} for new
 * mechanism to trigger connection to a Wi-Fi network.
 * b) See {@link #addNetworkSuggestions(List)},
 * {@link #removeNetworkSuggestions(List)} for new API to add Wi-Fi networks for consideration
 * when auto-connecting to wifi.
 * <b>Compatibility Note:</b> For applications targeting
 * {@link android.os.Build.VERSION_CODES#Q} or above, this API will always return false.
 */
====>[PUBLIC]<android.net.wifi.WifiManager: boolean reassociate()>    ---->    WifiNetworkSpecifier.Builder#build()
<android.webkit.WebSettings: void setUseWebViewBackgroundForOverscrollBackground(boolean)>
/**
 * Sets whether the WebView uses its background for over scroll background.
 * If {@code true}, it will use the WebView's background. If {@code false}, it will use an
 * internal pattern. Default is {@code true}.
 *
 * @deprecated This method is now obsolete.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebSettings: void setUseWebViewBackgroundForOverscrollBackground(boolean)>    ---->    
<android.provider.ContactsContract.StreamItems: void <init>()>
/**
 * This utility class cannot be instantiated
 *
 * @deprecated - Do not use. This will not be supported in the future. In the future,
 * cursors returned from related queries will be empty.
 */
====>[PUBLIC]<android.provider.ContactsContract.StreamItems: void <init>()>    ---->    
<android.app.backup.RestoreSession: int restoreSome(long,RestoreObserver,BackupManagerMonitor,String[])>
/**
 * Restore select packages from the given set onto the device, replacing the
 * current data of any app contained in the set with the data previously
 * backed up.
 *
 * <p>Callers must hold the android.permission.BACKUP permission to use this method.
 *
 * @return Zero on success, nonzero on error. The observer will only receive
 * progress callbacks if this method returned zero.
 * @param token The token from {@link getAvailableRestoreSets()} corresponding to
 * the restore set that should be used.
 * @param observer If non-null, this binder points to an object that will receive
 * progress callbacks during the restore operation.
 * @param monitor If non-null, this binder points to an object that will receive
 * progress callbacks during the restore operation.
 * @param packages The set of packages for which to attempt a restore.  Regardless of
 * the contents of the actual back-end dataset named by {@code token}, only
 * applications mentioned in this list will have their data restored.
 *
 * @deprecated use {@link RestoreSession#restorePackages(long, RestoreObserver,
 * BackupManagerMonitor, Set)} instead.
 * @removed
 */
====>[HIDDEN]<android.app.backup.RestoreSession: int restoreSome(long,RestoreObserver,BackupManagerMonitor,String[])>    ---->    RestoreSession#restorePackages(long, RestoreObserver,  BackupManagerMonitor, Set)
<android.net.ConnectivityManager: boolean setProcessDefaultNetwork(Network)>
/**
 * Binds the current process to {@code network}.  All Sockets created in the future
 * (and not explicitly bound via a bound SocketFactory from
 * {@link Network#getSocketFactory() Network.getSocketFactory()}) will be bound to
 * {@code network}.  All host name resolutions will be limited to {@code network} as well.
 * Note that if {@code network} ever disconnects, all Sockets created in this way will cease to
 * work and all host name resolutions will fail.  This is by design so an application doesn't
 * accidentally use Sockets it thinks are still bound to a particular {@link Network}.
 * To clear binding pass {@code null} for {@code network}.  Using individually bound
 * Sockets created by Network.getSocketFactory().createSocket() and
 * performing network-specific host name resolutions via
 * {@link Network#getAllByName Network.getAllByName} is preferred to calling
 * {@code setProcessDefaultNetwork}.
 *
 * @param network The {@link Network} to bind the current process to, or {@code null} to clear
 * the current binding.
 * @return {@code true} on success, {@code false} if the {@link Network} is no longer valid.
 * @deprecated This function can throw {@link IllegalStateException}.  Use
 * {@link #bindProcessToNetwork} instead.  {@code bindProcessToNetwork}
 * is a direct replacement.
 */
====>[PUBLIC]<android.net.ConnectivityManager: boolean setProcessDefaultNetwork(Network)>    ---->    #bindProcessToNetwork
<android.webkit.WebView: Picture capturePicture()>
/**
 * Gets a new picture that captures the current contents of this WebView.
 * The picture is of the entire document being displayed, and is not
 * limited to the area currently displayed by this WebView. Also, the
 * picture is a static copy and is unaffected by later changes to the
 * content being displayed.
 * <p>
 * Note that due to internal changes, for API levels between
 * {@link android.os.Build.VERSION_CODES#HONEYCOMB} and
 * {@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH} inclusive, the
 * picture does not include fixed position elements or scrollable divs.
 * <p>
 * Note that from {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1} the returned picture
 * should only be drawn into bitmap-backed Canvas - using any other type of Canvas will involve
 * additional conversion at a cost in memory and performance.
 *
 * @deprecated Use {@link #onDraw} to obtain a bitmap snapshot of the WebView, or
 * {@link #saveWebArchive} to save the content to a file.
 *
 * @return a picture that captures the current contents of this WebView
 */
====>[PUBLIC]<android.webkit.WebView: Picture capturePicture()>    ---->    #onDraw
<android.net.wifi.WifiManager: boolean removeNetwork(int)>
/**
 * Remove the specified network from the list of configured networks.
 * This may result in the asynchronous delivery of state change
 * events.
 *
 * Applications are not allowed to remove networks created by other
 * applications.
 *
 * @param netId the ID of the network as returned by {@link #addNetwork} or {@link
 * #getConfiguredNetworks}.
 * @return {@code true} if the operation succeeded
 *
 * @deprecated
 * a) See {@link WifiNetworkSpecifier.Builder#build()} for new
 * mechanism to trigger connection to a Wi-Fi network.
 * b) See {@link #addNetworkSuggestions(List)},
 * {@link #removeNetworkSuggestions(List)} for new API to add Wi-Fi networks for consideration
 * when auto-connecting to wifi.
 * <b>Compatibility Note:</b> For applications targeting
 * {@link android.os.Build.VERSION_CODES#Q} or above, this API will always return false.
 */
====>[PUBLIC]<android.net.wifi.WifiManager: boolean removeNetwork(int)>    ---->    WifiNetworkSpecifier.Builder#build()
<android.net.ConnectivityManager: String getNetworkTypeName(int)>
/**
 * Returns a non-localized string representing a given network type.
 * ONLY used for debugging output.
 * @param type the type needing naming
 * @return a String for the given type, or a string version of the type ("87")
 * if no name is known.
 * @deprecated Types are deprecated. Use {@link NetworkCapabilities} instead.
 * {@hide}
 */
====>[HIDDEN]<android.net.ConnectivityManager: String getNetworkTypeName(int)>    ---->    NetworkCapabilities
<android.app.ActivityManager: List<RecentTaskInfo> getRecentTasks(int,int)>
/**
 * <p></p>Return a list of the tasks that the user has recently launched, with
 * the most recent being first and older ones after in order.
 *
 * <p><b>Note: this method is only intended for debugging and presenting
 * task management user interfaces</b>.  This should never be used for
 * core logic in an application, such as deciding between different
 * behaviors based on the information found here.  Such uses are
 * <em>not</em> supported, and will likely break in the future.  For
 * example, if multiple applications can be actively running at the
 * same time, assumptions made about the meaning of the data here for
 * purposes of control flow will be incorrect.</p>
 *
 * @deprecated As of {@link android.os.Build.VERSION_CODES#LOLLIPOP}, this method is
 * no longer available to third party applications: the introduction of
 * document-centric recents means
 * it can leak personal information to the caller.  For backwards compatibility,
 * it will still return a small subset of its data: at least the caller's
 * own tasks (though see {@link #getAppTasks()} for the correct supported
 * way to retrieve that information), and possibly some other tasks
 * such as home that are known to not be sensitive.
 *
 * @param maxNum The maximum number of entries to return in the list.  The
 * actual number returned may be smaller, depending on how many tasks the
 * user has started and the maximum number the system can remember.
 * @param flags Information about what to return.  May be any combination
 * of {@link #RECENT_WITH_EXCLUDED} and {@link #RECENT_IGNORE_UNAVAILABLE}.
 *
 * @return Returns a list of RecentTaskInfo records describing each of
 * the recent tasks.
 */
====>[PUBLIC]<android.app.ActivityManager: List<RecentTaskInfo> getRecentTasks(int,int)>    ---->    
<android.renderscript.RSSurfaceView: void surfaceDestroyed(SurfaceHolder)>
/**
 * @deprecated in API 16
 * This method is part of the SurfaceHolder.Callback interface, and is
 * not normally called or subclassed by clients of RSSurfaceView.
 */
====>[PUBLIC]<android.renderscript.RSSurfaceView: void surfaceDestroyed(SurfaceHolder)>    ---->    
<android.media.RingtoneManager: void setIncludeDrm(boolean)>
/**
 * Sets whether to include DRM ringtones.
 *
 * @param includeDrm Whether to include DRM ringtones.
 * Obsolete - no longer has any effect
 * @deprecated DRM ringtones are no longer supported
 */
====>[PUBLIC]<android.media.RingtoneManager: void setIncludeDrm(boolean)>    ---->    
<android.net.ConnectivityManager: Network getNetworkForType(int)>
/**
 * Returns the {@link Network} object currently serving a given type, or
 * null if the given type is not connected.
 *
 * @hide
 * @deprecated This method does not support multiple connected networks
 * of the same type. Use {@link #getAllNetworks} and
 * {@link #getNetworkInfo(android.net.Network)} instead.
 */
====>[HIDDEN]<android.net.ConnectivityManager: Network getNetworkForType(int)>    ---->    #getAllNetworks
<android.telephony.TelephonyManager: void silenceRinger()>
/**
 * @removed Use {@link android.telecom.TelecomManager#silenceRinger} instead
 * @hide
 */
====>[HIDDEN]<android.telephony.TelephonyManager: void silenceRinger()>    ---->    
<android.os.storage.StorageManager: File maybeTranslateEmulatedPathToInternal(File)>
/**
 * @deprecated disabled now that FUSE has been replaced by sdcardfs
 * @hide
 */
====>[HIDDEN]<android.os.storage.StorageManager: File maybeTranslateEmulatedPathToInternal(File)>    ---->    
<android.view.View: void requestFitSystemWindows()>
/**
 * Ask that a new dispatch of {@link #fitSystemWindows(Rect)} be performed.
 * @deprecated Use {@link #requestApplyInsets()} for newer platform versions.
 */
====>[PUBLIC]<android.view.View: void requestFitSystemWindows()>    ---->    #requestApplyInsets()
<android.hardware.SensorManager: boolean registerListener(SensorListener,int,int)>
/**
 * Registers a SensorListener for given sensors.
 *
 * @deprecated This method is deprecated, use
 * {@link SensorManager#registerListener(SensorEventListener, Sensor, int)}
 * instead.
 *
 * @param listener
 * sensor listener object
 *
 * @param sensors
 * a bit masks of the sensors to register to
 *
 * @param rate
 * rate of events. This is only a hint to the system. events may be
 * received faster or slower than the specified rate. Usually events
 * are received faster. The value must be one of
 * {@link #SENSOR_DELAY_NORMAL}, {@link #SENSOR_DELAY_UI},
 * {@link #SENSOR_DELAY_GAME}, or {@link #SENSOR_DELAY_FASTEST}.
 *
 * @return <code>true</code> if the sensor is supported and successfully
 * enabled
 */
====>[PUBLIC]<android.hardware.SensorManager: boolean registerListener(SensorListener,int,int)>    ---->    SensorManager#registerListener(SensorEventListener, Sensor, int)
<android.os.Vibrator: void vibrate(long,AudioAttributes)>
/**
 * Vibrate constantly for the specified period of time.
 *
 * @param milliseconds The number of milliseconds to vibrate.
 * @param attributes {@link AudioAttributes} corresponding to the vibration. For example,
 * specify {@link AudioAttributes#USAGE_ALARM} for alarm vibrations or
 * {@link AudioAttributes#USAGE_NOTIFICATION_RINGTONE} for
 * vibrations associated with incoming calls.
 *
 * @deprecated Use {@link #vibrate(VibrationEffect, AudioAttributes)} instead.
 */
====>[PUBLIC]<android.os.Vibrator: void vibrate(long,AudioAttributes)>    ---->    #vibrate(VibrationEffect, AudioAttributes)
<android.nfc.NfcAdapter: void setBeamPushUris(Uri[],Activity)>
/**
 * Set one or more {@link Uri}s to send using Android Beam (TM). Every
 * Uri you provide must have either scheme 'file' or scheme 'content'.
 *
 * <p>For the data provided through this method, Android Beam tries to
 * switch to alternate transports such as Bluetooth to achieve a fast
 * transfer speed. Hence this method is very suitable
 * for transferring large files such as pictures or songs.
 *
 * <p>The receiving side will store the content of each Uri in
 * a file and present a notification to the user to open the file
 * with a {@link android.content.Intent} with action
 * {@link android.content.Intent#ACTION_VIEW}.
 * If multiple URIs are sent, the {@link android.content.Intent} will refer
 * to the first of the stored files.
 *
 * <p>This method may be called at any time before {@link Activity#onDestroy},
 * but the URI(s) are only made available for Android Beam when the
 * specified activity(s) are in resumed (foreground) state. The recommended
 * approach is to call this method during your Activity's
 * {@link Activity#onCreate} - see sample
 * code below. This method does not immediately perform any I/O or blocking work,
 * so is safe to call on your main thread.
 *
 * <p>{@link #setBeamPushUris} and {@link #setBeamPushUrisCallback}
 * have priority over both {@link #setNdefPushMessage} and
 * {@link #setNdefPushMessageCallback}.
 *
 * <p>If {@link #setBeamPushUris} is called with a null Uri array,
 * and/or {@link #setBeamPushUrisCallback} is called with a null callback,
 * then the Uri push will be completely disabled for the specified activity(s).
 *
 * <p>Code example:
 * <pre>
 * protected void onCreate(Bundle savedInstanceState) {
 * super.onCreate(savedInstanceState);
 * NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this);
 * if (nfcAdapter == null) return;  // NFC not available on this device
 * nfcAdapter.setBeamPushUris(new Uri[] {uri1, uri2}, this);
 * }</pre>
 * And that is it. Only one call per activity is necessary. The Android
 * OS will automatically release its references to the Uri(s) and the
 * Activity object when it is destroyed if you follow this pattern.
 *
 * <p>If your Activity wants to dynamically supply Uri(s),
 * then set a callback using {@link #setBeamPushUrisCallback} instead
 * of using this method.
 *
 * <p class="note">Do not pass in an Activity that has already been through
 * {@link Activity#onDestroy}. This is guaranteed if you call this API
 * during {@link Activity#onCreate}.
 *
 * <p class="note">If this device does not support alternate transports
 * such as Bluetooth or WiFI, calling this method does nothing.
 *
 * <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
 *
 * @param uris an array of Uri(s) to push over Android Beam
 * @param activity activity for which the Uri(s) will be pushed
 * @throws UnsupportedOperationException if FEATURE_NFC is unavailable.
 * @deprecated this feature is deprecated. File sharing can work using other technology like
 * Bluetooth.
 */
====>[PUBLIC]<android.nfc.NfcAdapter: void setBeamPushUris(Uri[],Activity)>    ---->    
<android.content.pm.ShortcutInfo: CharSequence getTitle()>
/**
 * @hide -- old signature, the internal code still uses it.
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo: CharSequence getTitle()>    ---->    
<android.view.KeyEvent: boolean dispatch(Callback)>
/**
 * @deprecated Use {@link #dispatch(Callback, DispatcherState, Object)} instead.
 */
====>[PUBLIC]<android.view.KeyEvent: boolean dispatch(Callback)>    ---->    #dispatch(Callback, DispatcherState, Object)
<android.hardware.SensorDirectChannel: boolean isValid()>
/**
 * @removed
 */
====>[HIDDEN]<android.hardware.SensorDirectChannel: boolean isValid()>    ---->    
<android.media.AudioManager: void unregisterRemoteController(RemoteController)>
/**
 * Unregisters a {@link RemoteController}, causing it to no longer receive
 * media metadata and playback state information, and no longer be capable
 * of controlling playback.
 *
 * @param rctlr the object to unregister.
 * @deprecated Use
 * {@link MediaSessionManager#removeOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener)}
 * instead.
 */
====>[PUBLIC]<android.media.AudioManager: void unregisterRemoteController(RemoteController)>    ---->    MediaSessionManager#removeOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener)
<android.renderscript.Mesh.Builder: int getCurrentVertexTypeIndex()>
/**
 * @deprecated in API 16
 * @return internal index of the last vertex buffer type added to
 * builder
 */
====>[PUBLIC]<android.renderscript.Mesh.Builder: int getCurrentVertexTypeIndex()>    ---->    
<android.renderscript.RenderScriptGL: void setSurface(SurfaceHolder,int,int)>
/**
 * @deprecated in API 16
 * Bind an os surface
 *
 * @param w
 * @param h
 * @param sur
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL: void setSurface(SurfaceHolder,int,int)>    ---->    
<android.content.pm.ShortcutInfo: int getTitleResId()>
/**
 * @hide -- old signature, the internal code still uses it.
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo: int getTitleResId()>    ---->    
<android.telecom.RemoteConnection: void setAudioState(AudioState)>
/**
 * Set the audio state of this {@code RemoteConnection}.
 *
 * @param state The audio state of this {@code RemoteConnection}.
 * @hide
 * @deprecated Use {@link #setCallAudioState(CallAudioState)} instead.
 */
====>[HIDDEN]<android.telecom.RemoteConnection: void setAudioState(AudioState)>    ---->    #setCallAudioState(CallAudioState)
<android.location.LocationManager: boolean setProviderEnabledForUser(String,boolean,UserHandle)>
/**
 * Method for enabling or disabling a single location provider. This method is deprecated and
 * functions as a best effort. It should not be relied on in any meaningful sense as providers
 * may no longer be enabled or disabled by clients.
 *
 * @param provider the name of the provider
 * @param enabled true to enable the provider. false to disable the provider
 * @param userHandle the user to set
 * @return true if the value was set, false otherwise
 *
 * @throws IllegalArgumentException if provider is null
 * @deprecated Do not manipulate providers individually, use
 * {@link #setLocationEnabledForUser(boolean, UserHandle)} instead.
 * @hide
 */
====>[HIDDEN]<android.location.LocationManager: boolean setProviderEnabledForUser(String,boolean,UserHandle)>    ---->    #setLocationEnabledForUser(boolean, UserHandle)
<android.app.KeyguardManager: Intent createConfirmDeviceCredentialIntent(CharSequence,CharSequence)>
/**
 * Get an intent to prompt the user to confirm credentials (pin, pattern, password or biometrics
 * if enrolled) for the current user of the device. The caller is expected to launch this
 * activity using {@link android.app.Activity#startActivityForResult(Intent, int)} and check for
 * {@link android.app.Activity#RESULT_OK} if the user successfully completes the challenge.
 *
 * @return the intent for launching the activity or null if no password is required.
 * @deprecated see {@link BiometricPrompt.Builder#setDeviceCredentialAllowed(boolean)}
 */
====>[PUBLIC]<android.app.KeyguardManager: Intent createConfirmDeviceCredentialIntent(CharSequence,CharSequence)>    ---->    BiometricPrompt.Builder#setDeviceCredentialAllowed(boolean)
<android.app.prediction.AppTarget: void <init>(AppTargetId,String,String,UserHandle)>
/**
 * @deprecated use the Builder class
 * @hide
 */
====>[HIDDEN]<android.app.prediction.AppTarget: void <init>(AppTargetId,String,String,UserHandle)>    ---->    
<android.renderscript.ProgramVertexFixedFunction.InternalBuilder: void <init>(RenderScript)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.ProgramVertexFixedFunction.InternalBuilder: void <init>(RenderScript)>    ---->    
<com.android.internal.widget.PagerAdapter: void finishUpdate(View)>
/**
 * Called when the a change in the shown pages has been completed.  At this
 * point you must ensure that all of the pages have actually been added or
 * removed from the container as appropriate.
 * @param container The containing View which is displaying this adapter's
 * page views.
 *
 * @deprecated Use {@link #finishUpdate(android.view.ViewGroup)}
 */
====>[PUBLIC]<com.android.internal.widget.PagerAdapter: void finishUpdate(View)>    ---->    #finishUpdate(android.view.ViewGroup)
<android.util.proto.ProtoOutputStream: void writeSInt64(long,long)>
/**
 * Write a single proto "sint64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeSInt64(long,long)>    ---->    #write
<android.text.DynamicLayout: void <init>(CharSequence,CharSequence,TextPaint,int,Alignment,float,float,boolean)>
/**
 * @deprecated Use {@link Builder} instead.
 */
====>[PUBLIC]<android.text.DynamicLayout: void <init>(CharSequence,CharSequence,TextPaint,int,Alignment,float,float,boolean)>    ---->    Builder
<android.app.Notification: long getTimeout()>
/**
 * @removed
 */
====>[HIDDEN]<android.app.Notification: long getTimeout()>    ---->    
<android.app.StatsManager: boolean setBroadcastSubscriber(long,long,PendingIntent)>
/**
 * @deprecated Use {@link #setBroadcastSubscriber(PendingIntent, long, long)}
 */
====>[PUBLIC]<android.app.StatsManager: boolean setBroadcastSubscriber(long,long,PendingIntent)>    ---->    #setBroadcastSubscriber(PendingIntent, long, long)
<android.text.method.DigitsKeyListener: DigitsKeyListener getInstance(boolean,boolean)>
/**
 * Returns a DigitsKeyListener that accepts the ASCII digits 0 through 9, plus the ASCII plus
 * or minus sign (only at the beginning) and/or the ASCII period ('.') as the decimal point
 * (only one per field) if specified.
 *
 * @deprecated Use {@link #getInstance(Locale, boolean, boolean)} instead.
 */
====>[PUBLIC]<android.text.method.DigitsKeyListener: DigitsKeyListener getInstance(boolean,boolean)>    ---->    #getInstance(Locale, boolean, boolean)
<android.telecom.StatusHints: int getIconResId()>
/**
 * The icon resource ID for the icon to show.
 *
 * @return A resource ID.
 *
 * @hide
 */
====>[HIDDEN]<android.telecom.StatusHints: int getIconResId()>    ---->    
<android.view.View: void setDrawingCacheEnabled(boolean)>
/**
 * <p>Enables or disables the drawing cache. When the drawing cache is enabled, the next call
 * to {@link #getDrawingCache()} or {@link #buildDrawingCache()} will draw the view in a
 * bitmap. Calling {@link #draw(android.graphics.Canvas)} will not draw from the cache when
 * the cache is enabled. To benefit from the cache, you must request the drawing cache by
 * calling {@link #getDrawingCache()} and draw it on screen if the returned bitmap is not
 * null.</p>
 *
 * <p>Enabling the drawing cache is similar to
 * {@link #setLayerType(int, android.graphics.Paint) setting a layer} when hardware
 * acceleration is turned off. When hardware acceleration is turned on, enabling the
 * drawing cache has no effect on rendering because the system uses a different mechanism
 * for acceleration which ignores the flag. If you want to use a Bitmap for the view, even
 * when hardware acceleration is enabled, see {@link #setLayerType(int, android.graphics.Paint)}
 * for information on how to enable software and hardware layers.</p>
 *
 * <p>This API can be used to manually generate
 * a bitmap copy of this view, by setting the flag to <code>true</code> and calling
 * {@link #getDrawingCache()}.</p>
 *
 * @param enabled true to enable the drawing cache, false otherwise
 *
 * @see #isDrawingCacheEnabled()
 * @see #getDrawingCache()
 * @see #buildDrawingCache()
 * @see #setLayerType(int, android.graphics.Paint)
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: void setDrawingCacheEnabled(boolean)>    ---->    #setLayerType(int, Paint)
<android.app.Activity: void onStateNotSaved()>
/**
 * Called when an {@link #onResume} is coming up, prior to other pre-resume callbacks
 * such as {@link #onNewIntent} and {@link #onActivityResult}.  This is primarily intended
 * to give the activity a hint that its state is no longer saved -- it will generally
 * be called after {@link #onSaveInstanceState} and prior to the activity being
 * resumed/started again.
 *
 * @deprecated starting with {@link android.os.Build.VERSION_CODES#P} onSaveInstanceState is
 * called after {@link #onStop}, so this hint isn't accurate anymore: you should consider your
 * state not saved in between {@code onStart} and {@code onStop} callbacks inclusively.
 */
====>[PUBLIC]<android.app.Activity: void onStateNotSaved()>    ---->    
<android.telecom.Conference: void setConnectTimeMillis(long)>
/**
 * @hide
 * @deprecated Use {@link #setConnectionTime}.
 */
====>[HIDDEN]<android.telecom.Conference: void setConnectTimeMillis(long)>    ---->    #setConnectionTime
<android.animation.LayoutTransition: void showChild(ViewGroup,View)>
/**
 * @deprecated Use {@link #showChild(android.view.ViewGroup, android.view.View, int)}.
 */
====>[PUBLIC]<android.animation.LayoutTransition: void showChild(ViewGroup,View)>    ---->    #showChild(android.view.ViewGroup, android.view.View, int)
<android.service.carrier.CarrierMessagingService: void onFilterSms(MessagePdu,String,int,int,ResultCallback<Boolean>)>
/**
 * Override this method to filter inbound SMS messages.
 *
 * @param pdu the PDUs of the message
 * @param format the format of the PDUs, typically "3gpp" or "3gpp2"
 * @param destPort the destination port of a binary SMS, this will be -1 for text SMS
 * @param subId SMS subscription ID of the SIM
 * @param callback result callback. Call with {@code true} to keep an inbound SMS message and
 * deliver to SMS apps, and {@code false} to drop the message.
 * @deprecated Use {@link #onReceiveTextSms} instead.
 */
====>[PUBLIC]<android.service.carrier.CarrierMessagingService: void onFilterSms(MessagePdu,String,int,int,ResultCallback<Boolean>)>    ---->    #onReceiveTextSms
Inconsistency (Non-Documentation):<com.android.internal.content.PackageHelper: long calculateInstalledSize(PackageLite,boolean,Handle,String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/com/android/internal/content/PackageHelper.java
<com.android.internal.content.PackageHelper: long calculateInstalledSize(PackageLite,boolean,Handle,String)>

====>[PUBLIC]<com.android.internal.content.PackageHelper: long calculateInstalledSize(PackageLite,boolean,Handle,String)>    ---->    
<android.app.DownloadManager: long addCompletedDownload(String,String,boolean,String,String,long,boolean,boolean,Uri,Uri)>
/**
 * <p> For applications targeting {@link android.os.Build.VERSION_CODES#Q} or above,
 * {@code path} must be within directories owned by the application
 * {e.g. {@link Context#getExternalFilesDir(String)}} or if the application is running under
 * the legacy storage model (see
 * {@link android.R.styleable#AndroidManifestApplication_requestLegacyExternalStorage
 * android:requestLegacyExternalStorage}), {@code path} can also be within the top-level
 * Downloads directory (as returned by
 * {@link Environment#getExternalStoragePublicDirectory(String)} with
 * {@link Environment#DIRECTORY_DOWNLOADS}).
 *
 * {@hide}
 *
 * @deprecated Apps should instead contribute files to
 * {@link android.provider.MediaStore.Downloads} collection to make them available to user
 * as part of Downloads.
 */
====>[HIDDEN]<android.app.DownloadManager: long addCompletedDownload(String,String,boolean,String,String,long,boolean,boolean,Uri,Uri)>    ---->    android.provider.MediaStore.Downloads
<android.view.ViewConfiguration: int getEdgeSlop()>
/**
 * @return Inset in dips to look for touchable content when the user touches the edge of the
 * screen
 *
 * @deprecated Use {@link #getScaledEdgeSlop()} instead.
 */
====>[PUBLIC]<android.view.ViewConfiguration: int getEdgeSlop()>    ---->    #getScaledEdgeSlop()
<android.nfc.NfcAdapter: void enableForegroundNdefPush(Activity,NdefMessage)>
/**
 * Enable NDEF message push over NFC while this Activity is in the foreground.
 *
 * <p>You must explicitly call this method every time the activity is
 * resumed, and you must call {@link #disableForegroundNdefPush} before
 * your activity completes {@link Activity#onPause}.
 *
 * <p>Strongly recommend to use the new {@link #setNdefPushMessage}
 * instead: it automatically hooks into your activity life-cycle,
 * so you do not need to call enable/disable in your onResume/onPause.
 *
 * <p>For NDEF push to function properly the other NFC device must
 * support either NFC Forum's SNEP (Simple Ndef Exchange Protocol), or
 * Android's "com.android.npp" (Ndef Push Protocol). This was optional
 * on Gingerbread level Android NFC devices, but SNEP is mandatory on
 * Ice-Cream-Sandwich and beyond.
 *
 * <p>This method must be called from the main thread.
 *
 * <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
 *
 * @param activity foreground activity
 * @param message a NDEF Message to push over NFC
 * @throws IllegalStateException if the activity is not currently in the foreground
 * @throws UnsupportedOperationException if FEATURE_NFC is unavailable.
 * @deprecated use {@link #setNdefPushMessage} instead
 */
====>[PUBLIC]<android.nfc.NfcAdapter: void enableForegroundNdefPush(Activity,NdefMessage)>    ---->    #setNdefPushMessage
<android.view.ViewGroup: ViewParent invalidateChildInParent(int[],Rect)>
/**
 * Don't call or override this method. It is used for the implementation of
 * the view hierarchy.
 *
 * This implementation returns null if this ViewGroup does not have a parent,
 * if this ViewGroup is already fully invalidated or if the dirty rectangle
 * does not intersect with this ViewGroup's bounds.
 *
 * @deprecated Use {@link #onDescendantInvalidated(View, View)} instead to observe updates to
 * draw state in descendants.
 */
====>[PUBLIC]<android.view.ViewGroup: ViewParent invalidateChildInParent(int[],Rect)>    ---->    #onDescendantInvalidated(View, View)
<android.content.pm.PermissionInfo: void <init>(PermissionInfo)>
/**
 * @deprecated Should only be created by the system.
 */
====>[PUBLIC]<android.content.pm.PermissionInfo: void <init>(PermissionInfo)>    ---->    
<android.os.Debug: void resetThreadAllocCount()>
/**
 * Clears the thread-local count of objects allocated.
 * @see #getThreadAllocCount()
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void resetThreadAllocCount()>    ---->    
<android.view.inputmethod.InputMethodManager: void viewClicked(View)>
/**
 * Notify the event when the user tapped or clicked the text view.
 *
 * @param view {@link View} which is being clicked.
 * @see InputMethodService#onViewClicked(boolean)
 * @deprecated The semantics of this method can never be defined well for composite {@link View}
 * that works as a giant "Canvas", which can host its own UI hierarchy and sub focus
 * state. {@link android.webkit.WebView} is a good example. Application / IME
 * developers should not rely on this method.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodManager: void viewClicked(View)>    ---->    View
<android.webkit.WebChromeClient: boolean onJsTimeout()>
/**
 * Tell the client that a JavaScript execution timeout has occured. And the
 * client may decide whether or not to interrupt the execution. If the
 * client returns {@code true}, the JavaScript will be interrupted. If the client
 * returns {@code false}, the execution will continue. Note that in the case of
 * continuing execution, the timeout counter will be reset, and the callback
 * will continue to occur if the script does not finish at the next check
 * point.
 * @return boolean Whether the JavaScript execution should be interrupted.
 * @deprecated This method is no longer supported and will not be invoked.
 */
====>[PUBLIC]<android.webkit.WebChromeClient: boolean onJsTimeout()>    ---->    
<android.webkit.WebView: boolean savePicture(Bundle,File)>
/**
 * Saves the current display data to the Bundle given. Used in conjunction
 * with {@link #saveState}.
 * @param b a Bundle to store the display data
 * @param dest the file to store the serialized picture data. Will be
 * overwritten with this WebView's picture data.
 * @return {@code true} if the picture was successfully saved
 * @deprecated This method is now obsolete.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebView: boolean savePicture(Bundle,File)>    ---->    
<android.widget.ResourceCursorAdapter: void <init>(Context,int,Cursor)>
/**
 * Constructor the enables auto-requery.
 *
 * @deprecated This option is discouraged, as it results in Cursor queries
 * being performed on the application's UI thread and thus can cause poor
 * responsiveness or even Application Not Responding errors.  As an alternative,
 * use {@link android.app.LoaderManager} with a {@link android.content.CursorLoader}.
 *
 * @param context The context where the ListView associated with this adapter is running
 * @param layout resource identifier of a layout file that defines the views
 * for this list item.  Unless you override them later, this will
 * define both the item views and the drop down views.
 */
====>[PUBLIC]<android.widget.ResourceCursorAdapter: void <init>(Context,int,Cursor)>    ---->    android.app.LoaderManager
<android.provider.Contacts.People: long tryGetMyContactsGroupId(ContentResolver)>
/**
 * @hide Used in vCard parser code.
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[HIDDEN]<android.provider.Contacts.People: long tryGetMyContactsGroupId(ContentResolver)>    ---->    android.provider.ContactsContract
Inconsistency (Non-Documentation):<android.net.wifi.WifiScanner: void configureWifiChange(int,int,int,int,int,BssidInfo[])> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//wifi/java/android/net/wifi/WifiScanner.java
<android.net.wifi.WifiScanner: void configureWifiChange(int,int,int,int,int,BssidInfo[])>
/**
 * configure WifiChange detection
 * @param rssiSampleSize number of samples used for RSSI averaging
 * @param lostApSampleSize number of samples to confirm an access point's loss
 * @param unchangedSampleSize number of samples to confirm there are no changes
 * @param minApsBreachingThreshold minimum number of access points that need to be
 * out of range to detect WifiChange
 * @param periodInMs indicates period of scan to find changes
 * @param bssidInfos access points to watch
 */
====>[PUBLIC]<android.net.wifi.WifiScanner: void configureWifiChange(int,int,int,int,int,BssidInfo[])>    ---->    
<android.provider.MediaStore.Images.Thumbnails: Bitmap getThumbnail(ContentResolver,long,long,int,Options)>
/**
 * Return thumbnail representing a specific image item. If a
 * thumbnail doesn't exist, this method will block until it's
 * generated. Callers are responsible for their own in-memory
 * caching of returned values.
 *
 * @param imageId the image item to obtain a thumbnail for.
 * @param kind optimal thumbnail size desired.
 * @return decoded thumbnail, or {@code null} if problem was
 * encountered.
 * @deprecated Callers should migrate to using
 * {@link ContentResolver#loadThumbnail}, since it
 * offers richer control over requested thumbnail sizes
 * and cancellation behavior.
 */
====>[PUBLIC]<android.provider.MediaStore.Images.Thumbnails: Bitmap getThumbnail(ContentResolver,long,long,int,Options)>    ---->    
<android.webkit.WebView: float getScale()>
/**
 * Gets the current scale of this WebView.
 *
 * @return the current scale
 *
 * @deprecated This method is prone to inaccuracy due to race conditions
 * between the web rendering and UI threads; prefer
 * {@link WebViewClient#onScaleChanged}.
 */
====>[PUBLIC]<android.webkit.WebView: float getScale()>    ---->    WebViewClient#onScaleChanged
<android.speech.tts.TextToSpeech: int setEngineByPackageName(String)>
/**
 * Sets the TTS engine to use.
 *
 * @deprecated This doesn't inform callers when the TTS engine has been
 * initialized. {@link #TextToSpeech(Context, OnInitListener, String)}
 * can be used with the appropriate engine name. Also, there is no
 * guarantee that the engine specified will be loaded. If it isn't
 * installed or disabled, the user / system wide defaults will apply.
 *
 * @param enginePackageName The package name for the synthesis engine (e.g. "com.svox.pico")
 *
 * @return {@link #ERROR} or {@link #SUCCESS}.
 */
====>[PUBLIC]<android.speech.tts.TextToSpeech: int setEngineByPackageName(String)>    ---->    #TextToSpeech(Context, OnInitListener, String)
<android.app.Activity: boolean requestVisibleBehind(boolean)>
/**
 * Activities that want to remain visible behind a translucent activity above them must call
 * this method anytime between the start of {@link #onResume()} and the return from
 * {@link #onPause()}. If this call is successful then the activity will remain visible after
 * {@link #onPause()} is called, and is allowed to continue playing media in the background.
 *
 * <p>The actions of this call are reset each time that this activity is brought to the
 * front. That is, every time {@link #onResume()} is called the activity will be assumed
 * to not have requested visible behind. Therefore, if you want this activity to continue to
 * be visible in the background you must call this method again.
 *
 * <p>Only fullscreen opaque activities may make this call. I.e. this call is a nop
 * for dialog and translucent activities.
 *
 * <p>Under all circumstances, the activity must stop playing and release resources prior to or
 * within a call to {@link #onVisibleBehindCanceled()} or if this call returns false.
 *
 * <p>False will be returned any time this method is called between the return of onPause and
 * the next call to onResume.
 *
 * @deprecated This method's functionality is no longer supported as of
 * {@link android.os.Build.VERSION_CODES#O} and will be removed in a future release.
 *
 * @param visible true to notify the system that the activity wishes to be visible behind other
 * translucent activities, false to indicate otherwise. Resources must be
 * released when passing false to this method.
 *
 * @return the resulting visibiity state. If true the activity will remain visible beyond
 * {@link #onPause()} if the next activity is translucent or not fullscreen. If false
 * then the activity may not count on being visible behind other translucent activities,
 * and must stop any media playback and release resources.
 * Returning false may occur in lieu of a call to {@link #onVisibleBehindCanceled()} so
 * the return value must be checked.
 *
 * @see #onVisibleBehindCanceled()
 */
====>[PUBLIC]<android.app.Activity: boolean requestVisibleBehind(boolean)>    ---->    #onVisibleBehindCanceled()
<android.renderscript.RenderScriptGL: void bindProgramVertex(ProgramVertex)>
/**
 * @deprecated in API 16
 * Set the default ProgramVertex object seen as the parent state by the
 * root rendering script.
 *
 * @param p
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL: void bindProgramVertex(ProgramVertex)>    ---->    
<android.net.TrafficStats: long getUidUdpTxPackets(int)>
/**
 * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},
 * transport layer statistics are no longer available, and will
 * always return {@link #UNSUPPORTED}.
 * @see #getUidTxPackets(int)
 */
====>[PUBLIC]<android.net.TrafficStats: long getUidUdpTxPackets(int)>    ---->    #getUidTxPackets(int)
<android.service.notification.ConditionProviderService: void notifyConditions(Condition)>
/**
 * Informs the notification manager that the state of one or more Conditions has changed. See
 * {@link #notifyCondition(Condition)} for restrictions.
 * @param conditions the changed conditions.
 *
 * @deprecated see
 * {@link android.app.NotificationManager#setAutomaticZenRuleState(String, Condition)}.
 */
====>[PUBLIC]<android.service.notification.ConditionProviderService: void notifyConditions(Condition)>    ---->    android.app.NotificationManager#setAutomaticZenRuleState(String, Condition)
<android.app.Activity: Dialog onCreateDialog(int,Bundle)>
/**
 * Callback for creating dialogs that are managed (saved and restored) for you
 * by the activity.  The default implementation calls through to
 * {@link #onCreateDialog(int)} for compatibility.
 *
 * <em>If you are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}
 * or later, consider instead using a {@link DialogFragment} instead.</em>
 *
 * <p>If you use {@link #showDialog(int)}, the activity will call through to
 * this method the first time, and hang onto it thereafter.  Any dialog
 * that is created by this method will automatically be saved and restored
 * for you, including whether it is showing.
 *
 * <p>If you would like the activity to manage saving and restoring dialogs
 * for you, you should override this method and handle any ids that are
 * passed to {@link #showDialog}.
 *
 * <p>If you would like an opportunity to prepare your dialog before it is shown,
 * override {@link #onPrepareDialog(int, Dialog, Bundle)}.
 *
 * @param id The id of the dialog.
 * @param args The dialog arguments provided to {@link #showDialog(int, Bundle)}.
 * @return The dialog.  If you return null, the dialog will not be created.
 *
 * @see #onPrepareDialog(int, Dialog, Bundle)
 * @see #showDialog(int, Bundle)
 * @see #dismissDialog(int)
 * @see #removeDialog(int)
 *
 * @deprecated Use the new {@link DialogFragment} class with
 * {@link FragmentManager} instead; this is also
 * available on older platforms through the Android compatibility package.
 */
====>[PUBLIC]<android.app.Activity: Dialog onCreateDialog(int,Bundle)>    ---->    DialogFragment
<android.content.Context: int getWallpaperDesiredMinimumHeight()>
/**
 * @deprecated Use {@link android.app.WallpaperManager#getDesiredMinimumHeight()
 * WallpaperManager.getDesiredMinimumHeight()} instead.
 */
====>[PUBLIC]<android.content.Context: int getWallpaperDesiredMinimumHeight()>    ---->    android.app.WallpaperManager#getDesiredMinimumHeight()  WallpaperManager.getDesiredMinimumHeight()
<android.media.tv.TvInputInfo: TvInputInfo createTvInputInfo(Context,ResolveInfo,TvInputHardwareInfo,int,Icon)>
/**
 * Create a new instance of the TvInputInfo class, instantiating it from the given Context,
 * ResolveInfo, and TvInputHardwareInfo.
 *
 * @param service The ResolveInfo returned from the package manager about this TV input service.
 * @param hardwareInfo The TvInputHardwareInfo for a TV input hardware device.
 * @param labelRes The label resource ID of this TvInputInfo. If it is {@code 0},
 * {@code service} label will be loaded.
 * @param icon The {@link android.graphics.drawable.Icon} to load the icon image. If it is
 * {@code null}, the application icon of {@code service} will be loaded.
 * @hide
 * @deprecated Use {@link Builder} instead.
 */
====>[HIDDEN]<android.media.tv.TvInputInfo: TvInputInfo createTvInputInfo(Context,ResolveInfo,TvInputHardwareInfo,int,Icon)>    ---->    Builder
<android.content.pm.ShortcutInfo: boolean isManifestShortcut()>
/**
 * @hide kept for unit tests
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo: boolean isManifestShortcut()>    ---->    
<android.content.Context: void sendStickyBroadcastAsUser(Intent,UserHandle)>
/**
 * <p>Version of {@link #sendStickyBroadcast(Intent)} that allows you to specify the
 * user the broadcast will be sent to.  This is not available to applications
 * that are not pre-installed on the system image.
 *
 * @deprecated Sticky broadcasts should not be used.  They provide no security (anyone
 * can access them), no protection (anyone can modify them), and many other problems.
 * The recommended pattern is to use a non-sticky broadcast to report that <em>something</em>
 * has changed, with another mechanism for apps to retrieve the current value whenever
 * desired.
 *
 * @param intent The Intent to broadcast; all receivers matching this
 * Intent will receive the broadcast, and the Intent will be held to
 * be re-broadcast to future receivers.
 * @param user UserHandle to send the intent to.
 *
 * @see #sendBroadcast(Intent)
 */
====>[PUBLIC]<android.content.Context: void sendStickyBroadcastAsUser(Intent,UserHandle)>    ---->    #sendBroadcast(Intent)
<android.telephony.TelephonyManager: boolean getDataEnabled(int)>
/**
 * @deprecated use {@link #isDataEnabled()} instead.
 * @hide
 */
====>[HIDDEN]<android.telephony.TelephonyManager: boolean getDataEnabled(int)>    ---->    #isDataEnabled()
<android.location.LocationManager: boolean addNmeaListener(NmeaListener)>
/**
 * Adds an NMEA listener.
 *
 * @param listener a {@link GpsStatus.NmeaListener} object to register
 *
 * @return true if the listener was successfully added
 *
 * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present
 * @deprecated use {@link #addNmeaListener(OnNmeaMessageListener)} instead.
 * @removed
 */
====>[HIDDEN]<android.location.LocationManager: boolean addNmeaListener(NmeaListener)>    ---->    #addNmeaListener(OnNmeaMessageListener)
<android.widget.CalendarView: void setFocusedMonthDateColor(int)>
/**
 * Sets the color for the dates of the focused month.
 *
 * @param color The focused month date color.
 *
 * @attr ref android.R.styleable#CalendarView_focusedMonthDateColor
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: void setFocusedMonthDateColor(int)>    ---->    
<android.view.KeyEvent: void <init>(KeyEvent,long,int)>
/**
 * Copy an existing key event, modifying its time and repeat count.
 *
 * @deprecated Use {@link #changeTimeRepeat(KeyEvent, long, int)}
 * instead.
 *
 * @param origEvent The existing event to be copied.
 * @param eventTime The new event time
 * (in {@link android.os.SystemClock#uptimeMillis}) of the event.
 * @param newRepeat The new repeat count of the event.
 */
====>[PUBLIC]<android.view.KeyEvent: void <init>(KeyEvent,long,int)>    ---->    #changeTimeRepeat(KeyEvent, long, int)
<android.view.animation.Animation: void setDetachWallpaper(boolean)>
/**
 * If detachWallpaper is true, and this is a window animation of a window
 * that has a wallpaper background, then the window will be detached from
 * the wallpaper while it runs.  That is, the animation will only be applied
 * to the window, and the wallpaper behind it will remain static.
 *
 * @param detachWallpaper true if the wallpaper should be detached from the animation
 * @attr ref android.R.styleable#Animation_detachWallpaper
 *
 * @deprecated All window animations are running with detached wallpaper.
 */
====>[PUBLIC]<android.view.animation.Animation: void setDetachWallpaper(boolean)>    ---->    
<android.net.wifi.WifiEnterpriseConfig: void setSubjectMatch(String)>
/**
 * Set subject match (deprecated). This is the substring to be matched against the subject of
 * the authentication server certificate.
 * @param subjectMatch substring to be matched
 * @deprecated in favor of altSubjectMatch
 */
====>[PUBLIC]<android.net.wifi.WifiEnterpriseConfig: void setSubjectMatch(String)>    ---->    altSubjectMatch
<android.app.TaskStackListener: void onTaskDescriptionChanged(int,TaskDescription)>
/**
 * @deprecated see {@link #onTaskDescriptionChanged(ActivityManager.RunningTaskInfo)}
 */
====>[PUBLIC]<android.app.TaskStackListener: void onTaskDescriptionChanged(int,TaskDescription)>    ---->    #onTaskDescriptionChanged(ActivityManager.RunningTaskInfo)
<android.text.TextUtils: CharSequence commaEllipsize(CharSequence,TextPaint,float,String,String,TextDirectionHeuristic)>
/**
 * @hide
 */
====>[HIDDEN]<android.text.TextUtils: CharSequence commaEllipsize(CharSequence,TextPaint,float,String,String,TextDirectionHeuristic)>    ---->    
<android.app.TaskStackListener: void onTaskMovedToFront(int)>
/**
 * @deprecated see {@link #onTaskMovedToFront(ActivityManager.RunningTaskInfo)}
 */
====>[PUBLIC]<android.app.TaskStackListener: void onTaskMovedToFront(int)>    ---->    #onTaskMovedToFront(ActivityManager.RunningTaskInfo)
<android.content.res.Resources: Movie getMovie(int)>
/**
 * Return a movie object associated with the particular resource ID.
 * @param id The desired resource identifier, as generated by the aapt
 * tool. This integer encodes the package, type, and resource
 * entry. The value 0 is an invalid identifier.
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 * @deprecated Prefer {@link android.graphics.drawable.AnimatedImageDrawable}.
 */
====>[PUBLIC]<android.content.res.Resources: Movie getMovie(int)>    ---->    android.graphics.drawable.AnimatedImageDrawable
<android.webkit.WebViewClient: void onReceivedError(WebView,int,String,String)>
/**
 * Report an error to the host application. These errors are unrecoverable
 * (i.e. the main resource is unavailable). The {@code errorCode} parameter
 * corresponds to one of the {@code ERROR_*} constants.
 * @param view The WebView that is initiating the callback.
 * @param errorCode The error code corresponding to an ERROR_* value.
 * @param description A String describing the error.
 * @param failingUrl The url that failed to load.
 * @deprecated Use {@link #onReceivedError(WebView, WebResourceRequest, WebResourceError)
 * onReceivedError(WebView, WebResourceRequest, WebResourceError)} instead.
 */
====>[PUBLIC]<android.webkit.WebViewClient: void onReceivedError(WebView,int,String,String)>    ---->    #onReceivedError(WebView, WebResourceRequest, WebResourceError)  onReceivedError(WebView, WebResourceRequest, WebResourceError)
<android.nfc.NfcAdapter: boolean isNdefPushEnabled()>
/**
 * Return true if the NDEF Push (Android Beam) feature is enabled.
 * <p>This function will return true only if both NFC is enabled, and the
 * NDEF Push feature is enabled.
 * <p>Note that if NFC is enabled but NDEF Push is disabled then this
 * device can still <i>receive</i> NDEF messages, it just cannot send them.
 * <p>Applications cannot directly toggle the NDEF Push feature, but they
 * can request Settings UI allowing the user to toggle NDEF Push using
 * <code>startActivity(new Intent(Settings.ACTION_NFCSHARING_SETTINGS))</code>
 * <p>Example usage in an Activity that requires NDEF Push:
 * <p><pre>
 * protected void onResume() {
 * super.onResume();
 * if (!nfcAdapter.isEnabled()) {
 * startActivity(new Intent(Settings.ACTION_NFC_SETTINGS));
 * } else if (!nfcAdapter.isNdefPushEnabled()) {
 * startActivity(new Intent(Settings.ACTION_NFCSHARING_SETTINGS));
 * }
 * }</pre>
 *
 * @see android.provider.Settings#ACTION_NFCSHARING_SETTINGS
 * @return true if NDEF Push feature is enabled
 * @throws UnsupportedOperationException if FEATURE_NFC is unavailable.
 * @deprecated this feature is deprecated. File sharing can work using other technology like
 * Bluetooth.
 */
====>[PUBLIC]<android.nfc.NfcAdapter: boolean isNdefPushEnabled()>    ---->    
<android.graphics.Canvas: GL getGL()>
/**
 * Returns null.
 *
 * @deprecated This method is not supported and should not be invoked.
 *
 * @hide
 */
====>[HIDDEN]<android.graphics.Canvas: GL getGL()>    ---->    
<android.graphics.RenderNode: boolean setLayerType(int)>
/**
 * @hide
 * @deprecated use {@link #setUseCompositingLayer(boolean, Paint)} instead
 */
====>[HIDDEN]<android.graphics.RenderNode: boolean setLayerType(int)>    ---->    #setUseCompositingLayer(boolean, Paint)
<android.database.AbstractCursor: boolean isFieldUpdated(int)>
/**
 * @deprecated Always returns false since Cursors do not support updating rows
 */
====>[PUBLIC]<android.database.AbstractCursor: boolean isFieldUpdated(int)>    ---->    
<android.app.admin.DeviceAdminReceiver: void onPasswordChanged(Context,Intent)>
/**
 * Called after the user has changed their device or profile challenge password, as a result of
 * receiving {@link #ACTION_PASSWORD_CHANGED}.  At this point you
 * can use {@link DevicePolicyManager#getPasswordQuality(android.content.ComponentName)}
 * to retrieve the active password characteristics.
 * @param context The running context as per {@link #onReceive}.
 * @param intent The received intent as per {@link #onReceive}.
 *
 * @deprecated From {@link android.os.Build.VERSION_CODES#O}, use
 * {@link #onPasswordChanged(Context, Intent, UserHandle)} instead.
 */
====>[PUBLIC]<android.app.admin.DeviceAdminReceiver: void onPasswordChanged(Context,Intent)>    ---->    #onPasswordChanged(Context, Intent, UserHandle)
<android.app.ActivityManager: List<RunningTaskInfo> getRunningTasks(int)>
/**
 * Return a list of the tasks that are currently running, with
 * the most recent being first and older ones after in order.  Note that
 * "running" does not mean any of the task's code is currently loaded or
 * activity -- the task may have been frozen by the system, so that it
 * can be restarted in its previous state when next brought to the
 * foreground.
 *
 * <p><b>Note: this method is only intended for debugging and presenting
 * task management user interfaces</b>.  This should never be used for
 * core logic in an application, such as deciding between different
 * behaviors based on the information found here.  Such uses are
 * <em>not</em> supported, and will likely break in the future.  For
 * example, if multiple applications can be actively running at the
 * same time, assumptions made about the meaning of the data here for
 * purposes of control flow will be incorrect.</p>
 *
 * @deprecated As of {@link android.os.Build.VERSION_CODES#LOLLIPOP}, this method
 * is no longer available to third party
 * applications: the introduction of document-centric recents means
 * it can leak person information to the caller.  For backwards compatibility,
 * it will still return a small subset of its data: at least the caller's
 * own tasks, and possibly some other tasks
 * such as home that are known to not be sensitive.
 *
 * @param maxNum The maximum number of entries to return in the list.  The
 * actual number returned may be smaller, depending on how many tasks the
 * user has started.
 *
 * @return Returns a list of RunningTaskInfo records describing each of
 * the running tasks.
 */
====>[PUBLIC]<android.app.ActivityManager: List<RunningTaskInfo> getRunningTasks(int)>    ---->    
<com.android.internal.graphics.palette.Palette: Palette generate(Bitmap,int)>
/**
 * @deprecated Use {@link Palette.Builder} to generate the Palette.
 */
====>[PUBLIC]<com.android.internal.graphics.palette.Palette: Palette generate(Bitmap,int)>    ---->    Palette.Builder
<android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>
/**
 * Tests if a given integer represents a valid network type.
 * @param networkType the type to be tested
 * @return a boolean.  {@code true} if the type is valid, else {@code false}
 * @deprecated All APIs accepting a network type are deprecated. There should be no need to
 * validate a network type.
 */
====>[PUBLIC]<android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>    ---->    
<android.location.Location: void removeBearing()>
/**
 * Remove the bearing from this location.
 *
 * <p>Following this call {@link #hasBearing} will return false,
 * and {@link #getBearing} will return 0.0.
 *
 * @deprecated use a new Location object for location updates.
 */
====>[PUBLIC]<android.location.Location: void removeBearing()>    ---->    
<android.hardware.Camera.Parameters: void setPreviewFrameRate(int)>
/**
 * Sets the rate at which preview frames are received. This is the
 * target frame rate. The actual frame rate depends on the driver.
 *
 * @param fps the frame rate (frames per second)
 * @deprecated replaced by {@link #setPreviewFpsRange(int,int)}
 */
====>[PUBLIC]<android.hardware.Camera.Parameters: void setPreviewFrameRate(int)>    ---->    #setPreviewFpsRange(int,int)
<android.bluetooth.BluetoothAdapter: void stopLeScan(LeScanCallback)>
/**
 * Stops an ongoing Bluetooth LE device scan.
 *
 * @param callback used to identify which scan to stop must be the same handle used to start the
 * scan
 * @deprecated Use {@link BluetoothLeScanner#stopScan(ScanCallback)} instead.
 */
====>[PUBLIC]<android.bluetooth.BluetoothAdapter: void stopLeScan(LeScanCallback)>    ---->    BluetoothLeScanner#stopScan(ScanCallback)
<android.app.Activity: boolean onCreateThumbnail(Bitmap,Canvas)>
/**
 * @deprecated Method doesn't do anything and will be removed in the future.
 */
====>[PUBLIC]<android.app.Activity: boolean onCreateThumbnail(Bitmap,Canvas)>    ---->    
<android.app.InstantAppResolverService: void onGetInstantAppIntentFilter(Intent,int[],String,InstantAppResolutionCallback)>
/**
 * Called to retrieve intent filters for potentially matching instant applications. Unlike
 * {@link #onGetInstantAppResolveInfo(Intent, int[], String, InstantAppResolutionCallback)},
 * the response may take as long as necessary to respond. All {@link InstantAppResolveInfo}s
 * provided in response to this method must be completely populated.
 *
 * @param sanitizedIntent The sanitized {@link Intent} used for resolution.
 * @param hostDigestPrefix The hash prefix of the instant app's domain or null if no host is
 * defined.
 * @param token A unique identifier that was provided in
 * {@link #onGetInstantAppResolveInfo(Intent, int[], String,
 * InstantAppResolutionCallback)}
 * and provided to the currently visible installer via
 * {@link Intent#EXTRA_INSTANT_APP_TOKEN}.
 * @param callback The {@link InstantAppResolutionCallback} to provide results to.
 *
 * @deprecated Should implement {@link #onGetInstantAppIntentFilter(Intent, int[], UserHandle,
 * String, InstantAppResolutionCallback)}.
 */
====>[PUBLIC]<android.app.InstantAppResolverService: void onGetInstantAppIntentFilter(Intent,int[],String,InstantAppResolutionCallback)>    ---->    #onGetInstantAppIntentFilter(Intent, int[], UserHandle,  String, InstantAppResolutionCallback)
<android.test.TouchUtils: void scrollToBottom(ActivityInstrumentationTestCase,ViewGroup)>
/**
 * Scroll a ViewGroup to the bottom by repeatedly calling
 * {@link #dragQuarterScreenUp(InstrumentationTestCase, Activity)}
 *
 * @param test The test case that is being run
 * @param v The ViewGroup that should be dragged
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: void scrollToBottom(ActivityInstrumentationTestCase,ViewGroup)>    ---->    android.test.ActivityInstrumentationTestCase2
<android.media.AudioTrack: void <init>(int,int,int,int,int,int,int)>
/**
 * Class constructor with audio session. Use this constructor when the AudioTrack must be
 * attached to a particular audio session. The primary use of the audio session ID is to
 * associate audio effects to a particular instance of AudioTrack: if an audio session ID
 * is provided when creating an AudioEffect, this effect will be applied only to audio tracks
 * and media players in the same session and not to the output mix.
 * When an AudioTrack is created without specifying a session, it will create its own session
 * which can be retrieved by calling the {@link #getAudioSessionId()} method.
 * If a non-zero session ID is provided, this AudioTrack will share effects attached to this
 * session
 * with all other media players or audio tracks in the same session, otherwise a new session
 * will be created for this track if none is supplied.
 * @param streamType the type of the audio stream. See
 * {@link AudioManager#STREAM_VOICE_CALL}, {@link AudioManager#STREAM_SYSTEM},
 * {@link AudioManager#STREAM_RING}, {@link AudioManager#STREAM_MUSIC},
 * {@link AudioManager#STREAM_ALARM}, and {@link AudioManager#STREAM_NOTIFICATION}.
 * @param sampleRateInHz the initial source sample rate expressed in Hz.
 * {@link AudioFormat#SAMPLE_RATE_UNSPECIFIED} means to use a route-dependent value
 * which is usually the sample rate of the sink.
 * @param channelConfig describes the configuration of the audio channels.
 * See {@link AudioFormat#CHANNEL_OUT_MONO} and
 * {@link AudioFormat#CHANNEL_OUT_STEREO}
 * @param audioFormat the format in which the audio data is represented.
 * See {@link AudioFormat#ENCODING_PCM_16BIT} and
 * {@link AudioFormat#ENCODING_PCM_8BIT},
 * and {@link AudioFormat#ENCODING_PCM_FLOAT}.
 * @param bufferSizeInBytes the total size (in bytes) of the internal buffer where audio data is
 * read from for playback. This should be a nonzero multiple of the frame size in bytes.
 * <p> If the track's creation mode is {@link #MODE_STATIC},
 * this is the maximum length sample, or audio clip, that can be played by this instance.
 * <p> If the track's creation mode is {@link #MODE_STREAM},
 * this should be the desired buffer size
 * for the <code>AudioTrack</code> to satisfy the application's
 * latency requirements.
 * If <code>bufferSizeInBytes</code> is less than the
 * minimum buffer size for the output sink, it is increased to the minimum
 * buffer size.
 * The method {@link #getBufferSizeInFrames()} returns the
 * actual size in frames of the buffer created, which
 * determines the minimum frequency to write
 * to the streaming <code>AudioTrack</code> to avoid underrun.
 * You can write data into this buffer in smaller chunks than this size.
 * See {@link #getMinBufferSize(int, int, int)} to determine the estimated minimum buffer size
 * for an AudioTrack instance in streaming mode.
 * @param mode streaming or static buffer. See {@link #MODE_STATIC} and {@link #MODE_STREAM}
 * @param sessionId Id of audio session the AudioTrack must be attached to
 * @throws java.lang.IllegalArgumentException
 * @deprecated use {@link Builder} or
 * {@link #AudioTrack(AudioAttributes, AudioFormat, int, int, int)} to specify the
 * {@link AudioAttributes} instead of the stream type which is only for volume control.
 */
====>[PUBLIC]<android.media.AudioTrack: void <init>(int,int,int,int,int,int,int)>    ---->    Builder
<android.telecom.Call: void removeListener(Listener)>
/**
 * Removes a listener from this {@code Call}.
 *
 * @param listener A {@code Listener}.
 * @deprecated Use {@link #unregisterCallback} instead.
 * @hide
 */
====>[HIDDEN]<android.telecom.Call: void removeListener(Listener)>    ---->    #unregisterCallback
<android.view.View: int getDrawingCacheBackgroundColor()>
/**
 * @see #setDrawingCacheBackgroundColor(int)
 *
 * @return The background color to used for the drawing cache's bitmap
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: int getDrawingCacheBackgroundColor()>    ---->    #setLayerType(int, Paint)
<android.app.FragmentManagerImpl: void dispatchPictureInPictureModeChanged(boolean)>
/**
 * @deprecated use {@link #dispatchPictureInPictureModeChanged(boolean, Configuration)}
 */
====>[PUBLIC]<android.app.FragmentManagerImpl: void dispatchPictureInPictureModeChanged(boolean)>    ---->    #dispatchPictureInPictureModeChanged(boolean, Configuration)
<android.renderscript.RenderScriptGL.SurfaceConfig: void setDepth(int,int)>
/**
 * @deprecated in API 16
 * Set the bit depth for the depth buffer. This configures the
 * surface for an unsigned integer buffer type.  If a minimum of 0
 * is specified then its possible no depth buffer will be
 * allocated.
 *
 * @param minimum
 * @param preferred
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL.SurfaceConfig: void setDepth(int,int)>    ---->    
Inconsistency (Non-Documentation):<android.graphics.BaseCanvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,Paint)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//graphics/java/android/graphics/BaseCanvas.java
<android.graphics.BaseCanvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,Paint)>

====>[PUBLIC]<android.graphics.BaseCanvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,Paint)>    ---->    
<com.android.server.pm.PackageManagerService: void querySyncProviders(List<String>,List<ProviderInfo>)>
/**
 * @deprecated
 */
====>[PUBLIC]<com.android.server.pm.PackageManagerService: void querySyncProviders(List<String>,List<ProviderInfo>)>    ---->    
<android.media.RingtoneManager: boolean getIncludeDrm()>
/**
 * Returns whether DRM ringtones will be included.
 *
 * @return Whether DRM ringtones will be included.
 * @see #setIncludeDrm(boolean)
 * Obsolete - always returns false
 * @deprecated DRM ringtones are no longer supported
 */
====>[PUBLIC]<android.media.RingtoneManager: boolean getIncludeDrm()>    ---->    
<android.inputmethodservice.InputMethodService: void onViewClicked(boolean)>
/**
 * Called when the user tapped or clicked a text view.
 * IMEs can't rely on this method being called because this was not part of the original IME
 * protocol, so applications with custom text editing written before this method appeared will
 * not call to inform the IME of this interaction.
 * @param focusChanged true if the user changed the focused view by this click.
 * @see InputMethodManager#viewClicked(View)
 * @deprecated The method may not be called for composite {@link View} that works as a giant
 * "Canvas", which can host its own UI hierarchy and sub focus state.
 * {@link android.webkit.WebView} is a good example. Application / IME developers
 * should not rely on this method. If your goal is just being notified when an
 * on-going input is interrupted, simply monitor {@link #onFinishInput()}.
 */
====>[PUBLIC]<android.inputmethodservice.InputMethodService: void onViewClicked(boolean)>    ---->    View
<android.graphics.drawable.NinePatchDrawable: void <init>(NinePatch)>
/**
 * Create drawable from existing nine-patch, not dealing with density.
 *
 * @deprecated Use {@link #NinePatchDrawable(Resources, NinePatch)}
 * to ensure that the drawable has correctly set its target
 * density.
 */
====>[PUBLIC]<android.graphics.drawable.NinePatchDrawable: void <init>(NinePatch)>    ---->    #NinePatchDrawable(Resources, NinePatch)
<com.android.systemui.bubbles.BubbleStackView: void setExpandedBubble(String)>
/**
 * Sets the bubble that should be expanded and expands if needed.
 *
 * @param key the {@link NotificationEntry#key} associated with the bubble to expand.
 * @deprecated replaced by setSelectedBubble(Bubble) + setExpanded(true)
 */
====>[PUBLIC]<com.android.systemui.bubbles.BubbleStackView: void setExpandedBubble(String)>    ---->    
<android.net.ConnectivityManager: NetworkInfo getNetworkInfo(Network)>
/**
 * Returns connection status information about a particular
 * Network.
 *
 * @param network {@link Network} specifying which network
 * in which you're interested.
 * @return a {@link NetworkInfo} object for the requested
 * network or {@code null} if the {@code Network}
 * is not valid.
 * @deprecated See {@link NetworkInfo}.
 */
====>[PUBLIC]<android.net.ConnectivityManager: NetworkInfo getNetworkInfo(Network)>    ---->    NetworkInfo
<android.view.View: boolean startDrag(ClipData,DragShadowBuilder,Object,int)>
/**
 * @deprecated Use {@link #startDragAndDrop(ClipData, DragShadowBuilder, Object, int)
 * startDragAndDrop()} for newer platform versions.
 */
====>[PUBLIC]<android.view.View: boolean startDrag(ClipData,DragShadowBuilder,Object,int)>    ---->    #startDragAndDrop(ClipData, DragShadowBuilder, Object, int)  startDragAndDrop()
<android.media.ThumbnailUtils: Bitmap createAudioThumbnail(String,int)>
/**
 * Create a thumbnail for given audio file.
 *
 * @param filePath The audio file.
 * @param kind The desired thumbnail kind, such as
 * {@link android.provider.MediaStore.Images.Thumbnails#MINI_KIND}.
 * @deprecated Callers should migrate to using
 * {@link #createAudioThumbnail(File, Size, CancellationSignal)},
 * as it offers more control over resizing and cancellation.
 */
====>[PUBLIC]<android.media.ThumbnailUtils: Bitmap createAudioThumbnail(String,int)>    ---->    #createAudioThumbnail(File, Size, CancellationSignal)
<android.view.ViewDebug: void stopHierarchyTracing()>
/**
 * @deprecated This method is now unused and invoking it is a no-op
 */
====>[PUBLIC]<android.view.ViewDebug: void stopHierarchyTracing()>    ---->    
Inconsistency (Non-Documentation):<android.net.NetworkTemplate: NetworkTemplate buildTemplateWifi()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/net/NetworkTemplate.java
<android.net.NetworkTemplate: NetworkTemplate buildTemplateWifi()>

====>[PUBLIC]<android.net.NetworkTemplate: NetworkTemplate buildTemplateWifi()>    ---->    
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: WearableExtender setHintHideIcon(boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.WearableExtender: WearableExtender setHintHideIcon(boolean)>
/**
 * Set a hint that this notification's icon should not be displayed.
 * @param hintHideIcon {@code true} to hide the icon, {@code false} otherwise.
 * @return this object for method chaining
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: WearableExtender setHintHideIcon(boolean)>    ---->    
<android.util.proto.ProtoOutputStream: void writePackedFixed32(long,int[])>
/**
 * Write a list of packed proto "fixed32" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedFixed32(long,int[])>    ---->    #write
<android.database.sqlite.SQLiteOpenHelper: void setIdleConnectionTimeout(long)>
/**
 * Sets the maximum number of milliseconds that SQLite connection is allowed to be idle
 * before it is closed and removed from the pool.
 *
 * <p>This method should be called from the constructor of the subclass,
 * before opening the database
 *
 * <p><b>DO NOT USE</b> this method.
 * This feature has negative side effects that are very hard to foresee.
 * See the javadoc of
 * {@link SQLiteDatabase.OpenParams.Builder#setIdleConnectionTimeout(long)}
 * for the details.
 *
 * @param idleConnectionTimeoutMs timeout in milliseconds. Use {@link Long#MAX_VALUE} value
 * to allow unlimited idle connections.
 *
 * @see SQLiteDatabase.OpenParams.Builder#setIdleConnectionTimeout(long)
 *
 * @deprecated DO NOT USE this method. See the javadoc of
 * {@link SQLiteDatabase.OpenParams.Builder#setIdleConnectionTimeout(long)}
 * for the details.
 */
====>[PUBLIC]<android.database.sqlite.SQLiteOpenHelper: void setIdleConnectionTimeout(long)>    ---->    SQLiteDatabase.OpenParams.Builder#setIdleConnectionTimeout(long)
<android.nfc.NfcAdapter: void disableForegroundNdefPush(Activity)>
/**
 * Disable NDEF message push over P2P.
 *
 * <p>After calling {@link #enableForegroundNdefPush}, an activity
 * must call this method before its {@link Activity#onPause} callback
 * completes.
 *
 * <p>Strongly recommend to use the new {@link #setNdefPushMessage}
 * instead: it automatically hooks into your activity life-cycle,
 * so you do not need to call enable/disable in your onResume/onPause.
 *
 * <p>This method must be called from the main thread.
 *
 * <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
 *
 * @param activity the Foreground activity
 * @throws IllegalStateException if the Activity has already been paused
 * @throws UnsupportedOperationException if FEATURE_NFC is unavailable.
 * @deprecated use {@link #setNdefPushMessage} instead
 */
====>[PUBLIC]<android.nfc.NfcAdapter: void disableForegroundNdefPush(Activity)>    ---->    #setNdefPushMessage
<android.webkit.PluginList: void removePlugin(Plugin)>
/**
 * Removes a plugin from the list.
 *
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.PluginList: void removePlugin(Plugin)>    ---->    
<android.provider.MediaStore.Video.Thumbnails: void cancelThumbnailRequest(ContentResolver,long,long)>
/**
 * Cancel any outstanding {@link #getThumbnail} requests, causing
 * them to return by throwing a {@link OperationCanceledException}.
 * <p>
 * This method has no effect on
 * {@link ContentResolver#loadThumbnail} calls, since they provide
 * their own {@link CancellationSignal}.
 *
 * @deprecated Callers should migrate to using
 * {@link ContentResolver#loadThumbnail}, since it
 * offers richer control over requested thumbnail sizes
 * and cancellation behavior.
 */
====>[PUBLIC]<android.provider.MediaStore.Video.Thumbnails: void cancelThumbnailRequest(ContentResolver,long,long)>    ---->    
<android.view.ViewDebug: AutoCloseable startRenderingCommandsCapture(View,Executor,Function<Picture, Boolean>)>
/**
 * Begins capturing the entire rendering commands for the view tree referenced by the given
 * view. The view passed may be any View in the tree as long as it is attached. That is,
 * {@link View#isAttachedToWindow()} must be true.
 *
 * Every time a frame is rendered a Picture will be passed to the given callback via the given
 * executor. As long as the callback returns 'true' it will continue to receive new frames.
 * The system will only invoke the callback at a rate that the callback is able to keep up with.
 * That is, if it takes 48ms for the callback to complete and there is a 60fps animation running
 * then the callback will only receive 33% of the frames produced.
 *
 * This method must be called on the same thread as the View tree.
 *
 * @param tree The View tree to capture the rendering commands.
 * @param callback The callback to invoke on every frame produced. Should return true to
 * continue receiving new frames, false to stop capturing.
 * @param executor The executor to invoke the callback on. Recommend using a background thread
 * to avoid stalling the UI thread. Must be an asynchronous invoke or an
 * exception will be thrown.
 * @return a closeable that can be used to stop capturing. May be invoked on any thread. Note
 * that the callback may continue to receive another frame or two depending on thread timings.
 * Returns null if the capture stream cannot be started, such as if there's no
 * HardwareRenderer for the given view tree.
 * @hide
 * @deprecated use {@link #startRenderingCommandsCapture(View, Executor, Callable)} instead.
 */
====>[HIDDEN]<android.view.ViewDebug: AutoCloseable startRenderingCommandsCapture(View,Executor,Function<Picture, Boolean>)>    ---->    #startRenderingCommandsCapture(View, Executor, Callable)
<android.webkit.PluginData: long getContentLength()>
/**
 * Returns the length of the plugin content.
 *
 * @return the length of the plugin content.
 *
 * @hide
 * @deprecated This class was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.PluginData: long getContentLength()>    ---->    
Inconsistency (Non-Documentation):<com.android.server.connectivity.Vpn: void interfaceStatusChanged(String,boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//services/core/java/com/android/server/connectivity/Vpn.java
<com.android.server.connectivity.Vpn: void interfaceStatusChanged(String,boolean)>

====>[PUBLIC]<com.android.server.connectivity.Vpn: void interfaceStatusChanged(String,boolean)>    ---->    
<android.app.Activity: Cursor managedQuery(Uri,String[],String,String)>
/**
 * Wrapper around
 * {@link ContentResolver#query(android.net.Uri , String[], String, String[], String)}
 * that gives the resulting {@link Cursor} to call
 * {@link #startManagingCursor} so that the activity will manage its
 * lifecycle for you.
 *
 * <em>If you are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}
 * or later, consider instead using {@link LoaderManager} instead, available
 * via {@link #getLoaderManager()}.</em>
 *
 * <p><strong>Warning:</strong> Do not call {@link Cursor#close()} on a cursor obtained using
 * this method, because the activity will do that for you at the appropriate time. However, if
 * you call {@link #stopManagingCursor} on a cursor from a managed query, the system <em>will
 * not</em> automatically close the cursor and, in that case, you must call
 * {@link Cursor#close()}.</p>
 *
 * @param uri The URI of the content provider to query.
 * @param projection List of columns to return.
 * @param selection SQL WHERE clause.
 * @param sortOrder SQL ORDER BY clause.
 *
 * @return The Cursor that was returned by query().
 *
 * @see ContentResolver#query(android.net.Uri , String[], String, String[], String)
 * @see #startManagingCursor
 * @hide
 *
 * @deprecated Use {@link CursorLoader} instead.
 */
====>[HIDDEN]<android.app.Activity: Cursor managedQuery(Uri,String[],String,String)>    ---->    CursorLoader
<android.service.autofill.AutofillFieldClassificationService: float[][] onGetScores(String,Bundle,List<AutofillValue>,List<String>)>
/**
 * Calculates field classification scores in a batch.
 *
 * <p>A field classification score is a {@code float} representing how well an
 * {@link AutofillValue} filled matches a expected value predicted by an autofill service
 * &mdash;a full match is {@code 1.0} (representing 100%), while a full mismatch is {@code 0.0}.
 *
 * <p>The exact score depends on the algorithm used to calculate it&mdash;the service must
 * provide at least one default algorithm (which is used when the algorithm is not specified
 * or is invalid), but it could provide more (in which case the algorithm name should be
 * specified by the caller when calculating the scores).
 *
 * <p>For example, if the service provides an algorithm named {@code EXACT_MATCH} that
 * returns {@code 1.0} if all characters match or {@code 0.0} otherwise, a call to:
 *
 * <pre>
 * service.onGetScores("EXACT_MATCH", null,
 * Arrays.asList(AutofillValue.forText("email1"), AutofillValue.forText("PHONE1")),
 * Arrays.asList("email1", "phone1"));
 * </pre>
 *
 * <p>Returns:
 *
 * <pre>
 * [
 * [1.0, 0.0], // "email1" compared against ["email1", "phone1"]
 * [0.0, 0.0]  // "PHONE1" compared against ["email1", "phone1"]
 * ];
 * </pre>
 *
 * <p>If the same algorithm allows the caller to specify whether the comparisons should be
 * case sensitive by passing a boolean option named {@code "case_sensitive"}, then a call to:
 *
 * <pre>
 * Bundle algorithmOptions = new Bundle();
 * algorithmOptions.putBoolean("case_sensitive", false);
 *
 * service.onGetScores("EXACT_MATCH", algorithmOptions,
 * Arrays.asList(AutofillValue.forText("email1"), AutofillValue.forText("PHONE1")),
 * Arrays.asList("email1", "phone1"));
 * </pre>
 *
 * <p>Returns:
 *
 * <pre>
 * [
 * [1.0, 0.0], // "email1" compared against ["email1", "phone1"]
 * [0.0, 1.0]  // "PHONE1" compared against ["email1", "phone1"]
 * ];
 * </pre>
 *
 * @param algorithm name of the algorithm to be used to calculate the scores. If invalid or
 * {@code null}, the default algorithm is used instead.
 * @param algorithmOptions optional arguments to be passed to the algorithm.
 * @param actualValues values entered by the user.
 * @param userDataValues values predicted from the user data.
 * @return the calculated scores of {@code actualValues} x {@code userDataValues}.
 *
 * {@hide}
 *
 * @deprecated Use {@link AutofillFieldClassificationService#onCalculateScores} instead.
 */
====>[HIDDEN]<android.service.autofill.AutofillFieldClassificationService: float[][] onGetScores(String,Bundle,List<AutofillValue>,List<String>)>    ---->    AutofillFieldClassificationService#onCalculateScores
<android.app.Notification: void <init>(int,CharSequence,long)>
/**
 * Constructs a Notification object with the information needed to
 * have a status bar icon without the standard expanded view.
 *
 * @param icon          The resource id of the icon to put in the status bar.
 * @param tickerText    The text that flows by in the status bar when the notification first
 * activates.
 * @param when          The time to show in the time field.  In the System.currentTimeMillis
 * timebase.
 *
 * @deprecated Use {@link Builder} instead.
 */
====>[PUBLIC]<android.app.Notification: void <init>(int,CharSequence,long)>    ---->    Builder
<android.view.ViewParent: ViewParent invalidateChildInParent(int[],Rect)>
/**
 * All or part of a child is dirty and needs to be redrawn.
 *
 * <p>The location array is an array of two int values which respectively
 * define the left and the top position of the dirty child.</p>
 *
 * <p>This method must return the parent of this ViewParent if the specified
 * rectangle must be invalidated in the parent. If the specified rectangle
 * does not require invalidation in the parent or if the parent does not
 * exist, this method must return null.</p>
 *
 * <p>When this method returns a non-null value, the location array must
 * have been updated with the left and top coordinates of this ViewParent.</p>
 *
 * @param location An array of 2 ints containing the left and top
 * coordinates of the child to invalidate
 * @param r The area within the child that is invalid
 *
 * @return the parent of this ViewParent or null
 *
 * @deprecated Use {@link #onDescendantInvalidated(View, View)} instead.
 */
====>[PUBLIC]<android.view.ViewParent: ViewParent invalidateChildInParent(int[],Rect)>    ---->    #onDescendantInvalidated(View, View)
<android.view.ViewGroup: void setAlwaysDrawnWithCacheEnabled(boolean)>
/**
 * Indicates whether this ViewGroup will always try to draw its children using their
 * drawing cache. This property can be set to true when the cache rendering is
 * slightly different from the children's normal rendering. Renderings can be different,
 * for instance, when the cache's quality is set to low.
 *
 * When this property is disabled, the ViewGroup will use the drawing cache of its
 * children only when asked to. It's usually the task of subclasses to tell ViewGroup
 * when to start using the drawing cache and when to stop using it.
 *
 * @param always true to always draw with the drawing cache, false otherwise
 *
 * @see #isAlwaysDrawnWithCacheEnabled()
 * @see #setChildrenDrawnWithCacheEnabled(boolean)
 * @see View#setDrawingCacheEnabled(boolean)
 * @see View#setDrawingCacheQuality(int)
 *
 * @deprecated As of {@link android.os.Build.VERSION_CODES#M}, this property is ignored.
 * Child views may no longer have their caching behavior disabled by parents.
 */
====>[PUBLIC]<android.view.ViewGroup: void setAlwaysDrawnWithCacheEnabled(boolean)>    ---->    
<android.bluetooth.le.ScanResult: void <init>(BluetoothDevice,ScanRecord,int,long)>
/**
 * Constructs a new ScanResult.
 *
 * @param device Remote Bluetooth device found.
 * @param scanRecord Scan record including both advertising data and scan response data.
 * @param rssi Received signal strength.
 * @param timestampNanos Timestamp at which the scan result was observed.
 * @deprecated use {@link #ScanResult(BluetoothDevice, int, int, int, int, int, int, int,
 * ScanRecord, long)}
 */
====>[PUBLIC]<android.bluetooth.le.ScanResult: void <init>(BluetoothDevice,ScanRecord,int,long)>    ---->    #ScanResult(BluetoothDevice, int, int, int, int, int, int, int,  ScanRecord, long)
<android.telephony.NeighboringCellInfo: void setCid(int)>
/**
 * Set the cell id.
 *
 * NeighboringCellInfo is a one time shot for the neighboring cells based on
 * the radio network type at that moment. It shouldn't be changed after
 * creation.
 *
 * @deprecated cid value passed as in location parameter passed to constructor
 * {@link #NeighboringCellInfo(int, String, int)}
 */
====>[PUBLIC]<android.telephony.NeighboringCellInfo: void setCid(int)>    ---->    #NeighboringCellInfo(int, String, int)
<android.webkit.WebView: void enablePlatformNotifications()>
/**
 * Enables platform notifications of data state and proxy changes.
 * Notifications are enabled by default.
 *
 * @deprecated This method is now obsolete.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebView: void enablePlatformNotifications()>    ---->    
<android.hardware.Camera.Parameters: int getPreviewFrameRate()>
/**
 * Returns the setting for the rate at which preview frames are
 * received. This is the target frame rate. The actual frame rate
 * depends on the driver.
 *
 * @return the frame rate setting (frames per second)
 * @deprecated replaced by {@link #getPreviewFpsRange(int[])}
 */
====>[PUBLIC]<android.hardware.Camera.Parameters: int getPreviewFrameRate()>    ---->    #getPreviewFpsRange(int[])
<android.net.NetworkInfo: String getReason()>
/**
 * Report the reason an attempt to establish connectivity failed,
 * if one is available.
 * @return the reason for failure, or null if not available
 * @deprecated This method does not have a consistent contract that could make it useful
 * to callers.
 */
====>[PUBLIC]<android.net.NetworkInfo: String getReason()>    ---->    
<android.media.AudioManager: int abandonAudioFocus(OnAudioFocusChangeListener,AudioAttributes)>
/**
 * @hide
 * Abandon audio focus. Causes the previous focus owner, if any, to receive focus.
 * @param l the listener with which focus was requested.
 * @param aa the {@link AudioAttributes} with which audio focus was requested
 * @return {@link #AUDIOFOCUS_REQUEST_FAILED} or {@link #AUDIOFOCUS_REQUEST_GRANTED}
 * @deprecated use {@link #abandonAudioFocusRequest(AudioFocusRequest)}
 */
====>[HIDDEN]<android.media.AudioManager: int abandonAudioFocus(OnAudioFocusChangeListener,AudioAttributes)>    ---->    #abandonAudioFocusRequest(AudioFocusRequest)
<android.net.wifi.WifiManager.WpsCallback: void onFailed(int)>
/**
 * WPS operation failed
 * @param reason The reason for failure could be one of
 * {@link #WPS_TKIP_ONLY_PROHIBITED}, {@link #WPS_OVERLAP_ERROR},
 * {@link #WPS_WEP_PROHIBITED}, {@link #WPS_TIMED_OUT} or {@link #WPS_AUTH_FAILURE}
 * and some generic errors.
 * @deprecated This API is deprecated
 */
====>[PUBLIC]<android.net.wifi.WifiManager.WpsCallback: void onFailed(int)>    ---->    
Inconsistency (Non-Documentation):<com.android.systemui.shared.recents.model.Task: void setWindowingMode(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//packages/SystemUI/shared/src/com/android/systemui/shared/recents/model/Task.java
<com.android.systemui.shared.recents.model.Task: void setWindowingMode(int)>
/**
 * Updates the task's windowing mode.
 */
====>[PUBLIC]<com.android.systemui.shared.recents.model.Task: void setWindowingMode(int)>    ---->    
<android.telephony.UiccSlotInfo: void <init>(boolean,boolean,String,int,int,boolean)>
/**
 * Construct a UiccSlotInfo.
 * @deprecated apps should not be constructing UiccSlotInfo objects
 */
====>[PUBLIC]<android.telephony.UiccSlotInfo: void <init>(boolean,boolean,String,int,int,boolean)>    ---->    
<android.renderscript.Font: Font createFromAsset(RenderScript,Resources,String,float)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.Font: Font createFromAsset(RenderScript,Resources,String,float)>    ---->    
<android.net.ConnectivityManager: boolean setProcessDefaultNetworkForHostResolution(Network)>
/**
 * Binds host resolutions performed by this process to {@code network}.
 * {@link #bindProcessToNetwork} takes precedence over this setting.
 *
 * @param network The {@link Network} to bind host resolutions from the current process to, or
 * {@code null} to clear the current binding.
 * @return {@code true} on success, {@code false} if the {@link Network} is no longer valid.
 * @hide
 * @deprecated This is strictly for legacy usage to support {@link #startUsingNetworkFeature}.
 */
====>[HIDDEN]<android.net.ConnectivityManager: boolean setProcessDefaultNetworkForHostResolution(Network)>    ---->    #startUsingNetworkFeature
<android.webkit.CookieManager: void removeExpiredCookie()>
/**
 * Removes all expired cookies.
 * @deprecated The WebView handles removing expired cookies automatically.
 */
====>[PUBLIC]<android.webkit.CookieManager: void removeExpiredCookie()>    ---->    
Inconsistency (Non-Documentation):<com.android.internal.content.PackageHelper: String resolveInstallVolume(Context,String,int,long,TestableInterface)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/com/android/internal/content/PackageHelper.java
<com.android.internal.content.PackageHelper: String resolveInstallVolume(Context,String,int,long,TestableInterface)>

====>[PUBLIC]<com.android.internal.content.PackageHelper: String resolveInstallVolume(Context,String,int,long,TestableInterface)>    ---->    
<android.os.Debug: int getThreadExternalAllocCount()>
/**
 * This method exists for compatibility and has no effect.
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: int getThreadExternalAllocCount()>    ---->    
<android.hardware.radio.RadioManager.ProgramInfo: boolean isDigital()>
/**
 * {@code true} if the received program is digital (e.g HD radio)
 * @return {@code true} if digital, {@code false} otherwise.
 * @deprecated Use {@link getLogicallyTunedTo()} instead.
 */
====>[PUBLIC]<android.hardware.radio.RadioManager.ProgramInfo: boolean isDigital()>    ---->    getLogicallyTunedTo()
<android.telephony.SignalStrength: int getTdScdmaLevel()>
/**
 * Get TD-SCDMA as level 0..4
 * Range : 25 to 120
 * INT_MAX: 0x7FFFFFFF denotes invalid value
 * Reference: 3GPP TS 25.123, section 9.1.1.1
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthTdscdma#getLevel}.
 *
 * @see android.telephony#CellSignalStrengthTdscdma
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getTdScdmaLevel()>    ---->    android.telephony#CellSignalStrengthTdscdma
Inconsistency (Non-Documentation):<android.net.NetworkStatsHistory: void recordData(long,long,long,long)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/net/NetworkStatsHistory.java
<android.net.NetworkStatsHistory: void recordData(long,long,long,long)>
/**
 * Record that data traffic occurred in the given time range. Will
 * distribute across internal buckets, creating new buckets as needed.
 */
====>[PUBLIC]<android.net.NetworkStatsHistory: void recordData(long,long,long,long)>    ---->    
Inconsistency (Non-Documentation):<android.webkit.WebView: boolean shouldDelayChildPressedState()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/webkit/WebView.java
<android.webkit.WebView: boolean shouldDelayChildPressedState()>

====>[PUBLIC]<android.webkit.WebView: boolean shouldDelayChildPressedState()>    ---->    
<android.net.NetworkInfo: boolean isAvailable()>
/**
 * Indicates whether network connectivity is possible. A network is unavailable
 * when a persistent or semi-persistent condition prevents the possibility
 * of connecting to that network. Examples include
 * <ul>
 * <li>The device is out of the coverage area for any network of this type.</li>
 * <li>The device is on a network other than the home network (i.e., roaming), and
 * data roaming has been disabled.</li>
 * <li>The device's radio is turned off, e.g., because airplane mode is enabled.</li>
 * </ul>
 * Since Android L, this always returns {@code true}, because the system only
 * returns info for available networks.
 * @return {@code true} if the network is available, {@code false} otherwise
 * @deprecated Apps should instead use the
 * {@link android.net.ConnectivityManager.NetworkCallback} API to
 * learn about connectivity changes.
 * {@link ConnectivityManager#registerDefaultNetworkCallback} and
 * {@link ConnectivityManager#registerNetworkCallback}. These will
 * give a more accurate picture of the connectivity state of
 * the device and let apps react more easily and quickly to changes.
 */
====>[PUBLIC]<android.net.NetworkInfo: boolean isAvailable()>    ---->    android.net.ConnectivityManager.NetworkCallback
Inconsistency (Non-Documentation):<android.test.mock.MockCursor: void deactivate()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//test-mock/src/android/test/mock/MockCursor.java
<android.test.mock.MockCursor: void deactivate()>

====>[PUBLIC]<android.test.mock.MockCursor: void deactivate()>    ---->    
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: boolean getHintShowBackgroundOnly()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.WearableExtender: boolean getHintShowBackgroundOnly()>
/**
 * Get a visual hint that only the background image of this notification should be
 * displayed, and other semantic content should be hidden. This hint is only applicable
 * to sub-pages added using {@link android.app.Notification.WearableExtender#addPage}.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: boolean getHintShowBackgroundOnly()>    ---->    
<android.util.proto.ProtoOutputStream: void writeRepeatedSFixed32(long,int)>
/**
 * Write a single repeated proto "sfixed32" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedSFixed32(long,int)>    ---->    #write
Inconsistency (Non-Documentation):<android.os.UserManager: void setUserRestrictions(Bundle)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/os/UserManager.java
<android.os.UserManager: void setUserRestrictions(Bundle)>
/**
 * This will no longer work.  Device owners and profile owners should use
 * {@link DevicePolicyManager#addUserRestriction(ComponentName, String)} instead.
 */
====>[PUBLIC]<android.os.UserManager: void setUserRestrictions(Bundle)>    ---->    
<android.webkit.WebSettings: boolean getPluginsEnabled()>
/**
 * Gets whether plugins are enabled.
 *
 * @return {@code true} if plugins are enabled
 * @see #setPluginsEnabled
 * @deprecated This method has been replaced by {@link #getPluginState}
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}
 */
====>[HIDDEN]<android.webkit.WebSettings: boolean getPluginsEnabled()>    ---->    #getPluginState
<android.util.proto.ProtoOutputStream: void writePackedDouble(long,double[])>
/**
 * Write a list of packed proto "double" type field values.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedDouble(long,double[])>    ---->    #write
<android.provider.Contacts.People: Uri addToGroup(ContentResolver,long,String)>
/**
 * Adds a person to a group referred to by name.
 *
 * @param resolver the resolver to use
 * @param personId the person to add to the group
 * @param groupName the name of the group to add the contact to
 * @return the URI of the group membership row
 * @throws IllegalStateException if the group can't be found
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.People: Uri addToGroup(ContentResolver,long,String)>    ---->    android.provider.ContactsContract
<android.location.GnssMeasurement: void setCarrierPhaseUncertainty(double)>
/**
 * Sets the Carrier-phase's uncertainty (1-Sigma) in cycles.
 *
 * @deprecated use {@link #setAccumulatedDeltaRangeUncertaintyMeters(double)}
 * and {@link #setAccumulatedDeltaRangeState(int)} instead.
 *
 * @hide
 */
====>[HIDDEN]<android.location.GnssMeasurement: void setCarrierPhaseUncertainty(double)>    ---->    #setAccumulatedDeltaRangeUncertaintyMeters(double)
<android.renderscript.RenderScriptGL.SurfaceConfig: void <init>(SurfaceConfig)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL.SurfaceConfig: void <init>(SurfaceConfig)>    ---->    
<android.view.ViewGroup: boolean isAnimationCacheEnabled()>
/**
 * Indicates whether the children's drawing cache is used during a layout
 * animation. By default, the drawing cache is enabled but this will prevent
 * nested layout animations from working. To nest animations, you must disable
 * the cache.
 *
 * @return true if the animation cache is enabled, false otherwise
 *
 * @see #setAnimationCacheEnabled(boolean)
 * @see View#setDrawingCacheEnabled(boolean)
 *
 * @deprecated As of {@link android.os.Build.VERSION_CODES#M}, this property is ignored.
 * Caching behavior of children may be controlled through {@link View#setLayerType(int, Paint)}.
 */
====>[PUBLIC]<android.view.ViewGroup: boolean isAnimationCacheEnabled()>    ---->    
<android.content.ContextWrapper: void sendStickyBroadcastAsUser(Intent,UserHandle,Bundle)>
/**
 * @hide
 */
====>[HIDDEN]<android.content.ContextWrapper: void sendStickyBroadcastAsUser(Intent,UserHandle,Bundle)>    ---->    
<android.app.Activity: LoaderManager getLoaderManager()>
/**
 * Return the LoaderManager for this activity, creating it if needed.
 *
 * @deprecated Use {@link android.support.v4.app.FragmentActivity#getSupportLoaderManager()}
 */
====>[PUBLIC]<android.app.Activity: LoaderManager getLoaderManager()>    ---->    android.support.v4.app.FragmentActivity#getSupportLoaderManager()
<android.renderscript.Mesh.Builder: Builder addIndexSetType(Element,int,Primitive)>
/**
 * @deprecated in API 16
 * Adds an index set data type to the builder object
 *
 * @param e element describing the index set data layout
 * @param size number of elements in the buffer
 * @param p primitive type
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.Builder: Builder addIndexSetType(Element,int,Primitive)>    ---->    
<android.provider.Settings.System: boolean getShowGTalkServiceStatusForUser(ContentResolver,int)>
/**
 * @hide
 * @deprecated - Do not use
 */
====>[HIDDEN]<android.provider.Settings.System: boolean getShowGTalkServiceStatusForUser(ContentResolver,int)>    ---->    
<android.service.notification.NotificationListenerService: void cancelNotification(String,String,int)>
/**
 * Inform the notification manager about dismissal of a single notification.
 * <p>
 * Use this if your listener has a user interface that allows the user to dismiss individual
 * notifications, similar to the behavior of Android's status bar and notification panel.
 * It should be called after the user dismisses a single notification using your UI;
 * upon being informed, the notification manager will actually remove the notification
 * and you will get an {@link #onNotificationRemoved(StatusBarNotification)} callback.
 * <p>
 * <b>Note:</b> If your listener allows the user to fire a notification's
 * {@link android.app.Notification#contentIntent} by tapping/clicking/etc., you should call
 * this method at that time <i>if</i> the Notification in question has the
 * {@link android.app.Notification#FLAG_AUTO_CANCEL} flag set.
 *
 * <p>The service should wait for the {@link #onListenerConnected()} event
 * before performing this operation.
 *
 * @param pkg Package of the notifying app.
 * @param tag Tag of the notification as specified by the notifying app in
 * {@link android.app.NotificationManager#notify(String, int, android.app.Notification)}.
 * @param id  ID of the notification as specified by the notifying app in
 * {@link android.app.NotificationManager#notify(String, int, android.app.Notification)}.
 * <p>
 * @deprecated Use {@link #cancelNotification(String key)}
 * instead. Beginning with {@link android.os.Build.VERSION_CODES#LOLLIPOP} this method will no longer
 * cancel the notification. It will continue to cancel the notification for applications
 * whose {@code targetSdkVersion} is earlier than {@link android.os.Build.VERSION_CODES#LOLLIPOP}.
 */
====>[PUBLIC]<android.service.notification.NotificationListenerService: void cancelNotification(String,String,int)>    ---->    #cancelNotification(String key)
<android.telephony.TelephonyManager: void setCarrierTestOverride(String,String,String,String,String,String,String)>
/**
 * A test API to override carrier information including mccmnc, imsi, iccid, gid1, gid2,
 * plmn and spn. This would be handy for, eg, forcing a particular carrier id, carrier's config
 * (also any country or carrier overlays) to be loaded when using a test SIM with a call box.
 *
 * <p>Requires Permission:
 * {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}
 *
 * @deprecated
 * @hide
 */
====>[HIDDEN]<android.telephony.TelephonyManager: void setCarrierTestOverride(String,String,String,String,String,String,String)>    ---->    
<android.net.ConnectivityManager: boolean isNetworkTypeWifi(int)>
/**
 * Checks if the given network type is backed by a Wi-Fi radio.
 *
 * @deprecated Types are deprecated. Use {@link NetworkCapabilities} instead.
 * @hide
 */
====>[HIDDEN]<android.net.ConnectivityManager: boolean isNetworkTypeWifi(int)>    ---->    NetworkCapabilities
<android.webkit.WebSettings: PluginState getPluginState()>
/**
 * Gets the current state regarding whether plugins are enabled.
 *
 * @return the plugin state as a {@link PluginState} value
 * @see #setPluginState
 * @deprecated Plugins are not supported in API level
 * {@link android.os.Build.VERSION_CODES#KITKAT} or later;
 * enabling plugins is a no-op.
 */
====>[PUBLIC]<android.webkit.WebSettings: PluginState getPluginState()>    ---->    
<android.provider.Contacts.People: Cursor queryGroups(ContentResolver,long)>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.People: Cursor queryGroups(ContentResolver,long)>    ---->    android.provider.ContactsContract
<android.provider.MediaStore.Images.Thumbnails: Cursor queryMiniThumbnail(ContentResolver,long,int,String[])>
/**
 * @deprecated all queries should be performed through
 * {@link ContentResolver} directly, which offers modern
 * features like {@link CancellationSignal}.
 */
====>[PUBLIC]<android.provider.MediaStore.Images.Thumbnails: Cursor queryMiniThumbnail(ContentResolver,long,int,String[])>    ---->    ContentResolver
<android.telephony.SignalStrength: int getTdScdmaDbm()>
/**
 * @return get TD-SCDMA dBm
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthTdscdma#getDbm}.
 *
 * @see android.telephony#CellSignalStrengthTdscdma
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getTdScdmaDbm()>    ---->    android.telephony#CellSignalStrengthTdscdma
<android.text.Html: Spanned fromHtml(String,ImageGetter,TagHandler)>
/**
 * Returns displayable styled text from the provided HTML string with the legacy flags
 * {@link #FROM_HTML_MODE_LEGACY}.
 *
 * @deprecated use {@link #fromHtml(String, int, ImageGetter, TagHandler)} instead.
 */
====>[PUBLIC]<android.text.Html: Spanned fromHtml(String,ImageGetter,TagHandler)>    ---->    #fromHtml(String, int, ImageGetter, TagHandler)
<android.app.slice.Slice.Builder: Builder addTimestamp(long,String,List<String>)>
/**
 * @deprecated TO BE REMOVED.
 * @removed
 */
====>[HIDDEN]<android.app.slice.Slice.Builder: Builder addTimestamp(long,String,List<String>)>    ---->    
<android.telephony.SignalStrength: int getLteDbm()>
/**
 * Get LTE as dBm
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthLte#getDbm}.
 *
 * @see android.telephony#CellSignalStrengthLte
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getLteDbm()>    ---->    android.telephony#CellSignalStrengthLte
Inconsistency (Non-Documentation):<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/content/ContextWrapper.java
<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)>

====>[PUBLIC]<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)>    ---->    
<android.webkit.UrlInterceptRegistry: boolean unregisterHandler(UrlInterceptHandler)>
/**
 * Unregister a previously registered UrlInterceptHandler.
 *
 * @param handler A previously registered UrlInterceptHandler.
 * @return {@code true} if the handler was found and removed from the list.
 *
 * @hide
 * @deprecated This class was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.UrlInterceptRegistry: boolean unregisterHandler(UrlInterceptHandler)>    ---->    
<android.view.ActionProvider: View onCreateActionView()>
/**
 * Factory method called by the Android framework to create new action views.
 *
 * <p>This method has been deprecated in favor of {@link #onCreateActionView(MenuItem)}.
 * Newer apps that wish to support platform versions prior to API 16 should also
 * implement this method to return a valid action view.</p>
 *
 * @return A new action view.
 *
 * @deprecated use {@link #onCreateActionView(MenuItem)}
 */
====>[PUBLIC]<android.view.ActionProvider: View onCreateActionView()>    ---->    #onCreateActionView(MenuItem)
Inconsistency (Non-Documentation):<android.graphics.BaseCanvas: void drawPosText(char[],int,int,float[],Paint)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//graphics/java/android/graphics/BaseCanvas.java
<android.graphics.BaseCanvas: void drawPosText(char[],int,int,float[],Paint)>

====>[PUBLIC]<android.graphics.BaseCanvas: void drawPosText(char[],int,int,float[],Paint)>    ---->    
<android.telephony.CellIdentityLte: int getMnc()>
/**
 * @return 2 or 3-digit Mobile Network Code, 0..999,
 * {@link android.telephony.CellInfo#UNAVAILABLE UNAVAILABLE} if unavailable.
 * @deprecated Use {@link #getMncString} instead.
 */
====>[PUBLIC]<android.telephony.CellIdentityLte: int getMnc()>    ---->    #getMncString
<com.android.internal.graphics.palette.Palette: AsyncTask<Bitmap, Void, Palette> generateAsync(Bitmap,int,PaletteAsyncListener)>
/**
 * @deprecated Use {@link Palette.Builder} to generate the Palette.
 */
====>[PUBLIC]<com.android.internal.graphics.palette.Palette: AsyncTask<Bitmap, Void, Palette> generateAsync(Bitmap,int,PaletteAsyncListener)>    ---->    Palette.Builder
<android.net.wifi.WifiManager: boolean isScanAlwaysAvailable()>
/**
 * Check if scanning is always available.
 *
 * If this return {@code true}, apps can issue {@link #startScan} and fetch scan results
 * even when Wi-Fi is turned off.
 *
 * To change this setting, see {@link #ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE}.
 * @deprecated The ability for apps to trigger scan requests will be removed in a future
 * release.
 */
====>[PUBLIC]<android.net.wifi.WifiManager: boolean isScanAlwaysAvailable()>    ---->    
<android.telephony.PhoneNumberUtils: String formatNumber(String)>
/**
 * Breaks the given number down and formats it according to the rules
 * for the country the number is from.
 *
 * @param source The phone number to format
 * @return A locally acceptable formatting of the input, or the raw input if
 * formatting rules aren't known for the number
 *
 * @deprecated Use link #formatNumber(String phoneNumber, String defaultCountryIso) instead
 */
====>[PUBLIC]<android.telephony.PhoneNumberUtils: String formatNumber(String)>    ---->    link #formatNumber(String phoneNumber, String defaultCountryIso)
<android.view.textclassifier.TextClassification: Drawable getIcon()>
/**
 * Returns an icon that may be rendered on a widget used to act on the classified text.
 *
 * <p><strong>NOTE: </strong>This field is not parcelable and only represents the icon of the
 * first {@link RemoteAction} (if one exists) when this object is read from a parcel.
 *
 * @deprecated Use {@link #getActions()} instead.
 */
====>[PUBLIC]<android.view.textclassifier.TextClassification: Drawable getIcon()>    ---->    #getActions()
Inconsistency (Non-Documentation):<android.media.ThumbnailUtils: void createThumbnailFromEXIF(String,int,int,SizedThumbnailBitmap)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//media/java/android/media/ThumbnailUtils.java
<android.media.ThumbnailUtils: void createThumbnailFromEXIF(String,int,int,SizedThumbnailBitmap)>

====>[PUBLIC]<android.media.ThumbnailUtils: void createThumbnailFromEXIF(String,int,int,SizedThumbnailBitmap)>    ---->    
<android.webkit.Plugin.PreferencesClickHandler: void handleClickEvent(Context)>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin.PreferencesClickHandler: void handleClickEvent(Context)>    ---->    
<android.media.tv.TvInputInfo: TvInputInfo createTvInputInfo(Context,ResolveInfo,TvInputHardwareInfo,String,Uri)>
/**
 * Create a new instance of the TvInputInfo class, instantiating it from the given Context,
 * ResolveInfo, and TvInputHardwareInfo.
 *
 * @param service The ResolveInfo returned from the package manager about this TV input service.
 * @param hardwareInfo The TvInputHardwareInfo for a TV input hardware device.
 * @param label The label of this TvInputInfo. If it is {@code null} or empty, {@code service}
 * label will be loaded.
 * @param iconUri The {@link android.net.Uri} to load the icon image. See
 * {@link android.content.ContentResolver#openInputStream}. If it is {@code null},
 * the application icon of {@code service} will be loaded.
 * @hide
 * @deprecated Use {@link Builder} instead.
 */
====>[HIDDEN]<android.media.tv.TvInputInfo: TvInputInfo createTvInputInfo(Context,ResolveInfo,TvInputHardwareInfo,String,Uri)>    ---->    Builder
<android.os.Debug: int getThreadGcInvocationCount()>
/**
 * Returns the number of thread-local non-concurrent GC invocations between a
 * {@link #startAllocCounting() start} and {@link #stopAllocCounting() stop}.
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: int getThreadGcInvocationCount()>    ---->    
Inconsistency (Non-Documentation):<android.app.ContextImpl: void sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/ContextImpl.java
<android.app.ContextImpl: void sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)>

====>[PUBLIC]<android.app.ContextImpl: void sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)>    ---->    
<android.app.Activity: void setSecondaryProgress(int)>
/**
 * Sets the secondary progress for the progress bar in the title. This
 * progress is drawn between the primary progress (set via
 * {@link #setProgress(int)} and the background. It can be ideal for media
 * scenarios such as showing the buffering progress while the default
 * progress shows the play progress.
 * <p>
 * In order for the progress bar to be shown, the feature must be requested
 * via {@link #requestWindowFeature(int)}.
 *
 * @param secondaryProgress The secondary progress for the progress bar. Valid ranges are from
 * 0 to 10000 (both inclusive).
 * @deprecated No longer supported starting in API 21.
 */
====>[PUBLIC]<android.app.Activity: void setSecondaryProgress(int)>    ---->    
<android.service.voice.VoiceInteractionSession.AbortVoiceRequest: CharSequence getMessage()>
/**
 * Return the message informing the user of the problem, as per
 * {@link android.app.VoiceInteractor.AbortVoiceRequest VoiceInteractor.AbortVoiceRequest}.
 * @deprecated Prefer {@link #getVoicePrompt()} which allows a separate visual message.
 */
====>[PUBLIC]<android.service.voice.VoiceInteractionSession.AbortVoiceRequest: CharSequence getMessage()>    ---->    #getVoicePrompt()
<android.app.SearchManager: void onCancel(DialogInterface)>
/**
 * @deprecated This method is an obsolete internal implementation detail. Do not use.
 */
====>[PUBLIC]<android.app.SearchManager: void onCancel(DialogInterface)>    ---->    
<android.renderscript.Mesh.AllocationBuilder: Mesh create()>
/**
 * @deprecated in API 16
 * Create a Mesh object from the current state of the builder
 */
====>[PUBLIC]<android.renderscript.Mesh.AllocationBuilder: Mesh create()>    ---->    
<android.util.proto.ProtoOutputStream: void writeRepeatedString(long,String)>
/**
 * Write a single repeated proto "string" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedString(long,String)>    ---->    #write
<android.location.GnssMeasurement: double getCarrierPhaseUncertainty()>
/**
 * Gets the carrier-phase's uncertainty (1-Sigma).
 *
 * <p>The uncertainty is represented as an absolute (single sided) value.
 *
 * <p>The value is only available if {@link #hasCarrierPhaseUncertainty()} is {@code true}.
 *
 * @deprecated use {@link #getAccumulatedDeltaRangeUncertaintyMeters()} instead.
 */
====>[PUBLIC]<android.location.GnssMeasurement: double getCarrierPhaseUncertainty()>    ---->    #getAccumulatedDeltaRangeUncertaintyMeters()
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: boolean getHintHideIcon()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.WearableExtender: boolean getHintHideIcon()>
/**
 * Get a hint that this notification's icon should not be displayed.
 * @return {@code true} if this icon should not be displayed, false otherwise.
 * The default value is {@code false} if this was never set.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: boolean getHintHideIcon()>    ---->    
<android.view.inputmethod.InputMethodSubtype: String getLocale()>
/**
 * @return The locale of the subtype. This method returns the "locale" string parameter passed
 * to the constructor.
 *
 * @deprecated Use {@link #getLanguageTag()} instead.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodSubtype: String getLocale()>    ---->    #getLanguageTag()
<android.view.View: void setDrawingCacheQuality(int)>
/**
 * Set the drawing cache quality of this view. This value is used only when the
 * drawing cache is enabled
 *
 * @param quality One of {@link #DRAWING_CACHE_QUALITY_AUTO},
 * {@link #DRAWING_CACHE_QUALITY_LOW}, or {@link #DRAWING_CACHE_QUALITY_HIGH}
 *
 * @see #getDrawingCacheQuality()
 * @see #setDrawingCacheEnabled(boolean)
 * @see #isDrawingCacheEnabled()
 *
 * @attr ref android.R.styleable#View_drawingCacheQuality
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: void setDrawingCacheQuality(int)>    ---->    #setLayerType(int, Paint)
<android.telephony.euicc.DownloadableSubscription: void setCarrierName(String)>
/**
 * Set the user-visible carrier name.
 * @hide
 * @deprecated - Do not use.
 */
====>[HIDDEN]<android.telephony.euicc.DownloadableSubscription: void setCarrierName(String)>    ---->    
<android.test.TouchUtils: void dragViewToTop(ActivityInstrumentationTestCase,View)>
/**
 * Simulate touching the center of a view and dragging to the top of the screen.
 *
 * @param test The test case that is being run
 * @param v The view that should be dragged
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: void dragViewToTop(ActivityInstrumentationTestCase,View)>    ---->    android.test.ActivityInstrumentationTestCase2
<android.net.shared.LinkPropertiesParcelableUtil: LinkProperties toStableParcelable(LinkProperties)>
/**
 * @deprecated conversion to stable parcelable is no longer necessary.
 */
====>[PUBLIC]<android.net.shared.LinkPropertiesParcelableUtil: LinkProperties toStableParcelable(LinkProperties)>    ---->    
Inconsistency (Non-Documentation):<android.location.LocationManager: GpsStatus getGpsStatus(GpsStatus)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//location/java/android/location/LocationManager.java
<android.location.LocationManager: GpsStatus getGpsStatus(GpsStatus)>
/**
 * Retrieves information about the current status of the GPS engine.
 * This should only be called from the {@link GpsStatus.Listener#onGpsStatusChanged}
 * callback to ensure that the data is copied atomically.
 *
 * The caller may either pass in a {@link GpsStatus} object to set with the latest
 * status information, or pass null to create a new {@link GpsStatus} object.
 *
 * @param status object containing GPS status details, or null.
 * @return status object containing updated GPS status.
 */
====>[PUBLIC]<android.location.LocationManager: GpsStatus getGpsStatus(GpsStatus)>    ---->    
<android.widget.CalendarView: boolean getShowWeekNumber()>
/**
 * Gets whether to show the week number.
 *
 * @return True if showing the week number.
 * @deprecated No longer used by Material-style CalendarView.
 *
 * @attr ref android.R.styleable#CalendarView_showWeekNumber
 */
====>[PUBLIC]<android.widget.CalendarView: boolean getShowWeekNumber()>    ---->    
<android.hardware.radio.RadioTuner: int setConfiguration(BandConfig)>
/**
 * Set the active band configuration for this module.
 * Must be a valid configuration obtained via buildConfig() from a valid BandDescriptor listed
 * in the ModuleProperties of the module with the specified ID.
 * @param config The desired band configuration (FmBandConfig or AmBandConfig).
 * @return
 * <ul>
 * <li>{@link RadioManager#STATUS_OK} in case of success, </li>
 * <li>{@link RadioManager#STATUS_ERROR} in case of unspecified error, </li>
 * <li>{@link RadioManager#STATUS_NO_INIT} if the native service cannot be reached, </li>
 * <li>{@link RadioManager#STATUS_BAD_VALUE} if parameters are invalid, </li>
 * <li>{@link RadioManager#STATUS_INVALID_OPERATION} if the call is out of sequence, </li>
 * <li>{@link RadioManager#STATUS_DEAD_OBJECT} if the binder transaction to the native
 * service fails, </li>
 * </ul>
 * @deprecated Only applicable for HAL 1.x.
 */
====>[PUBLIC]<android.hardware.radio.RadioTuner: int setConfiguration(BandConfig)>    ---->    
<android.app.Notification.WearableExtender: WearableExtender setDisplayIntent(PendingIntent)>
/**
 * Set an intent to launch inside of an activity view when displaying
 * this notification. The {@link PendingIntent} provided should be for an activity.
 *
 * <pre class="prettyprint">
 * Intent displayIntent = new Intent(context, MyDisplayActivity.class);
 * PendingIntent displayPendingIntent = PendingIntent.getActivity(context,
 * 0, displayIntent, PendingIntent.FLAG_UPDATE_CURRENT);
 * Notification notif = new Notification.Builder(context)
 * .extend(new Notification.WearableExtender()
 * .setDisplayIntent(displayPendingIntent)
 * .setCustomSizePreset(Notification.WearableExtender.SIZE_MEDIUM))
 * .build();</pre>
 *
 * <p>The activity to launch needs to allow embedding, must be exported, and
 * should have an empty task affinity. It is also recommended to use the device
 * default light theme.
 *
 * <p>Example AndroidManifest.xml entry:
 * <pre class="prettyprint">
 * &lt;activity android:name=&quot;com.example.MyDisplayActivity&quot;
 * android:exported=&quot;true&quot;
 * android:allowEmbedded=&quot;true&quot;
 * android:taskAffinity=&quot;&quot;
 * android:theme=&quot;@android:style/Theme.DeviceDefault.Light&quot; /&gt;</pre>
 *
 * @param intent the {@link PendingIntent} for an activity
 * @return this object for method chaining
 * @see android.app.Notification.WearableExtender#getDisplayIntent
 * @deprecated Display intents are no longer supported.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: WearableExtender setDisplayIntent(PendingIntent)>    ---->    
Inconsistency (Non-Documentation):<android.app.ContextImpl: void sendStickyBroadcastAsUser(Intent,UserHandle)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/ContextImpl.java
<android.app.ContextImpl: void sendStickyBroadcastAsUser(Intent,UserHandle)>

====>[PUBLIC]<android.app.ContextImpl: void sendStickyBroadcastAsUser(Intent,UserHandle)>    ---->    
<android.os.FileUtils: void copyToFileOrThrow(InputStream,File)>
/**
 * @deprecated use {@link #copy(InputStream, OutputStream)} instead.
 * @hide
 */
====>[HIDDEN]<android.os.FileUtils: void copyToFileOrThrow(InputStream,File)>    ---->    #copy(InputStream, OutputStream)
<android.net.http.SslError: void <init>(int,SslCertificate)>
/**
 * Creates a new SslError object using the supplied error and certificate.
 * The URL will be set to the empty string.
 * @param error The SSL error
 * @param certificate The associated SSL certificate
 * @deprecated Use {@link #SslError(int, SslCertificate, String)}
 */
====>[PUBLIC]<android.net.http.SslError: void <init>(int,SslCertificate)>    ---->    #SslError(int, SslCertificate, String)
<android.view.Display: int getWidth()>
/**
 * @deprecated Use {@link #getSize(Point)} instead.
 */
====>[PUBLIC]<android.view.Display: int getWidth()>    ---->    #getSize(Point)
<android.transition.ChangeBounds: void setReparent(boolean)>
/**
 * Setting this flag tells ChangeBounds to track the before/after parent
 * of every view using this transition. The flag is not enabled by
 * default because it requires the parent instances to be the same
 * in the two scenes or else all parents must use ids to allow
 * the transition to determine which parents are the same.
 *
 * @param reparent true if the transition should track the parent
 * container of target views and animate parent changes.
 * @deprecated Use {@link android.transition.ChangeTransform} to handle
 * transitions between different parents.
 */
====>[PUBLIC]<android.transition.ChangeBounds: void setReparent(boolean)>    ---->    android.transition.ChangeTransform
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: WearableExtender setContentIconGravity(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.WearableExtender: WearableExtender setContentIconGravity(int)>
/**
 * Set the gravity that the content icon should have within the notification display.
 * Supported values include {@link android.view.Gravity#START} and
 * {@link android.view.Gravity#END}. The default value is {@link android.view.Gravity#END}.
 * @see #setContentIcon
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: WearableExtender setContentIconGravity(int)>    ---->    
<android.app.AppOpsManager: int checkOp(String,int,String)>
/**
 * @deprecated Renamed to {@link #unsafeCheckOp(String, int, String)}.
 */
====>[PUBLIC]<android.app.AppOpsManager: int checkOp(String,int,String)>    ---->    #unsafeCheckOp(String, int, String)
<android.location.LocationManager: void clearTestProviderLocation(String)>
/**
 * Removes any mock location associated with the given provider.
 *
 * @param provider the provider name
 *
 * @throws SecurityException if {@link android.app.AppOpsManager#OPSTR_MOCK_LOCATION
 * mock location app op} is not set to {@link android.app.AppOpsManager#MODE_ALLOWED
 * allowed} for your app.
 * @throws IllegalArgumentException if no provider with the given name exists
 *
 * @deprecated This function has always been a no-op, and may be removed in the future.
 */
====>[PUBLIC]<android.location.LocationManager: void clearTestProviderLocation(String)>    ---->    
<android.provider.Contacts.ContactMethods: void addPostalLocation(Context,long,double,double)>
/**
 * Add a longitude and latitude location to a postal address.
 *
 * @param context the context to use when updating the database
 * @param postalId the address to update
 * @param latitude the latitude for the address
 * @param longitude the longitude for the address
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.ContactMethods: void addPostalLocation(Context,long,double,double)>    ---->    android.provider.ContactsContract
<android.view.View: boolean fitSystemWindows(Rect)>
/**
 * Called by the view hierarchy when the content insets for a window have
 * changed, to allow it to adjust its content to fit within those windows.
 * The content insets tell you the space that the status bar, input method,
 * and other system windows infringe on the application's window.
 *
 * <p>You do not normally need to deal with this function, since the default
 * window decoration given to applications takes care of applying it to the
 * content of the window.  If you use {@link #SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN}
 * or {@link #SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION} this will not be the case,
 * and your content can be placed under those system elements.  You can then
 * use this method within your view hierarchy if you have parts of your UI
 * which you would like to ensure are not being covered.
 *
 * <p>The default implementation of this method simply applies the content
 * insets to the view's padding, consuming that content (modifying the
 * insets to be 0), and returning true.  This behavior is off by default, but can
 * be enabled through {@link #setFitsSystemWindows(boolean)}.
 *
 * <p>This function's traversal down the hierarchy is depth-first.  The same content
 * insets object is propagated down the hierarchy, so any changes made to it will
 * be seen by all following views (including potentially ones above in
 * the hierarchy since this is a depth-first traversal).  The first view
 * that returns true will abort the entire traversal.
 *
 * <p>The default implementation works well for a situation where it is
 * used with a container that covers the entire window, allowing it to
 * apply the appropriate insets to its content on all edges.  If you need
 * a more complicated layout (such as two different views fitting system
 * windows, one on the top of the window, and one on the bottom),
 * you can override the method and handle the insets however you would like.
 * Note that the insets provided by the framework are always relative to the
 * far edges of the window, not accounting for the location of the called view
 * within that window.  (In fact when this method is called you do not yet know
 * where the layout will place the view, as it is done before layout happens.)
 *
 * <p>Note: unlike many View methods, there is no dispatch phase to this
 * call.  If you are overriding it in a ViewGroup and want to allow the
 * call to continue to your children, you must be sure to call the super
 * implementation.
 *
 * <p>Here is a sample layout that makes use of fitting system windows
 * to have controls for a video view placed inside of the window decorations
 * that it hides and shows.  This can be used with code like the second
 * sample (video player) shown in {@link #setSystemUiVisibility(int)}.
 *
 * {@sample development/samples/ApiDemos/res/layout/video_player.xml complete}
 *
 * @param insets Current content insets of the window.  Prior to
 * {@link android.os.Build.VERSION_CODES#JELLY_BEAN} you must not modify
 * the insets or else you and Android will be unhappy.
 *
 * @return {@code true} if this view applied the insets and it should not
 * continue propagating further down the hierarchy, {@code false} otherwise.
 * @see #getFitsSystemWindows()
 * @see #setFitsSystemWindows(boolean)
 * @see #setSystemUiVisibility(int)
 *
 * @deprecated As of API 20 use {@link #dispatchApplyWindowInsets(WindowInsets)} to apply
 * insets to views. Views should override {@link #onApplyWindowInsets(WindowInsets)} or use
 * {@link #setOnApplyWindowInsetsListener(android.view.View.OnApplyWindowInsetsListener)}
 * to implement handling their own insets.
 */
====>[PUBLIC]<android.view.View: boolean fitSystemWindows(Rect)>    ---->    #dispatchApplyWindowInsets(WindowInsets)
<android.database.sqlite.SQLiteQueryBuilder: String buildUnionSubQuery(String,String[],Set<String>,int,String,String,String[],String,String)>
/**
 * @deprecated This method's signature is misleading since no SQL parameter
 * substitution is carried out.  The selection arguments parameter does not get
 * used at all.  To avoid confusion, call
 * {@link #buildUnionSubQuery}
 * instead.
 */
====>[PUBLIC]<android.database.sqlite.SQLiteQueryBuilder: String buildUnionSubQuery(String,String[],Set<String>,int,String,String,String[],String,String)>    ---->    #buildUnionSubQuery
<android.test.TouchUtils: void scrollToTop(ActivityInstrumentationTestCase,ViewGroup)>
/**
 * Scroll a ViewGroup to the top by repeatedly calling
 * {@link #dragQuarterScreenDown(InstrumentationTestCase, Activity)}
 *
 * @param test The test case that is being run
 * @param v The ViewGroup that should be dragged
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: void scrollToTop(ActivityInstrumentationTestCase,ViewGroup)>    ---->    android.test.ActivityInstrumentationTestCase2
<android.media.AudioManager: void setStreamMute(int,boolean)>
/**
 * Mute or unmute an audio stream.
 * <p>
 * This method should only be used by applications that replace the
 * platform-wide management of audio settings or the main telephony
 * application.
 * <p>
 * This method has no effect if the device implements a fixed volume policy
 * as indicated by {@link #isVolumeFixed()}.
 * <p>
 * This method was deprecated in API level 22. Prior to API level 22 this
 * method had significantly different behavior and should be used carefully.
 * The following applies only to pre-22 platforms:
 * <ul>
 * <li>The mute command is protected against client process death: if a
 * process with an active mute request on a stream dies, this stream will be
 * unmuted automatically.</li>
 * <li>The mute requests for a given stream are cumulative: the AudioManager
 * can receive several mute requests from one or more clients and the stream
 * will be unmuted only when the same number of unmute requests are
 * received.</li>
 * <li>For a better user experience, applications MUST unmute a muted stream
 * in onPause() and mute is again in onResume() if appropriate.</li>
 * </ul>
 *
 * @param streamType The stream to be muted/unmuted.
 * @param state The required mute state: true for mute ON, false for mute
 * OFF
 * @see #isVolumeFixed()
 * @deprecated Use {@link #adjustStreamVolume(int, int, int)} with
 * {@link #ADJUST_MUTE} or {@link #ADJUST_UNMUTE} instead.
 */
====>[PUBLIC]<android.media.AudioManager: void setStreamMute(int,boolean)>    ---->    #adjustStreamVolume(int, int, int)
<android.provider.Settings.Secure: boolean isLocationProviderEnabled(ContentResolver,String)>
/**
 * Helper method for determining if a location provider is enabled.
 *
 * @param cr the content resolver to use
 * @param provider the location provider to query
 * @return true if the provider is enabled
 *
 * @deprecated use {@link LocationManager#isProviderEnabled(String)}
 */
====>[PUBLIC]<android.provider.Settings.Secure: boolean isLocationProviderEnabled(ContentResolver,String)>    ---->    LocationManager#isProviderEnabled(String)
Inconsistency (Non-Documentation):<android.security.keystore.AndroidKeyStoreSignatureSpiBase: void engineSetParameter(String,Object)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//keystore/java/android/security/keystore/AndroidKeyStoreSignatureSpiBase.java
<android.security.keystore.AndroidKeyStoreSignatureSpiBase: void engineSetParameter(String,Object)>

====>[PUBLIC]<android.security.keystore.AndroidKeyStoreSignatureSpiBase: void engineSetParameter(String,Object)>    ---->    
<android.renderscript.RSSurfaceView: void surfaceChanged(SurfaceHolder,int,int,int)>
/**
 * @deprecated in API 16
 * This method is part of the SurfaceHolder.Callback interface, and is
 * not normally called or subclassed by clients of RSSurfaceView.
 */
====>[PUBLIC]<android.renderscript.RSSurfaceView: void surfaceChanged(SurfaceHolder,int,int,int)>    ---->    
<android.app.ActivityManager: ParceledListSlice<GrantedUriPermission> getGrantedUriPermissions(String)>
/**
 * Permits an application to get the persistent URI permissions granted to another.
 *
 * <p>Typically called by Settings or DocumentsUI, requires
 * {@code GET_APP_GRANTED_URI_PERMISSIONS}.
 *
 * @param packageName application to look for the granted permissions, or {@code null} to get
 * granted permissions for all applications
 * @return list of granted URI permissions
 *
 * @hide
 * @deprecated use {@link UriGrantsManager#getGrantedUriPermissions(String)} instead.
 */
====>[HIDDEN]<android.app.ActivityManager: ParceledListSlice<GrantedUriPermission> getGrantedUriPermissions(String)>    ---->    UriGrantsManager#getGrantedUriPermissions(String)
<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder addVertex(float,float)>
/**
 * @deprecated in API 16
 * Adds a float2 vertex to the mesh
 *
 * @param x position x
 * @param y position y
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder addVertex(float,float)>    ---->    
<android.net.NetworkUtils: int netmaskToPrefixLength(Inet4Address)>
/**
 * Convert an IPv4 netmask to a prefix length, checking that the netmask is contiguous.
 * @param netmask as a {@code Inet4Address}.
 * @return the network prefix length
 * @throws IllegalArgumentException the specified netmask was not contiguous.
 * @hide
 * @deprecated use {@link Inet4AddressUtils#netmaskToPrefixLength(Inet4Address)}
 */
====>[HIDDEN]<android.net.NetworkUtils: int netmaskToPrefixLength(Inet4Address)>    ---->    Inet4AddressUtils#netmaskToPrefixLength(Inet4Address)
<android.app.Activity: void onBackgroundVisibleBehindChanged(boolean)>
/**
 * The topmost foreground activity will receive this call when the background visibility state
 * of the activity below it changes.
 *
 * This call may be a consequence of {@link #requestVisibleBehind(boolean)} or might be
 * due to a background activity finishing itself.
 *
 * @deprecated This method's functionality is no longer supported as of
 * {@link android.os.Build.VERSION_CODES#O} and will be removed in a future release.
 *
 * @param visible true if a background activity is visible, false otherwise.
 *
 * @see #requestVisibleBehind(boolean)
 * @see #onVisibleBehindCanceled()
 * @hide
 */
====>[HIDDEN]<android.app.Activity: void onBackgroundVisibleBehindChanged(boolean)>    ---->    #requestVisibleBehind(boolean)
<android.hardware.radio.RadioTuner: int getConfiguration(BandConfig[])>
/**
 * Get current configuration.
 * @param config a BandConfig array of lengh 1 where the configuration is returned.
 * @return
 * <ul>
 * <li>{@link RadioManager#STATUS_OK} in case of success, </li>
 * <li>{@link RadioManager#STATUS_ERROR} in case of unspecified error, </li>
 * <li>{@link RadioManager#STATUS_NO_INIT} if the native service cannot be reached, </li>
 * <li>{@link RadioManager#STATUS_BAD_VALUE} if parameters are invalid, </li>
 * <li>{@link RadioManager#STATUS_INVALID_OPERATION} if the call is out of sequence, </li>
 * <li>{@link RadioManager#STATUS_DEAD_OBJECT} if the binder transaction to the native
 * service fails, </li>
 * </ul>
 *
 * @deprecated Only applicable for HAL 1.x.
 */
====>[PUBLIC]<android.hardware.radio.RadioTuner: int getConfiguration(BandConfig[])>    ---->    
<android.renderscript.RSTextureView: void onSurfaceTextureUpdated(SurfaceTexture)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.RSTextureView: void onSurfaceTextureUpdated(SurfaceTexture)>    ---->    
<android.os.Debug: int getGlobalExternalFreedSize()>
/**
 * This method exists for compatibility and has no effect.
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: int getGlobalExternalFreedSize()>    ---->    
<android.view.ViewConfiguration: int getScrollBarSize()>
/**
 * @return The width of the horizontal scrollbar and the height of the vertical
 * scrollbar in dips
 *
 * @deprecated Use {@link #getScaledScrollBarSize()} instead.
 */
====>[PUBLIC]<android.view.ViewConfiguration: int getScrollBarSize()>    ---->    #getScaledScrollBarSize()
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: WearableExtender setCustomContentHeight(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.WearableExtender: WearableExtender setCustomContentHeight(int)>
/**
 * Set the custom height in pixels for the display of this notification's content.
 * <p>This option is only available for custom display notifications created
 * using {@link android.app.Notification.WearableExtender#setDisplayIntent}. See also
 * {@link android.app.Notification.WearableExtender#setCustomSizePreset} and
 * {@link #getCustomContentHeight}.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: WearableExtender setCustomContentHeight(int)>    ---->    
<android.database.sqlite.SQLiteDatabase: void setLockingEnabled(boolean)>
/**
 * Control whether or not the SQLiteDatabase is made thread-safe by using locks
 * around critical sections. This is pretty expensive, so if you know that your
 * DB will only be used by a single thread then you should set this to false.
 * The default is true.
 * @param lockingEnabled set to true to enable locks, false otherwise
 *
 * @deprecated This method now does nothing.  Do not use.
 */
====>[PUBLIC]<android.database.sqlite.SQLiteDatabase: void setLockingEnabled(boolean)>    ---->    
<android.graphics.ImageDecoder: ImageDecoder setResize(int,int)>
/**
 * @removed
 * @deprecated Renamed to {@link #setTargetSize}.
 */
====>[HIDDEN]<android.graphics.ImageDecoder: ImageDecoder setResize(int,int)>    ---->    #setTargetSize
<android.os.Environment: File getExternalStorageDirectory()>
/**
 * Return the primary shared/external storage directory. This directory may
 * not currently be accessible if it has been mounted by the user on their
 * computer, has been removed from the device, or some other problem has
 * happened. You can determine its current state with
 * {@link #getExternalStorageState()}.
 * <p>
 * <em>Note: don't be confused by the word "external" here. This directory
 * can better be thought as media/shared storage. It is a filesystem that
 * can hold a relatively large amount of data and that is shared across all
 * applications (does not enforce permissions). Traditionally this is an SD
 * card, but it may also be implemented as built-in storage in a device that
 * is distinct from the protected internal storage and can be mounted as a
 * filesystem on a computer.</em>
 * <p>
 * On devices with multiple users (as described by {@link UserManager}),
 * each user has their own isolated shared storage. Applications only have
 * access to the shared storage for the user they're running as.
 * <p>
 * In devices with multiple shared/external storage directories, this
 * directory represents the primary storage that the user will interact
 * with. Access to secondary storage is available through
 * {@link Context#getExternalFilesDirs(String)},
 * {@link Context#getExternalCacheDirs()}, and
 * {@link Context#getExternalMediaDirs()}.
 * <p>
 * Applications should not directly use this top-level directory, in order
 * to avoid polluting the user's root namespace. Any files that are private
 * to the application should be placed in a directory returned by
 * {@link android.content.Context#getExternalFilesDir
 * Context.getExternalFilesDir}, which the system will take care of deleting
 * if the application is uninstalled. Other shared files should be placed in
 * one of the directories returned by
 * {@link #getExternalStoragePublicDirectory}.
 * <p>
 * Writing to this path requires the
 * {@link android.Manifest.permission#WRITE_EXTERNAL_STORAGE} permission,
 * and starting in {@link android.os.Build.VERSION_CODES#KITKAT}, read
 * access requires the
 * {@link android.Manifest.permission#READ_EXTERNAL_STORAGE} permission,
 * which is automatically granted if you hold the write permission.
 * <p>
 * Starting in {@link android.os.Build.VERSION_CODES#KITKAT}, if your
 * application only needs to store internal data, consider using
 * {@link Context#getExternalFilesDir(String)},
 * {@link Context#getExternalCacheDir()}, or
 * {@link Context#getExternalMediaDirs()}, which require no permissions to
 * read or write.
 * <p>
 * This path may change between platform versions, so applications should
 * only persist relative paths.
 * <p>
 * Here is an example of typical code to monitor the state of external
 * storage:
 * <p>
 * {@sample development/samples/ApiDemos/src/com/example/android/apis/content/ExternalStorage.java
 * monitor_storage}
 *
 * @see #getExternalStorageState()
 * @see #isExternalStorageRemovable()
 * @deprecated To improve user privacy, direct access to shared/external
 * storage devices is deprecated. When an app targets
 * {@link android.os.Build.VERSION_CODES#Q}, the path returned
 * from this method is no longer directly accessible to apps.
 * Apps can continue to access content stored on shared/external
 * storage by migrating to alternatives such as
 * {@link Context#getExternalFilesDir(String)},
 * {@link MediaStore}, or {@link Intent#ACTION_OPEN_DOCUMENT}.
 */
====>[PUBLIC]<android.os.Environment: File getExternalStorageDirectory()>    ---->    
<android.content.pm.PackageParser.Package: void setApplicationInfoBaseResourcePath(String)>
/**
 * @deprecated Forward locked apps no longer supported. Resource path not needed.
 */
====>[PUBLIC]<android.content.pm.PackageParser.Package: void setApplicationInfoBaseResourcePath(String)>    ---->    
<android.os.storage.StorageManager: String[] getVolumePaths()>
/**
 * Returns list of paths for all mountable volumes.
 * @hide
 */
====>[HIDDEN]<android.os.storage.StorageManager: String[] getVolumePaths()>    ---->    
<android.text.method.DateKeyListener: DateKeyListener getInstance()>
/**
 * @deprecated Use {@link #getInstance(Locale)} instead.
 */
====>[PUBLIC]<android.text.method.DateKeyListener: DateKeyListener getInstance()>    ---->    #getInstance(Locale)
<android.graphics.Canvas: int saveLayerAlpha(RectF,int,int)>
/**
 * This behaves the same as save(), but in addition it allocates and
 * redirects drawing to an offscreen bitmap.
 * <p class="note"><strong>Note:</strong> this method is very expensive,
 * incurring more than double rendering cost for contained content. Avoid
 * using this method, especially if the bounds provided are large. It is
 * recommended to use a {@link android.view.View#LAYER_TYPE_HARDWARE hardware layer} on a View
 * to apply an xfermode, color filter, or alpha, as it will perform much
 * better than this method.
 * <p>
 * All drawing calls are directed to a newly allocated offscreen bitmap.
 * Only when the balancing call to restore() is made, is that offscreen
 * buffer drawn back to the current target of the Canvas (either the
 * screen, it's target Bitmap, or the previous layer).
 * <p>
 * The {@code alpha} parameter is applied when the offscreen bitmap is
 * drawn back when restore() is called.
 *
 * As of API Level API level {@value Build.VERSION_CODES#P} the only valid
 * {@code saveFlags} is {@link #ALL_SAVE_FLAG}.  All other flags are ignored.
 *
 * @deprecated Use {@link #saveLayerAlpha(RectF, int)} instead.
 * @param bounds    The maximum size the offscreen bitmap needs to be
 * (in local coordinates)
 * @param alpha     The alpha to apply to the offscreen when it is
 * drawn during restore()
 * @param saveFlags see _SAVE_FLAG constants, generally {@link #ALL_SAVE_FLAG} is recommended
 * for performance reasons.
 * @return          value to pass to restoreToCount() to balance this call
 */
====>[PUBLIC]<android.graphics.Canvas: int saveLayerAlpha(RectF,int,int)>    ---->    #saveLayerAlpha(RectF, int)
<android.telephony.SignalStrength: int getGsmLevel()>
/**
 * Get gsm as level 0..4
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthGsm#getLevel}.
 *
 * @see android.telephony#CellSignalStrengthGsm
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getGsmLevel()>    ---->    android.telephony#CellSignalStrengthGsm
<android.os.storage.StorageManager: StorageManager from(Context)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.os.storage.StorageManager: StorageManager from(Context)>    ---->    
<android.service.autofill.ImageTransformation.Builder: Builder addOption(Pattern,int)>
/**
 * Adds an option to replace the child view with a different image when the regex matches.
 *
 * @param regex regular expression defining what should be matched to use this image.
 * @param resId resource id of the image (in the autofill service's package). The
 * {@link RemoteViews presentation} must contain a {@link ImageView} child with that id.
 *
 * @return this build
 *
 * @deprecated use {@link #addOption(Pattern, int, CharSequence)} instead.
 */
====>[PUBLIC]<android.service.autofill.ImageTransformation.Builder: Builder addOption(Pattern,int)>    ---->    #addOption(Pattern, int, CharSequence)
<android.view.ViewConfiguration: int getTouchSlop()>
/**
 * @return Distance in dips a touch can wander before we think the user is scrolling
 *
 * @deprecated Use {@link #getScaledTouchSlop()} instead.
 */
====>[PUBLIC]<android.view.ViewConfiguration: int getTouchSlop()>    ---->    #getScaledTouchSlop()
<android.os.StatFs: int getFreeBlocks()>
/**
 * @deprecated Use {@link #getFreeBlocksLong()} instead.
 */
====>[PUBLIC]<android.os.StatFs: int getFreeBlocks()>    ---->    #getFreeBlocksLong()
<android.app.AppOpsManager: int checkOpNoThrow(String,int,String)>
/**
 * @deprecated Renamed to {@link #unsafeCheckOpNoThrow(String, int, String)}.
 */
====>[PUBLIC]<android.app.AppOpsManager: int checkOpNoThrow(String,int,String)>    ---->    #unsafeCheckOpNoThrow(String, int, String)
<android.telephony.NetworkScan: void stop()>
/**
 * @deprecated Use {@link #stopScan()}
 * @removed
 */
====>[HIDDEN]<android.telephony.NetworkScan: void stop()>    ---->    #stopScan()
<android.net.wifi.WifiManager: boolean saveConfiguration()>
/**
 * Tell the device to persist the current list of configured networks.
 * <p>
 * Note: It is possible for this method to change the network IDs of
 * existing networks. You should assume the network IDs can be different
 * after calling this method.
 *
 * @return {@code false}.
 * @deprecated There is no need to call this method -
 * {@link #addNetwork(WifiConfiguration)}, {@link #updateNetwork(WifiConfiguration)}
 * and {@link #removeNetwork(int)} already persist the configurations automatically.
 */
====>[PUBLIC]<android.net.wifi.WifiManager: boolean saveConfiguration()>    ---->    #addNetwork(WifiConfiguration)
<android.service.carrier.CarrierMessagingService: void onSendMultipartTextSms(List<String>,int,String,ResultCallback<SendMultipartSmsResult>)>
/**
 * Override this method to intercept long SMSs sent from the device.
 * @deprecated Override {@link #onSendMultipartTextSms} below instead.
 *
 * @param parts a {@link List} of the message parts
 * @param subId SMS subscription ID of the SIM
 * @param destAddress phone number of the recipient of the message
 * @param callback result callback. Call with a {@link SendMultipartSmsResult}.
 */
====>[PUBLIC]<android.service.carrier.CarrierMessagingService: void onSendMultipartTextSms(List<String>,int,String,ResultCallback<SendMultipartSmsResult>)>    ---->    #onSendMultipartTextSms
<android.test.TouchUtils: void dragQuarterScreenDown(ActivityInstrumentationTestCase)>
/**
 * Simulate touching in the center of the screen and dragging one quarter of the way down
 * @param test The test case that is being run
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: void dragQuarterScreenDown(ActivityInstrumentationTestCase)>    ---->    android.test.ActivityInstrumentationTestCase2
<android.os.UserManager: void setUserRestriction(String,boolean)>
/**
 * Sets the value of a specific restriction.
 * Requires the MANAGE_USERS permission.
 * @param key the key of the restriction
 * @param value the value for the restriction
 * @deprecated use {@link android.app.admin.DevicePolicyManager#addUserRestriction(
 * android.content.ComponentName, String)} or
 * {@link android.app.admin.DevicePolicyManager#clearUserRestriction(
 * android.content.ComponentName, String)} instead.
 */
====>[PUBLIC]<android.os.UserManager: void setUserRestriction(String,boolean)>    ---->    android.app.admin.DevicePolicyManager#addUserRestriction(  android.content.ComponentName, String)
<android.os.Debug: int getGlobalExternalAllocCount()>
/**
 * This method exists for compatibility and always returns 0.
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: int getGlobalExternalAllocCount()>    ---->    
<android.content.pm.PermissionGroupInfo: void <init>(PermissionGroupInfo)>
/**
 * @deprecated Should only be created by the system.
 */
====>[PUBLIC]<android.content.pm.PermissionGroupInfo: void <init>(PermissionGroupInfo)>    ---->    
<android.webkit.WebSettings: void setGeolocationDatabasePath(String)>
/**
 * Sets the path where the Geolocation databases should be saved. In order
 * for Geolocation permissions and cached positions to be persisted, this
 * method must be called with a path to which the application can write.
 *
 * @param databasePath a path to the directory where databases should be
 * saved.
 * @deprecated Geolocation database are managed by the implementation and calling this method
 * will have no effect.
 */
====>[PUBLIC]<android.webkit.WebSettings: void setGeolocationDatabasePath(String)>    ---->    
<android.provider.MediaStore.Images.Media: Cursor query(ContentResolver,Uri,String[],String,String)>
/**
 * @deprecated all queries should be performed through
 * {@link ContentResolver} directly, which offers modern
 * features like {@link CancellationSignal}.
 */
====>[PUBLIC]<android.provider.MediaStore.Images.Media: Cursor query(ContentResolver,Uri,String[],String,String)>    ---->    ContentResolver
<android.provider.Contacts.Intents.UI: void <init>()>
/**
 * @deprecated Do not use. This is not supported.
 */
====>[PUBLIC]<android.provider.Contacts.Intents.UI: void <init>()>    ---->    
<android.text.method.DateTimeKeyListener: DateTimeKeyListener getInstance()>
/**
 * @deprecated Use {@link #getInstance(Locale)} instead.
 */
====>[PUBLIC]<android.text.method.DateTimeKeyListener: DateTimeKeyListener getInstance()>    ---->    #getInstance(Locale)
Inconsistency (Non-Documentation):<android.webkit.WebSettings: void setSaveFormData(boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/webkit/WebSettings.java
<android.webkit.WebSettings: void setSaveFormData(boolean)>
/**
 * Sets whether the WebView should save form data. In Android O, the
 * platform has implemented a fully functional Autofill feature to store
 * form data. Therefore, the Webview form data save feature is disabled.
 *
 * Note that the feature will continue to be supported on older versions of
 * Android as before.
 *
 * This function does not have any effect.
 */
====>[PUBLIC]<android.webkit.WebSettings: void setSaveFormData(boolean)>    ---->    
<android.telephony.SignalStrength: int getTdScdmaAsuLevel()>
/**
 * Get the TD-SCDMA signal level as an asu value.
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthTdscdma#getAsuLevel}.
 *
 * @see android.telephony#CellSignalStrengthTdscdma
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getTdScdmaAsuLevel()>    ---->    android.telephony#CellSignalStrengthTdscdma
<android.webkit.Plugin: void dispatchClickEvent(Context)>
/**
 * Invokes the click handler for this plugin.
 *
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin: void dispatchClickEvent(Context)>    ---->    
<android.net.NetworkInfo: void setFailover(boolean)>
/**
 * Set the failover boolean.
 * @param isFailover {@code true} to mark the current connection attempt
 * as a failover.
 * @deprecated This hasn't been set in any recent Android release.
 * @hide
 */
====>[HIDDEN]<android.net.NetworkInfo: void setFailover(boolean)>    ---->    
<android.media.ThumbnailUtils: Bitmap createVideoThumbnail(String,int)>
/**
 * Create a thumbnail for given video file.
 *
 * @param filePath The video file.
 * @param kind The desired thumbnail kind, such as
 * {@link android.provider.MediaStore.Images.Thumbnails#MINI_KIND}.
 * @deprecated Callers should migrate to using
 * {@link #createVideoThumbnail(File, Size, CancellationSignal)},
 * as it offers more control over resizing and cancellation.
 */
====>[PUBLIC]<android.media.ThumbnailUtils: Bitmap createVideoThumbnail(String,int)>    ---->    #createVideoThumbnail(File, Size, CancellationSignal)
<android.app.ActivityManager: boolean isInLockTaskMode()>
/**
 * Return whether currently in lock task mode.  When in this mode
 * no new tasks can be created or switched to.
 *
 * @see Activity#startLockTask()
 *
 * @deprecated Use {@link #getLockTaskModeState} instead.
 */
====>[PUBLIC]<android.app.ActivityManager: boolean isInLockTaskMode()>    ---->    #getLockTaskModeState
<android.media.MediaFile: MediaFileType getFileType(String)>
/**
 * @deprecated file types no longer exist
 */
====>[PUBLIC]<android.media.MediaFile: MediaFileType getFileType(String)>    ---->    
<android.view.inputmethod.InputMethodManager: void showSoftInputFromInputMethod(IBinder,int)>
/**
 * Show the input method's soft input area, so the user
 * sees the input method window and can interact with it.
 * This can only be called from the currently active input method,
 * as validated by the given token.
 *
 * @param token Supplies the identifying token given to an input method
 * when it was started, which allows it to perform this operation on
 * itself.
 * @param flags Provides additional operating flags.  Currently may be
 * 0 or have the {@link #SHOW_IMPLICIT} or
 * {@link #SHOW_FORCED} bit set.
 * @deprecated Use {@link InputMethodService#requestShowSelf(int)} instead. This method was
 * intended for IME developers who should be accessing APIs through the service. APIs in this
 * class are intended for app developers interacting with the IME.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodManager: void showSoftInputFromInputMethod(IBinder,int)>    ---->    InputMethodService#requestShowSelf(int)
<android.inputmethodservice.InputMethodService: void onUpdateCursor(Rect)>
/**
 * Called when the application has reported a new location of its text
 * cursor.  This is only called if explicitly requested by the input method.
 * The default implementation does nothing.
 * @deprecated Use {@link #onUpdateCursorAnchorInfo(CursorAnchorInfo)} instead.
 */
====>[PUBLIC]<android.inputmethodservice.InputMethodService: void onUpdateCursor(Rect)>    ---->    #onUpdateCursorAnchorInfo(CursorAnchorInfo)
<android.app.ActivityManager: int getMaxRecentTasksStatic()>
/**
 * TODO(b/80414790): Remove once no longer on hiddenapi-light-greylist.txt
 * @hide
 * @deprecated Use {@link ActivityTaskManager#getMaxRecentTasksStatic()}
 */
====>[HIDDEN]<android.app.ActivityManager: int getMaxRecentTasksStatic()>    ---->    ActivityTaskManager#getMaxRecentTasksStatic()
<android.telephony.SignalStrength: int getGsmAsuLevel()>
/**
 * Get the gsm signal level as an asu value between 0..31, 99 is unknown
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthGsm#getAsuLevel}.
 *
 * @see android.telephony#CellSignalStrengthGsm
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getGsmAsuLevel()>    ---->    android.telephony#CellSignalStrengthGsm
<android.app.AutomaticZenRule: void <init>(String,ComponentName,Uri,int,boolean)>
/**
 * Creates an automatic zen rule.
 *
 * @param name The name of the rule.
 * @param owner The Condition Provider service that owns this rule.
 * @param interruptionFilter The interruption filter defines which notifications are allowed to
 * interrupt the user (e.g. via sound &amp; vibration) while this rule
 * is active.
 * @param enabled Whether the rule is enabled.
 * @deprecated use {@link #AutomaticZenRule(String, ComponentName, ComponentName, Uri,
 * ZenPolicy, int, boolean)}.
 */
====>[PUBLIC]<android.app.AutomaticZenRule: void <init>(String,ComponentName,Uri,int,boolean)>    ---->    #AutomaticZenRule(String, ComponentName, ComponentName, Uri,  ZenPolicy, int, boolean)
<android.util.proto.ProtoOutputStream: void endObject(long)>
/**
 * End a child object. Pass in the token from the correspoinding startObject call.
 *
 * @deprecated Use #end() instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void endObject(long)>    ---->    #end()
<android.test.mock.MockContentProvider: void attachInfoForTesting(ContentProvider,Context,ProviderInfo)>
/**
 * Like {@link #attachInfo(Context, android.content.pm.ProviderInfo)}, but for use
 * when directly instantiating the provider for testing.
 *
 * <p>Provided for use by {@code android.test.ProviderTestCase2} and
 * {@code android.test.RenamingDelegatingContext}.
 *
 * @deprecated Use a mocking framework like <a href="https://github.com/mockito/mockito">Mockito</a>.
 * New tests should be written using the
 * <a href="{@docRoot}tools/testing-support-library/index.html">Android Testing Support Library</a>.
 */
====>[PUBLIC]<android.test.mock.MockContentProvider: void attachInfoForTesting(ContentProvider,Context,ProviderInfo)>    ---->    
<android.app.Notification.Builder: Builder setTimeout(long)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.Notification.Builder: Builder setTimeout(long)>    ---->    
<com.android.internal.logging.MetricsLogger: void action(Context,int,boolean)>
/**
 * @deprecated because untestable; use {@link #action(int, boolean)}
 */
====>[PUBLIC]<com.android.internal.logging.MetricsLogger: void action(Context,int,boolean)>    ---->    #action(int, boolean)
Inconsistency (Non-Documentation):<com.android.internal.util.FileRotator: void combineActive(Reader,Writer,long)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/com/android/internal/util/FileRotator.java
<com.android.internal.util.FileRotator: void combineActive(Reader,Writer,long)>

====>[PUBLIC]<com.android.internal.util.FileRotator: void combineActive(Reader,Writer,long)>    ---->    
<android.telephony.CellIdentityWcdma: int getMcc()>
/**
 * @return 3-digit Mobile Country Code, 0..999,
 * {@link android.telephony.CellInfo#UNAVAILABLE UNAVAILABLE} if unavailable.
 * @deprecated Use {@link #getMccString} instead.
 */
====>[PUBLIC]<android.telephony.CellIdentityWcdma: int getMcc()>    ---->    #getMccString
<android.content.ClipData: void addItem(Item,ContentResolver)>
/**
 * @removed use #addItem(ContentResolver, Item) instead
 */
====>[HIDDEN]<android.content.ClipData: void addItem(Item,ContentResolver)>    ---->    
<com.android.location.provider.LocationProviderBase: void onDisable()>
/**
 * @deprecated This callback will be never be invoked on Android Q and above. This method should
 * only be implemented in location providers that need to support SDKs below Android Q. Even in
 * this case, it is usually unnecessary to implement this callback with the correct design. This
 * method may be removed in the future.
 */
====>[PUBLIC]<com.android.location.provider.LocationProviderBase: void onDisable()>    ---->    
<android.app.DownloadManager: long addCompletedDownload(String,String,boolean,String,String,long,boolean,boolean)>
/**
 * <p> For applications targeting {@link android.os.Build.VERSION_CODES#Q} or above,
 * {@code path} must be within directories owned by the application
 * {e.g. {@link Context#getExternalFilesDir(String)}} or if the application is running under
 * the legacy storage model (see
 * {@link android.R.styleable#AndroidManifestApplication_requestLegacyExternalStorage
 * android:requestLegacyExternalStorage}), {@code path} can also be within the top-level
 * Downloads directory (as returned by
 * {@link Environment#getExternalStoragePublicDirectory(String)} with
 * {@link Environment#DIRECTORY_DOWNLOADS}).
 *
 * @deprecated Apps should instead contribute files to
 * {@link android.provider.MediaStore.Downloads} collection to make them available to user
 * as part of Downloads.
 *
 * {@hide}
 */
====>[HIDDEN]<android.app.DownloadManager: long addCompletedDownload(String,String,boolean,String,String,long,boolean,boolean)>    ---->    android.provider.MediaStore.Downloads
<android.location.LocationManager: void setTestProviderStatus(String,int,Bundle,long)>
/**
 * This method has no effect as provider status has been deprecated and is no longer supported.
 *
 * @param provider the provider name
 * @param status the mock status
 * @param extras a Bundle containing mock extras
 * @param updateTime the mock update time
 *
 * @throws SecurityException if {@link android.app.AppOpsManager#OPSTR_MOCK_LOCATION
 * mock location app op} is not set to {@link android.app.AppOpsManager#MODE_ALLOWED
 * allowed} for your app.
 * @throws IllegalArgumentException if no provider with the given name exists
 *
 * @deprecated This method has no effect.
 */
====>[PUBLIC]<android.location.LocationManager: void setTestProviderStatus(String,int,Bundle,long)>    ---->    
<android.net.wifi.WifiManager: boolean isDeviceToDeviceRttSupported()>
/**
 * @deprecated Please use {@link android.content.pm.PackageManager#hasSystemFeature(String)}
 * with {@link android.content.pm.PackageManager#FEATURE_WIFI_RTT} and
 * {@link android.content.pm.PackageManager#FEATURE_WIFI_AWARE}.
 *
 * @return true if this adapter supports Device-to-device RTT
 * @hide
 */
====>[HIDDEN]<android.net.wifi.WifiManager: boolean isDeviceToDeviceRttSupported()>    ---->    android.content.pm.PackageManager#hasSystemFeature(String)
<android.util.proto.ProtoOutputStream: void writePackedSInt64(long,long[])>
/**
 * Write a list of packed proto "sint64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedSInt64(long,long[])>    ---->    #write
<com.android.internal.app.SimpleIconFactory: void recycle()>
/**
 * Recycles the SimpleIconFactory so others may use it.
 *
 * @deprecated Do not use, functionality will be replaced by iconloader lib eventually.
 */
====>[PUBLIC]<com.android.internal.app.SimpleIconFactory: void recycle()>    ---->    
<android.util.proto.ProtoOutputStream: void writeDouble(long,double)>
/**
 * Write a single proto "double" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeDouble(long,double)>    ---->    #write
<android.app.prediction.AppTarget.Builder: Builder setTarget(String,UserHandle)>
/**
 * @deprecated Use the appropriate constructor.
 * @removed
 */
====>[HIDDEN]<android.app.prediction.AppTarget.Builder: Builder setTarget(String,UserHandle)>    ---->    
<android.renderscript.FileA3D: IndexEntry getIndexEntry(int)>
/**
 * @deprecated in API 16
 * Returns an index entry from the list of all objects inside
 * FileA3D
 *
 * @param index number of the entry from the list to return
 *
 * @return entry in the a3d file described by the index
 */
====>[PUBLIC]<android.renderscript.FileA3D: IndexEntry getIndexEntry(int)>    ---->    
<android.webkit.UrlInterceptRegistry: PluginData getPluginData(String,Map<String, String>)>
/**
 * Given an url, returns the PluginData of the first
 * UrlInterceptHandler interested, or {@code null} if none are or if
 * intercepts are disabled.
 *
 * @return A PluginData instance containing surrogate content.
 *
 * @hide
 * @deprecated This class was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.UrlInterceptRegistry: PluginData getPluginData(String,Map<String, String>)>    ---->    
<android.database.sqlite.SQLiteDatabase: void markTableSyncable(String,String,String)>
/**
 * Mark this table as syncable, with the _sync_dirty residing in another
 * table. When an update occurs in this table the _sync_dirty field of the
 * row in updateTable with the _id in foreignKey will be set to
 * ensure proper syncing operation.
 *
 * @param table an update on this table will trigger a sync time removal
 * @param foreignKey this is the column in table whose value is an _id in
 * updateTable
 * @param updateTable this is the table that will have its _sync_dirty
 * @deprecated This method no longer serves any useful purpose and has been deprecated.
 */
====>[PUBLIC]<android.database.sqlite.SQLiteDatabase: void markTableSyncable(String,String,String)>    ---->    
<android.telephony.PhoneNumberUtils: boolean isPotentialEmergencyNumber(int,String)>
/**
 * Checks if given number might *potentially* result in
 * a call to an emergency service on the current network.
 *
 * Specifically, this method will return true if the specified number
 * is an emergency number according to the list managed by the RIL or
 * SIM, *or* if the specified number simply starts with the same
 * digits as any of the emergency numbers listed in the RIL / SIM.
 *
 * This method is intended for internal use by the phone app when
 * deciding whether to allow ACTION_CALL intents from 3rd party apps
 * (where we're required to *not* allow emergency calls to be placed.)
 *
 * @param subId the subscription id of the SIM.
 * @param number the number to look up.
 * @return true if the number is in the list of emergency numbers
 * listed in the RIL / SIM, *or* if the number starts with the
 * same digits as any of those emergency numbers.
 *
 * @deprecated Please use {@link TelephonyManager#isPotentialEmergencyNumber(String)}
 * instead.
 *
 * @hide
 */
====>[HIDDEN]<android.telephony.PhoneNumberUtils: boolean isPotentialEmergencyNumber(int,String)>    ---->    TelephonyManager#isPotentialEmergencyNumber(String)
<android.hardware.location.ContextHubManager: int unloadNanoApp(int)>
/**
 * Unload a specified nanoApp
 *
 * Note that unloading is asynchronous.  When we return from this method,
 * the nano app (probably) hasn't unloaded yet.  Assuming a return of 0
 * from this method, then the final success/failure for the unload is
 * delivered in a byte string via a call to Callback.onMessageReceipt.
 *
 * TODO(b/30784270): Provide a better success/failure delivery.
 *
 * @param nanoAppHandle handle of the nanoApp to unload
 *
 * @return 0 if the command for unloading was sent to the context hub;
 * -1 otherwise
 *
 * @deprecated Use {@link #unloadNanoApp(ContextHubInfo, long)} instead.
 */
====>[PUBLIC]<android.hardware.location.ContextHubManager: int unloadNanoApp(int)>    ---->    #unloadNanoApp(ContextHubInfo, long)
<android.graphics.RecordingCanvas: void drawGLFunctor2(long,Runnable)>
/**
 * Records the functor specified with the drawGLFunction function pointer. This is
 * functionality used by webview for calling into their renderer from our display lists.
 *
 * @param drawGLFunctor A native function pointer
 * @param releasedCallback Called when the display list is destroyed, and thus
 * the functor is no longer referenced by this canvas's display list.
 *
 * NOTE: The callback does *not* necessarily mean that there are no longer
 * any references to the functor, just that the reference from this specific
 * canvas's display list has been released.
 *
 * @hide
 * @deprecated Use {@link #drawWebViewFunctor(int)}
 */
====>[HIDDEN]<android.graphics.RecordingCanvas: void drawGLFunctor2(long,Runnable)>    ---->    #drawWebViewFunctor(int)
<android.net.wifi.aware.DiscoverySession: NetworkSpecifier createNetworkSpecifierOpen(PeerHandle)>
/**
 * Create a {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} for
 * an unencrypted WiFi Aware connection (link) to the specified peer. The
 * {@link android.net.NetworkRequest.Builder#addTransportType(int)} should be set to
 * {@link android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE}.
 * <p>
 * This method should be used when setting up a connection with a peer discovered through Aware
 * discovery or communication (in such scenarios the MAC address of the peer is shielded by
 * an opaque peer ID handle). If an Aware connection is needed to a peer discovered using other
 * OOB (out-of-band) mechanism then use the alternative
 * {@link WifiAwareSession#createNetworkSpecifierOpen(int, byte[])} method - which uses the
 * peer's MAC address.
 * <p>
 * Note: per the Wi-Fi Aware specification the roles are fixed - a Subscriber is an INITIATOR
 * and a Publisher is a RESPONDER.
 * <p>
 * To set up an encrypted link use the
 * {@link #createNetworkSpecifierPassphrase(PeerHandle, String)} API.
 * @deprecated Use the replacement {@link WifiAwareNetworkSpecifier.Builder}.
 *
 * @param peerHandle The peer's handle obtained through
 * {@link DiscoverySessionCallback#onServiceDiscovered(PeerHandle, byte[], java.util.List)}
 * or
 * {@link DiscoverySessionCallback#onMessageReceived(PeerHandle, byte[])}.
 * On a RESPONDER this value is used to gate the acceptance of a connection
 * request from only that peer.
 *
 * @return A {@link NetworkSpecifier} to be used to construct
 * {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} to pass to
 * {@link android.net.ConnectivityManager#requestNetwork(android.net.NetworkRequest,
 * android.net.ConnectivityManager.NetworkCallback)}
 * [or other varieties of that API].
 */
====>[PUBLIC]<android.net.wifi.aware.DiscoverySession: NetworkSpecifier createNetworkSpecifierOpen(PeerHandle)>    ---->    WifiAwareNetworkSpecifier.Builder
<android.provider.Contacts.Phones: CharSequence getDisplayLabel(Context,int,CharSequence)>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.Phones: CharSequence getDisplayLabel(Context,int,CharSequence)>    ---->    android.provider.ContactsContract
<android.widget.OverScroller: void setFinalY(int)>
/**
 * Sets the final position (Y) for this scroller.
 *
 * @param newY The new Y offset as an absolute distance from the origin.
 * @see #extendDuration(int)
 * @see #setFinalX(int)
 *
 * @hide Pending removal once nothing depends on it
 * @deprecated OverScroller's final position may change during an animation.
 * Instead of setting a new final position and extending
 * the duration of an existing scroll, use startScroll
 * to begin a new animation.
 */
====>[HIDDEN]<android.widget.OverScroller: void setFinalY(int)>    ---->    
<android.graphics.Typeface: Typeface createFromFamiliesWithDefault(FontFamily[],int,int)>
/**
 * This method is used by supportlib-v27.
 *
 * @deprecated Use {@link android.graphics.fonts.FontFamily} instead.
 */
====>[PUBLIC]<android.graphics.Typeface: Typeface createFromFamiliesWithDefault(FontFamily[],int,int)>    ---->    android.graphics.fonts.FontFamily
<android.webkit.WebViewDelegate: boolean canInvokeDrawGlFunctor(View)>
/**
 * Returns {@code true} if the draw GL functor can be invoked (see {@link #invokeDrawGlFunctor})
 * and {@code false} otherwise.
 *
 * @deprecated Use {@link #drawWebViewFunctor(Canvas, int)}
 */
====>[PUBLIC]<android.webkit.WebViewDelegate: boolean canInvokeDrawGlFunctor(View)>    ---->    #drawWebViewFunctor(Canvas, int)
<android.app.Notification.MediaStyle: void <init>(Builder)>
/**
 * @deprecated use {@code MediaStyle()}.
 */
====>[PUBLIC]<android.app.Notification.MediaStyle: void <init>(Builder)>    ---->    
Inconsistency (Non-Documentation):<com.android.internal.content.PackageHelper: int resolveInstallLocation(Context,String,int,long,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/com/android/internal/content/PackageHelper.java
<com.android.internal.content.PackageHelper: int resolveInstallLocation(Context,String,int,long,int)>

====>[PUBLIC]<com.android.internal.content.PackageHelper: int resolveInstallLocation(Context,String,int,long,int)>    ---->    
<android.service.voice.VoiceInteractionSession.CompleteVoiceRequest: CharSequence getMessage()>
/**
 * Return the message informing the user of the completion, as per
 * {@link android.app.VoiceInteractor.CompleteVoiceRequest
 * VoiceInteractor.CompleteVoiceRequest}.
 * @deprecated Prefer {@link #getVoicePrompt()} which allows a separate visual message.
 */
====>[PUBLIC]<android.service.voice.VoiceInteractionSession.CompleteVoiceRequest: CharSequence getMessage()>    ---->    #getVoicePrompt()
<android.telecom.Call: void addListener(Listener)>
/**
 * Adds a listener to this {@code Call}.
 *
 * @param listener A {@code Listener}.
 * @deprecated Use {@link #registerCallback} instead.
 * @hide
 */
====>[HIDDEN]<android.telecom.Call: void addListener(Listener)>    ---->    #registerCallback
<android.telecom.InCallService: void onAudioStateChanged(AudioState)>
/**
 * Called when the audio state changes.
 *
 * @param audioState The new {@link AudioState}.
 * @deprecated Use {@link #onCallAudioStateChanged(CallAudioState) instead}.
 * @hide
 */
====>[HIDDEN]<android.telecom.InCallService: void onAudioStateChanged(AudioState)>    ---->    #onCallAudioStateChanged(CallAudioState)
<android.app.Fragment: LoaderManager getLoaderManager()>
/**
 * Return the LoaderManager for this fragment, creating it if needed.
 *
 * @deprecated Use {@link android.support.v4.app.Fragment#getLoaderManager()}
 */
====>[PUBLIC]<android.app.Fragment: LoaderManager getLoaderManager()>    ---->    android.support.v4.app.Fragment#getLoaderManager()
<android.content.pm.PackageManager: void getPackageSizeInfo(String,IPackageStatsObserver)>
/**
 * Like {@link #getPackageSizeInfoAsUser(String, int, IPackageStatsObserver)}, but
 * returns the size for the calling user.
 *
 * @deprecated use {@link StorageStatsManager} instead.
 * @hide
 */
====>[HIDDEN]<android.content.pm.PackageManager: void getPackageSizeInfo(String,IPackageStatsObserver)>    ---->    StorageStatsManager
<android.content.pm.PackageInstaller.SessionInfo: boolean getAllowDowngrade()>
/**
 * Get the value set in {@link SessionParams#setAllowDowngrade(boolean)}.
 *
 * @deprecated use {@link #getRequestDowngrade()}.
 * @hide
 */
====>[HIDDEN]<android.content.pm.PackageInstaller.SessionInfo: boolean getAllowDowngrade()>    ---->    #getRequestDowngrade()
<android.graphics.ImageDecoder: boolean getMutable()>
/**
 * @removed
 * @deprecated Renamed to {@link #isMutableRequired}.
 */
====>[HIDDEN]<android.graphics.ImageDecoder: boolean getMutable()>    ---->    #isMutableRequired
<android.app.Activity: void setPersistent(boolean)>
/**
 * @deprecated As of {@link android.os.Build.VERSION_CODES#GINGERBREAD}
 * this is a no-op.
 * @hide
 */
====>[HIDDEN]<android.app.Activity: void setPersistent(boolean)>    ---->    
<android.content.Context: void sendStickyBroadcastAsUser(Intent,UserHandle,Bundle)>
/**
 * @hide
 * This is just here for sending CONNECTIVITY_ACTION.
 */
====>[HIDDEN]<android.content.Context: void sendStickyBroadcastAsUser(Intent,UserHandle,Bundle)>    ---->    
<android.telephony.TelephonyManager: IccOpenLogicalChannelResponse iccOpenLogicalChannel(String)>
/**
 * Opens a logical channel to the ICC card.
 *
 * Input parameters equivalent to TS 27.007 AT+CCHO command.
 *
 * <p>Requires Permission:
 * {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE} or that the calling
 * app has carrier privileges (see {@link #hasCarrierPrivileges}).
 *
 * @param AID Application id. See ETSI 102.221 and 101.220.
 * @return an IccOpenLogicalChannelResponse object.
 * @deprecated Replaced by {@link #iccOpenLogicalChannel(String, int)}
 */
====>[PUBLIC]<android.telephony.TelephonyManager: IccOpenLogicalChannelResponse iccOpenLogicalChannel(String)>    ---->    #iccOpenLogicalChannel(String, int)
Inconsistency (Non-Documentation):<android.graphics.BaseCanvas: void drawPosText(String,float[],Paint)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//graphics/java/android/graphics/BaseCanvas.java
<android.graphics.BaseCanvas: void drawPosText(String,float[],Paint)>

====>[PUBLIC]<android.graphics.BaseCanvas: void drawPosText(String,float[],Paint)>    ---->    
<android.database.Cursor: boolean requery()>
/**
 * Performs the query that created the cursor again, refreshing its
 * contents. This may be done at any time, including after a call to {@link
 * #deactivate}.
 *
 * Since this method could execute a query on the database and potentially take
 * a while, it could cause ANR if it is called on Main (UI) thread.
 * A warning is printed if this method is being executed on Main thread.
 *
 * @return true if the requery succeeded, false if not, in which case the
 * cursor becomes invalid.
 * @deprecated Don't use this. Just request a new cursor, so you can do this
 * asynchronously and update your list view once the new cursor comes back.
 */
====>[PUBLIC]<android.database.Cursor: boolean requery()>    ---->    
<com.android.internal.widget.RecyclerView.LayoutManager: boolean onRequestChildFocus(RecyclerView,View,View)>
/**
 * @deprecated Use {@link #onRequestChildFocus(RecyclerView, State, View, View)}
 */
====>[PUBLIC]<com.android.internal.widget.RecyclerView.LayoutManager: boolean onRequestChildFocus(RecyclerView,View,View)>    ---->    #onRequestChildFocus(RecyclerView, State, View, View)
<android.widget.DatePicker: boolean getCalendarViewShown()>
/**
 * Returns whether the {@link CalendarView} is shown.
 * <p>
 * <strong>Note:</strong> This method returns {@code false} when the
 * {@link android.R.styleable#DatePicker_datePickerMode} attribute is set
 * to {@code calendar}.
 *
 * @return {@code true} if the calendar view is shown
 * @see #getCalendarView()
 * @deprecated Not supported by Material-style {@code calendar} mode
 */
====>[PUBLIC]<android.widget.DatePicker: boolean getCalendarViewShown()>    ---->    
<android.view.ViewGroup: void setAnimationCacheEnabled(boolean)>
/**
 * Enables or disables the children's drawing cache during a layout animation.
 * By default, the drawing cache is enabled but this will prevent nested
 * layout animations from working. To nest animations, you must disable the
 * cache.
 *
 * @param enabled true to enable the animation cache, false otherwise
 *
 * @see #isAnimationCacheEnabled()
 * @see View#setDrawingCacheEnabled(boolean)
 *
 * @deprecated As of {@link android.os.Build.VERSION_CODES#M}, this property is ignored.
 * Caching behavior of children may be controlled through {@link View#setLayerType(int, Paint)}.
 */
====>[PUBLIC]<android.view.ViewGroup: void setAnimationCacheEnabled(boolean)>    ---->    
<android.hardware.SensorManager: void unregisterListener(SensorListener)>
/**
 * Unregisters a listener for all sensors.
 *
 * @deprecated This method is deprecated, use
 * {@link SensorManager#unregisterListener(SensorEventListener)}
 * instead.
 *
 * @param listener
 * a SensorListener object
 */
====>[PUBLIC]<android.hardware.SensorManager: void unregisterListener(SensorListener)>    ---->    SensorManager#unregisterListener(SensorEventListener)
<android.media.MediaCodecList: int getCodecCount()>
/**
 * Count the number of available (regular) codecs.
 *
 * @deprecated Use {@link #getCodecInfos} instead.
 *
 * @see #REGULAR_CODECS
 */
====>[PUBLIC]<android.media.MediaCodecList: int getCodecCount()>    ---->    #getCodecInfos
<android.telephony.SignalStrength: int getCdmaLevel()>
/**
 * Get cdma as level 0..4
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthCdma#getLevel}.
 *
 * @see android.telephony#CellSignalStrengthCdma
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getCdmaLevel()>    ---->    android.telephony#CellSignalStrengthCdma
<android.opengl.Matrix: void <init>()>
/**
 * @deprecated All methods are static, do not instantiate this class.
 */
====>[PUBLIC]<android.opengl.Matrix: void <init>()>    ---->    
<android.net.NetworkInfo: int getSubtype()>
/**
 * Return a network-type-specific integer describing the subtype
 * of the network.
 * @return the network subtype
 * @deprecated Use {@link android.telephony.TelephonyManager#getDataNetworkType} instead.
 */
====>[PUBLIC]<android.net.NetworkInfo: int getSubtype()>    ---->    android.telephony.TelephonyManager#getDataNetworkType
<android.graphics.Canvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,Paint)>
/**
 * Legacy version of drawBitmap(int[] colors, ...) that took ints for x,y
 *
 * @deprecated Usage with a {@link #isHardwareAccelerated() hardware accelerated} canvas
 * requires an internal copy of color buffer contents every time this method is
 * called. Using a Bitmap avoids this copy, and allows the application to more
 * explicitly control the lifetime and copies of pixel data.
 */
====>[PUBLIC]<android.graphics.Canvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,Paint)>    ---->    #isHardwareAccelerated() hardware accelerated
<android.renderscript.ProgramVertexFixedFunction.Constants: void setProjection(Matrix4f)>
/**
 * @deprecated in API 16
 * Sets the projection matrix in the fixed function matrix buffer
 *
 * @param m projection matrix
 */
====>[PUBLIC]<android.renderscript.ProgramVertexFixedFunction.Constants: void setProjection(Matrix4f)>    ---->    
<android.app.Activity: void setTitleColor(int)>
/**
 * Change the color of the title associated with this activity.
 * <p>
 * This method is deprecated starting in API Level 11 and replaced by action
 * bar styles. For information on styling the Action Bar, read the <a
 * href="{@docRoot} guide/topics/ui/actionbar.html">Action Bar</a> developer
 * guide.
 *
 * @deprecated Use action bar styles instead.
 */
====>[PUBLIC]<android.app.Activity: void setTitleColor(int)>    ---->    action bar styles
<android.provider.Contacts.People: Uri addToGroup(ContentResolver,long,long)>
/**
 * Adds a person to a group.
 *
 * @param resolver the resolver to use
 * @param personId the person to add to the group
 * @param groupId the group to add the person to
 * @return the URI of the group membership row
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.People: Uri addToGroup(ContentResolver,long,long)>    ---->    android.provider.ContactsContract
<android.widget.AutoCompleteTextView: OnItemSelectedListener getItemSelectedListener()>
/**
 * <p>Returns the listener that is notified whenever the user selects an
 * item in the drop down list.</p>
 *
 * @return the item selected listener
 *
 * @deprecated Use {@link #getOnItemSelectedListener()} intead
 */
====>[PUBLIC]<android.widget.AutoCompleteTextView: OnItemSelectedListener getItemSelectedListener()>    ---->    #getOnItemSelectedListener()
Inconsistency (Non-Documentation):<android.net.wifi.WifiScanner: void startTrackingBssids(BssidInfo[],int,BssidListener)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//wifi/java/android/net/wifi/WifiScanner.java
<android.net.wifi.WifiScanner: void startTrackingBssids(BssidInfo[],int,BssidListener)>
/**
 * set interesting access points to find
 * @param bssidInfos access points of interest
 * @param apLostThreshold number of scans needed to indicate that AP is lost
 * @param listener object provided to report events on; this object must be unique and must
 * also be provided on {@link #stopTrackingBssids}
 */
====>[PUBLIC]<android.net.wifi.WifiScanner: void startTrackingBssids(BssidInfo[],int,BssidListener)>    ---->    
<android.telephony.NeighboringCellInfo: void setRssi(int)>
/**
 * Set the signal strength of the cell.
 *
 * NeighboringCellInfo is a one time shot for the neighboring cells based on
 * the radio network type at that moment. It shouldn't be changed after
 * creation.
 *
 * @deprecated initial rssi value passed as parameter to constructor
 * {@link #NeighboringCellInfo(int, String, int)}
 */
====>[PUBLIC]<android.telephony.NeighboringCellInfo: void setRssi(int)>    ---->    #NeighboringCellInfo(int, String, int)
<android.telephony.PhoneNumberUtils: int getFormatTypeForLocale(Locale)>
/**
 * Returns the phone number formatting type for the given locale.
 *
 * @param locale The locale of interest, usually {@link Locale#getDefault()}
 * @return The formatting type for the given locale, or FORMAT_UNKNOWN if the formatting
 * rules are not known for the given locale
 *
 * @deprecated Use link #formatNumber(String phoneNumber, String defaultCountryIso) instead
 */
====>[PUBLIC]<android.telephony.PhoneNumberUtils: int getFormatTypeForLocale(Locale)>    ---->    link #formatNumber(String phoneNumber, String defaultCountryIso)
<android.provider.Contacts.People.Extensions: void <init>()>
/**
 * no public constructor since this is a utility class
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.People.Extensions: void <init>()>    ---->    android.provider.ContactsContract
<android.provider.MediaStore: PendingSession openPending(Context,Uri)>
/**
 * Open a pending media item to make progress on it. You can open a pending
 * item multiple times before finally calling either
 * {@link PendingSession#publish()} or {@link PendingSession#abandon()}.
 *
 * @param uri token which was previously returned from
 * {@link #createPending(Context, PendingParams)}.
 * @removed
 */
====>[HIDDEN]<android.provider.MediaStore: PendingSession openPending(Context,Uri)>    ---->    
<android.app.Notification.BigTextStyle: void <init>(Builder)>
/**
 * @deprecated use {@code BigTextStyle()}.
 */
====>[PUBLIC]<android.app.Notification.BigTextStyle: void <init>(Builder)>    ---->    
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: int getCustomContentHeight()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.WearableExtender: int getCustomContentHeight()>
/**
 * Get the custom height in pixels for the display of this notification's content.
 * <p>This option is only available for custom display notifications created
 * using {@link #setDisplayIntent}. See also {@link #setCustomSizePreset} and
 * {@link #setCustomContentHeight}.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: int getCustomContentHeight()>    ---->    
Inconsistency (Non-Documentation):<android.security.keystore.AndroidKeyStoreSignatureSpiBase: Object engineGetParameter(String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//keystore/java/android/security/keystore/AndroidKeyStoreSignatureSpiBase.java
<android.security.keystore.AndroidKeyStoreSignatureSpiBase: Object engineGetParameter(String)>

====>[PUBLIC]<android.security.keystore.AndroidKeyStoreSignatureSpiBase: Object engineGetParameter(String)>    ---->    
<android.bluetooth.BluetoothHealth: boolean connectChannelToSource(BluetoothDevice,BluetoothHealthAppConfiguration)>
/**
 * Connect to a health device which has the {@link #SOURCE_ROLE}.
 * This is an asynchronous call. If this function returns true, the callback
 * associated with the application configuration will be called.
 *
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
 *
 * @param device The remote Bluetooth device.
 * @param config The application configuration which has been registered using {@link
 * #registerSinkAppConfiguration(String, int, BluetoothHealthCallback) }
 * @return If true, the callback associated with the application config will be called.
 *
 * @deprecated Health Device Profile (HDP) and MCAP protocol are no longer used. New
 * apps should use Bluetooth Low Energy based solutions such as {@link BluetoothGatt},
 * {@link BluetoothAdapter#listenUsingL2capChannel()(int)}, or
 * {@link BluetoothDevice#createL2capChannel(int)}
 */
====>[PUBLIC]<android.bluetooth.BluetoothHealth: boolean connectChannelToSource(BluetoothDevice,BluetoothHealthAppConfiguration)>    ---->    BluetoothGatt
<android.location.LocationManager: void removeNmeaListener(NmeaListener)>
/**
 * Removes an NMEA listener.
 *
 * @param listener a {@link GpsStatus.NmeaListener} object to remove
 * @deprecated use {@link #removeNmeaListener(OnNmeaMessageListener)} instead.
 * @removed
 */
====>[HIDDEN]<android.location.LocationManager: void removeNmeaListener(NmeaListener)>    ---->    #removeNmeaListener(OnNmeaMessageListener)
<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder addTriangle(int,int,int)>
/**
 * @deprecated in API 16
 * Adds a new triangle to the mesh builder
 *
 * @param idx1 index of the first vertex in the triangle
 * @param idx2 index of the second vertex in the triangle
 * @param idx3 index of the third vertex in the triangle
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder addTriangle(int,int,int)>    ---->    
<android.app.UiAutomation: boolean grantRuntimePermission(String,String,UserHandle)>
/**
 * @deprecated replaced by
 * {@link #grantRuntimePermissionAsUser(String, String, UserHandle)}.
 * @hide
 */
====>[HIDDEN]<android.app.UiAutomation: boolean grantRuntimePermission(String,String,UserHandle)>    ---->    #grantRuntimePermissionAsUser(String, String, UserHandle)
<android.content.pm.PackageManager: int installExistingPackage(String)>
/**
 * If there is already an application with the given package name installed
 * on the system for other users, also install it for the calling user.
 * @hide
 *
 * @deprecated use {@link PackageInstaller#installExistingPackage()} instead.
 */
====>[HIDDEN]<android.content.pm.PackageManager: int installExistingPackage(String)>    ---->    PackageInstaller#installExistingPackage()
<android.renderscript.Allocation: void resize(int)>
/**
 * Resize a 1D allocation.  The contents of the allocation are preserved.
 * If new elements are allocated objects are created with null contents and
 * the new region is otherwise undefined.
 *
 * <p>If the new region is smaller the references of any objects outside the
 * new region will be released.</p>
 *
 * <p>A new type will be created with the new dimension.</p>
 *
 * @param dimX The new size of the allocation.
 *
 * @deprecated RenderScript objects should be immutable once created.  The
 * replacement is to create a new allocation and copy the contents. This
 * function will throw an exception if API 21 or higher is used.
 */
====>[PUBLIC]<android.renderscript.Allocation: void resize(int)>    ---->    
<android.renderscript.RSSurfaceView: void <init>(Context)>
/**
 * @deprecated in API 16
 * Standard View constructor. In order to render something, you
 * must call {@link android.opengl.GLSurfaceView#setRenderer} to
 * register a renderer.
 */
====>[PUBLIC]<android.renderscript.RSSurfaceView: void <init>(Context)>    ---->    android.opengl.GLSurfaceView#setRenderer
<android.app.Activity: void startActivityFromFragment(Fragment,Intent,int)>
/**
 * Same as calling {@link #startActivityFromFragment(Fragment, Intent, int, Bundle)}
 * with no options.
 *
 * @param fragment The fragment making the call.
 * @param intent The intent to start.
 * @param requestCode Reply request code.  < 0 if reply is not requested.
 *
 * @throws android.content.ActivityNotFoundException
 *
 * @see Fragment#startActivity
 * @see Fragment#startActivityForResult
 *
 * @deprecated Use {@link android.support.v4.app.FragmentActivity#startActivityFromFragment(
 * android.support.v4.app.Fragment,Intent,int)}
 */
====>[PUBLIC]<android.app.Activity: void startActivityFromFragment(Fragment,Intent,int)>    ---->    android.support.v4.app.FragmentActivity#startActivityFromFragment(  android.support.v4.app.Fragment,Intent,int)
<android.content.Intent: String toURI()>
/**
 * Call {@link #toUri} with 0 flags.
 * @deprecated Use {@link #toUri} instead.
 */
====>[PUBLIC]<android.content.Intent: String toURI()>    ---->    #toUri
<android.app.ActionBar: int getNavigationMode()>
/**
 * Returns the current navigation mode. The result will be one of:
 * <ul>
 * <li>{@link #NAVIGATION_MODE_STANDARD}</li>
 * <li>{@link #NAVIGATION_MODE_LIST}</li>
 * <li>{@link #NAVIGATION_MODE_TABS}</li>
 * </ul>
 *
 * @return The current navigation mode.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: int getNavigationMode()>    ---->    
<android.view.MotionEvent: MotionEvent obtain(long,long,int,int,float,float,float,float,int,float,float,int,int)>
/**
 * Create a new MotionEvent, filling in all of the basic values that
 * define the motion.
 *
 * @param downTime The time (in ms) when the user originally pressed down to start
 * a stream of position events.  This must be obtained from {@link SystemClock#uptimeMillis()}.
 * @param eventTime  The the time (in ms) when this specific event was generated.  This
 * must be obtained from {@link SystemClock#uptimeMillis()}.
 * @param action The kind of action being performed, such as {@link #ACTION_DOWN}.
 * @param pointerCount The number of pointers that are active in this event.
 * @param x The X coordinate of this event.
 * @param y The Y coordinate of this event.
 * @param pressure The current pressure of this event.  The pressure generally
 * ranges from 0 (no pressure at all) to 1 (normal pressure), however
 * values higher than 1 may be generated depending on the calibration of
 * the input device.
 * @param size A scaled value of the approximate size of the area being pressed when
 * touched with the finger. The actual value in pixels corresponding to the finger
 * touch is normalized with a device specific range of values
 * and scaled to a value between 0 and 1.
 * @param metaState The state of any meta / modifier keys that were in effect when
 * the event was generated.
 * @param xPrecision The precision of the X coordinate being reported.
 * @param yPrecision The precision of the Y coordinate being reported.
 * @param deviceId The id for the device that this event came from.  An id of
 * zero indicates that the event didn't come from a physical device; other
 * numbers are arbitrary and you shouldn't depend on the values.
 * @param edgeFlags A bitfield indicating which edges, if any, were touched by this
 * MotionEvent.
 *
 * @deprecated Use {@link #obtain(long, long, int, float, float, float, float, int, float, float, int, int)}
 * instead.
 */
====>[PUBLIC]<android.view.MotionEvent: MotionEvent obtain(long,long,int,int,float,float,float,float,int,float,float,int,int)>    ---->    #obtain(long, long, int, float, float, float, float, int, float, float, int, int)
<android.webkit.WebViewDelegate: void invokeDrawGlFunctor(View,long,boolean)>
/**
 * Invokes the draw GL functor. If waitForCompletion is {@code false} the functor
 * may be invoked asynchronously.
 *
 * @param nativeDrawGLFunctor the pointer to the native functor that implements
 * system/core/include/utils/Functor.h
 * @deprecated Use {@link #drawWebViewFunctor(Canvas, int)}
 */
====>[PUBLIC]<android.webkit.WebViewDelegate: void invokeDrawGlFunctor(View,long,boolean)>    ---->    #drawWebViewFunctor(Canvas, int)
<android.net.wifi.WifiManager: boolean pingSupplicant()>
/**
 * Check that the supplicant daemon is responding to requests.
 * @return {@code true} if we were able to communicate with the supplicant and
 * it returned the expected response to the PING message.
 * @deprecated Will return the output of {@link #isWifiEnabled()} instead.
 */
====>[PUBLIC]<android.net.wifi.WifiManager: boolean pingSupplicant()>    ---->    #isWifiEnabled()
<android.test.AndroidTestRunner: void setInstrumentaiton(Instrumentation)>
/**
 * @deprecated Incorrect spelling,
 * use {@link #setInstrumentation(android.app.Instrumentation)} instead.
 */
====>[PUBLIC]<android.test.AndroidTestRunner: void setInstrumentaiton(Instrumentation)>    ---->    #setInstrumentation(android.app.Instrumentation)
<android.content.pm.PackageInstaller.SessionParams: void setAllowDowngrade(boolean)>
/**
 * @deprecated use {@link #setRequestDowngrade(boolean)}.
 * {@hide}
 */
====>[HIDDEN]<android.content.pm.PackageInstaller.SessionParams: void setAllowDowngrade(boolean)>    ---->    #setRequestDowngrade(boolean)
<android.app.Activity: void setProgressBarVisibility(boolean)>
/**
 * Sets the visibility of the progress bar in the title.
 * <p>
 * In order for the progress bar to be shown, the feature must be requested
 * via {@link #requestWindowFeature(int)}.
 *
 * @param visible Whether to show the progress bars in the title.
 * @deprecated No longer supported starting in API 21.
 */
====>[PUBLIC]<android.app.Activity: void setProgressBarVisibility(boolean)>    ---->    
<android.telephony.NeighboringCellInfo: void <init>()>
/**
 * Empty constructor.  Initializes the RSSI and CID.
 *
 * NeighboringCellInfo is one time shot for the neighboring cells based on
 * the radio network type at that moment. Its constructor needs radio network
 * type.
 *
 * @deprecated by {@link #NeighboringCellInfo(int, String, int)}
 */
====>[PUBLIC]<android.telephony.NeighboringCellInfo: void <init>()>    ---->    #NeighboringCellInfo(int, String, int)
<android.util.proto.ProtoOutputStream: void writePackedUInt32(long,int[])>
/**
 * Write a list of packed proto "uint32" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedUInt32(long,int[])>    ---->    #write
<android.view.textclassifier.TextClassifier.EntityConfig: EntityConfig create(Collection<String>,Collection<String>,Collection<String>)>
/**
 * Creates an EntityConfig.
 *
 * @param hints Hints for the TextClassifier to determine what types of entities to find
 * @param includedEntityTypes Entity types, e.g. {@link #TYPE_EMAIL}, to explicitly include
 * @param excludedEntityTypes Entity types, e.g. {@link #TYPE_PHONE}, to explicitly exclude
 *
 * Note that if an entity has been excluded, the exclusion will take precedence.
 *
 * @deprecated Use {@link Builder} instead.
 */
====>[PUBLIC]<android.view.textclassifier.TextClassifier.EntityConfig: EntityConfig create(Collection<String>,Collection<String>,Collection<String>)>    ---->    Builder
<android.graphics.drawable.BitmapDrawable: void <init>(InputStream)>
/**
 * Create a drawable by decoding a bitmap from the given input stream.
 * @deprecated Use {@link #BitmapDrawable(Resources, java.io.InputStream)} to ensure
 * that the drawable has correctly set its target density.
 */
====>[PUBLIC]<android.graphics.drawable.BitmapDrawable: void <init>(InputStream)>    ---->    #BitmapDrawable(Resources, java.io.InputStream)
<android.app.Notification.MessagingStyle: MessagingStyle addMessage(CharSequence,long,CharSequence)>
/**
 * Adds a message for display by this notification. Convenience call for a simple
 * {@link Message} in {@link #addMessage(Notification.MessagingStyle.Message)}.
 * @param text A {@link CharSequence} to be displayed as the message content
 * @param timestamp Time at which the message arrived
 * @param sender A {@link CharSequence} to be used for displaying the name of the
 * sender. Should be <code>null</code> for messages by the current user, in which case
 * the platform will insert {@link #getUserDisplayName()}.
 * Should be unique amongst all individuals in the conversation, and should be
 * consistent during re-posts of the notification.
 *
 * @see Message#Notification.MessagingStyle.Message(CharSequence, long, CharSequence)
 *
 * @return this object for method chaining
 *
 * @deprecated use {@link #addMessage(CharSequence, long, Person)}
 */
====>[PUBLIC]<android.app.Notification.MessagingStyle: MessagingStyle addMessage(CharSequence,long,CharSequence)>    ---->    #addMessage(CharSequence, long, Person)
<android.nfc.NdefRecord: byte[] toByteArray()>
/**
 * Return this NDEF Record as a byte array.<p>
 * This method is deprecated, use {@link NdefMessage#toByteArray}
 * instead. This is because the NDEF binary format is not defined for
 * a record outside of the context of a message: the MB and ME flags
 * cannot be set without knowing the location inside a message.<p>
 * This implementation will attempt to serialize a single record by
 * always setting the MB and ME flags (in other words, assume this
 * is a single-record NDEF Message).<p>
 *
 * @deprecated use {@link NdefMessage#toByteArray()} instead
 */
====>[PUBLIC]<android.nfc.NdefRecord: byte[] toByteArray()>    ---->    NdefMessage#toByteArray()
<android.util.proto.ProtoOutputStream: void writeRepeatedInt32(long,int)>
/**
 * Write a single repeated proto "int32" type field value.
 *
 * Note that these are stored in memory as signed values and written as unsigned
 * varints, which if negative, are 10 bytes long. If you know the data is likely
 * to be negative, use "sint32".
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedInt32(long,int)>    ---->    #write
<android.app.ActionBar: int getTabCount()>
/**
 * Returns the number of tabs currently registered with the action bar.
 * @return Tab count
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: int getTabCount()>    ---->    
<android.graphics.Canvas: boolean clipRegion(Region)>
/**
 * Intersect the current clip with the specified region. Note that unlike
 * clipRect() and clipPath() which transform their arguments by the
 * current matrix, clipRegion() assumes its argument is already in the
 * coordinate system of the current layer's bitmap, and so not
 * transformation is performed.
 *
 * @param region The region to operate on the current clip, based on op
 * @return true if the resulting is non-empty
 *
 * @removed
 * @deprecated Unlike all other clip calls this API does not respect the
 * current matrix. Use {@link #clipRect(Rect)} as an alternative.
 */
====>[HIDDEN]<android.graphics.Canvas: boolean clipRegion(Region)>    ---->    #clipRect(Rect)
<android.database.CursorWindow: boolean isBlob(int,int)>
/**
 * Returns true if the field at the specified row and column index
 * has type {@link Cursor#FIELD_TYPE_BLOB} or {@link Cursor#FIELD_TYPE_NULL}.
 *
 * @param row The zero-based row index.
 * @param column The zero-based column index.
 * @return True if the field has type {@link Cursor#FIELD_TYPE_BLOB} or
 * {@link Cursor#FIELD_TYPE_NULL}.
 * @deprecated Use {@link #getType(int, int)} instead.
 */
====>[PUBLIC]<android.database.CursorWindow: boolean isBlob(int,int)>    ---->    #getType(int, int)
<android.view.textclassifier.TextClassifier.EntityConfig: EntityConfig createWithHints(Collection<String>)>
/**
 * Creates an EntityConfig.
 *
 * @param hints Hints for the TextClassifier to determine what types of entities to find.
 *
 * @deprecated Use {@link Builder} instead.
 */
====>[PUBLIC]<android.view.textclassifier.TextClassifier.EntityConfig: EntityConfig createWithHints(Collection<String>)>    ---->    Builder
<android.provider.ContactsContract.CommonDataKinds.Phone: CharSequence getDisplayLabel(Context,int,CharSequence)>
/**
 * @deprecated use {@link #getTypeLabel(Resources, int, CharSequence)} instead.
 * @hide
 */
====>[HIDDEN]<android.provider.ContactsContract.CommonDataKinds.Phone: CharSequence getDisplayLabel(Context,int,CharSequence)>    ---->    #getTypeLabel(Resources, int, CharSequence)
<android.app.usage.StorageStatsManager: StorageStats queryStatsForUid(String,int)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.usage.StorageStatsManager: StorageStats queryStatsForUid(String,int)>    ---->    
<android.media.AudioTrack: int getNativeFrameCount()>
/**
 * Returns the frame count of the native <code>AudioTrack</code> buffer.
 * @return current size in frames of the <code>AudioTrack</code> buffer.
 * @throws IllegalStateException
 * @deprecated Use the identical public method {@link #getBufferSizeInFrames()} instead.
 */
====>[PUBLIC]<android.media.AudioTrack: int getNativeFrameCount()>    ---->    #getBufferSizeInFrames()
<android.view.ViewDebug: void trace(View,HierarchyTraceType)>
/**
 * @deprecated This method is now unused and invoking it is a no-op
 */
====>[PUBLIC]<android.view.ViewDebug: void trace(View,HierarchyTraceType)>    ---->    
<android.content.Context: void clearWallpaper()>
/**
 * @deprecated Use {@link android.app.WallpaperManager#clear
 * WallpaperManager.clear()} instead.
 * <p>This method requires the caller to hold the permission
 * {@link android.Manifest.permission#SET_WALLPAPER}.
 */
====>[PUBLIC]<android.content.Context: void clearWallpaper()>    ---->    android.app.WallpaperManager#clear  WallpaperManager.clear()
<android.telephony.SignalStrength: int getEvdoAsuLevel()>
/**
 * Get the evdo signal level as an asu value between 0..31, 99 is unknown
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthCdma#getEvdoAsuLevel}. Since there is no definition of
 * ASU for EvDO, the resultant value is Android-specific and is not recommended
 * for use.
 *
 * @see android.telephony#CellSignalStrengthCdma
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getEvdoAsuLevel()>    ---->    android.telephony#CellSignalStrengthCdma
<android.content.ClipboardManager: void setText(CharSequence)>
/**
 * @deprecated Use {@link #setPrimaryClip(ClipData)} instead.  This
 * creates a ClippedItem holding the given text and sets it as the
 * primary clip.  It has no label or icon.
 */
====>[PUBLIC]<android.content.ClipboardManager: void setText(CharSequence)>    ---->    #setPrimaryClip(ClipData)
<android.net.TrafficStats: long getUidUdpRxPackets(int)>
/**
 * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},
 * transport layer statistics are no longer available, and will
 * always return {@link #UNSUPPORTED}.
 * @see #getUidRxPackets(int)
 */
====>[PUBLIC]<android.net.TrafficStats: long getUidUdpRxPackets(int)>    ---->    #getUidRxPackets(int)
<android.renderscript.ProgramVertex.Builder: void <init>(RenderScript)>
/**
 * @deprecated in API 16
 * Create a builder object.
 *
 * @param rs Context to which the program will belong.
 */
====>[PUBLIC]<android.renderscript.ProgramVertex.Builder: void <init>(RenderScript)>    ---->    
<android.telephony.TelephonyManager: boolean isRinging()>
/**
 * @deprecated Use {@link android.telecom.TelecomManager#isRinging} instead
 * @hide
 */
====>[HIDDEN]<android.telephony.TelephonyManager: boolean isRinging()>    ---->    android.telecom.TelecomManager#isRinging
<android.util.proto.ProtoOutputStream: void writeRepeatedUInt32(long,int)>
/**
 * Write a single repeated proto "uint32" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedUInt32(long,int)>    ---->    #write
<android.graphics.Paint: Rasterizer setRasterizer(Rasterizer)>
/**
 * Set or clear the rasterizer object.
 * <p />
 * Pass null to clear any previous rasterizer.
 * As a convenience, the parameter passed is also returned.
 *
 * @param rasterizer May be null. The new rasterizer to be installed in
 * the paint.
 * @return           rasterizer
 *
 * @deprecated Rasterizer is not supported by either the HW or PDF backends.
 * @removed
 */
====>[HIDDEN]<android.graphics.Paint: Rasterizer setRasterizer(Rasterizer)>    ---->    
<android.util.proto.ProtoOutputStream: void writeSFixed32(long,int)>
/**
 * Write a single proto "sfixed32" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeSFixed32(long,int)>    ---->    #write
<com.android.location.provider.LocationProviderBase: long onGetStatusUpdateTime()>
/**
 * This method will no longer be invoked.
 *
 * Returns the time at which the status was last updated. It is the
 * responsibility of the provider to appropriately set this value using
 * {@link android.os.SystemClock#elapsedRealtime SystemClock.elapsedRealtime()}.
 * there is a status update that it wishes to broadcast to all its
 * listeners. The provider should be careful not to broadcast
 * the same status again.
 *
 * @return time of last status update in millis since last reboot
 *
 * @deprecated This callback will be never be invoked on Android Q and above. This method should
 * only be implemented in location providers that need to support SDKs below Android Q. This
 * method may be removed in the future.
 */
====>[PUBLIC]<com.android.location.provider.LocationProviderBase: long onGetStatusUpdateTime()>    ---->    
<android.hardware.Camera.Parameters: void dump()>
/**
 * Writes the current Parameters to the log.
 * @hide
 * @deprecated
 */
====>[HIDDEN]<android.hardware.Camera.Parameters: void dump()>    ---->    
Inconsistency (Non-Documentation):<com.android.server.AppStateTracker: void dump(PrintWriter,String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//services/core/java/com/android/server/AppStateTracker.java
<com.android.server.AppStateTracker: void dump(PrintWriter,String)>

====>[PUBLIC]<com.android.server.AppStateTracker: void dump(PrintWriter,String)>    ---->    
<android.net.NetworkCapabilities: void setCapabilities(int[])>
/**
 * @deprecated use {@link #setCapabilities(int[], int[])}
 * @hide
 */
====>[HIDDEN]<android.net.NetworkCapabilities: void setCapabilities(int[])>    ---->    #setCapabilities(int[], int[])
<android.renderscript.ProgramVertexFixedFunction: void bindConstants(Constants)>
/**
 * @deprecated in API 16
 * Binds the constant buffer containing fixed function emulation
 * matrices
 *
 * @param va allocation containing fixed function matrices
 */
====>[PUBLIC]<android.renderscript.ProgramVertexFixedFunction: void bindConstants(Constants)>    ---->    
<com.android.settingslib.utils.StringUtil: CharSequence formatRelativeTime(Context,double,boolean)>
/**
 * Returns relative time for the given millis in the past, in a long format such as "2 days
 * ago", "5 hours ago",  "40 minutes ago" or "29 seconds ago".
 *
 * <p>The unit is chosen to have good information value while only using one unit. So 27 hours
 * and 50 minutes would be formatted as "28 hr. ago", while 50 hours would be formatted as
 * "2 days ago".
 *
 * @param context     the application context
 * @param millis      the elapsed time in milli seconds
 * @param withSeconds include seconds?
 * @return the formatted elapsed time
 * @deprecated use {@link #formatRelativeTime(Context, double, boolean,
 * RelativeDateTimeFormatter.Style)} instead.
 */
====>[PUBLIC]<com.android.settingslib.utils.StringUtil: CharSequence formatRelativeTime(Context,double,boolean)>    ---->    #formatRelativeTime(Context, double, boolean,  RelativeDateTimeFormatter.Style)
<android.app.ActivityManagerNative: void broadcastStickyIntent(Intent,String,int,int)>
/**
 * Convenience for sending a sticky broadcast.  For internal use only.
 * If you don't care about permission, use null.
 *
 * @deprecated use ActivityManager.broadcastStickyIntent instead.
 */
====>[PUBLIC]<android.app.ActivityManagerNative: void broadcastStickyIntent(Intent,String,int,int)>    ---->    ActivityManager.broadcastStickyIntent
<android.speech.tts.TextToSpeech: int playEarcon(String,int,HashMap<String, String>)>
/**
 * Plays the earcon using the specified queueing mode and parameters.
 * The earcon must already have been added with {@link #addEarcon(String, String)} or
 * {@link #addEarcon(String, String, int)}.
 * This method is asynchronous, i.e. the method just adds the request to the queue of TTS
 * requests and then returns. The synthesis might not have finished (or even started!) at the
 * time when this method returns. In order to reliably detect errors during synthesis,
 * we recommend setting an utterance progress listener (see
 * {@link #setOnUtteranceProgressListener}) and using the
 * {@link Engine#KEY_PARAM_UTTERANCE_ID} parameter.
 *
 * @param earcon The earcon that should be played
 * @param queueMode {@link #QUEUE_ADD} or {@link #QUEUE_FLUSH}.
 * @param params Parameters for the request. Can be null.
 * Supported parameter names:
 * {@link Engine#KEY_PARAM_STREAM},
 * {@link Engine#KEY_PARAM_UTTERANCE_ID}.
 * Engine specific parameters may be passed in but the parameter keys
 * must be prefixed by the name of the engine they are intended for. For example
 * the keys "com.svox.pico_foo" and "com.svox.pico:bar" will be passed to the
 * engine named "com.svox.pico" if it is being used.
 *
 * @return {@link #ERROR} or {@link #SUCCESS} of <b>queuing</b> the playEarcon operation.
 * @deprecated As of API level 21, replaced by
 * {@link #playEarcon(String, int, Bundle, String)}.
 */
====>[PUBLIC]<android.speech.tts.TextToSpeech: int playEarcon(String,int,HashMap<String, String>)>    ---->    #playEarcon(String, int, Bundle, String)
<android.accessibilityservice.AccessibilityServiceInfo: boolean getCanRetrieveWindowContent()>
/**
 * Whether this service can retrieve the current window's content.
 * <p>
 * <strong>Statically set from
 * {@link AccessibilityService#SERVICE_META_DATA meta-data}.</strong>
 * </p>
 * @return True if window content can be retrieved.
 *
 * @deprecated Use {@link #getCapabilities()}.
 */
====>[PUBLIC]<android.accessibilityservice.AccessibilityServiceInfo: boolean getCanRetrieveWindowContent()>    ---->    #getCapabilities()
<android.content.res.AssetManager: int addAssetPathAsSharedLibrary(String)>
/**
 * @deprecated Use {@link #setApkAssets(ApkAssets[], boolean)}
 * @hide
 */
====>[HIDDEN]<android.content.res.AssetManager: int addAssetPathAsSharedLibrary(String)>    ---->    #setApkAssets(ApkAssets[], boolean)
<com.android.ims.ImsConfig: int setProvisionedStringValue(int,String)>
/**
 * @deprecated see {@link #setConfig(int, String)} instead.
 */
====>[PUBLIC]<com.android.ims.ImsConfig: int setProvisionedStringValue(int,String)>    ---->    #setConfig(int, String)
<android.webkit.WebSettings: void setDefaultZoom(ZoomDensity)>
/**
 * Sets the default zoom density of the page. This must be called from the UI
 * thread. The default is {@link ZoomDensity#MEDIUM}.
 *
 * This setting is not recommended for use in new applications.  If the WebView
 * is utilized to display mobile-oriented pages, the desired effect can be achieved by
 * adjusting 'width' and 'initial-scale' attributes of page's 'meta viewport'
 * tag. For pages lacking the tag, {@link android.webkit.WebView#setInitialScale}
 * and {@link #setUseWideViewPort} can be used.
 *
 * @param zoom the zoom density
 * @deprecated This method is no longer supported, see the function documentation for
 * recommended alternatives.
 */
====>[PUBLIC]<android.webkit.WebSettings: void setDefaultZoom(ZoomDensity)>    ---->    
<android.app.admin.DevicePolicyManager: boolean isCallerApplicationRestrictionsManagingPackage()>
/**
 * Called by any application to find out whether it has been granted permission via
 * {@link #setApplicationRestrictionsManagingPackage} to manage application restrictions
 * for the calling user.
 *
 * <p>This is done by comparing the calling Linux uid with the uid of the package specified by
 * that method.
 *
 * @deprecated From {@link android.os.Build.VERSION_CODES#O}. Use {@link #getDelegatedScopes}
 * instead.
 */
====>[PUBLIC]<android.app.admin.DevicePolicyManager: boolean isCallerApplicationRestrictionsManagingPackage()>    ---->    #getDelegatedScopes
<android.widget.CalendarView: void setShowWeekNumber(boolean)>
/**
 * Sets whether to show the week number.
 *
 * @param showWeekNumber True to show the week number.
 * @deprecated No longer used by Material-style CalendarView.
 *
 * @attr ref android.R.styleable#CalendarView_showWeekNumber
 */
====>[PUBLIC]<android.widget.CalendarView: void setShowWeekNumber(boolean)>    ---->    
<android.renderscript.Mesh.Builder: void <init>(RenderScript,int)>
/**
 * @deprecated in API 16
 * Creates builder object
 * @param rs Context to which the mesh will belong.
 * @param usage specifies how the mesh allocations are to be
 * handled, whether they need to be uploaded to a
 * buffer on the gpu, maintain a cpu copy, etc
 */
====>[PUBLIC]<android.renderscript.Mesh.Builder: void <init>(RenderScript,int)>    ---->    
<android.service.persistentdata.PersistentDataBlockManager: boolean getOemUnlockEnabled()>
/**
 * Returns whether or not "OEM unlock" is enabled or disabled on this device.
 *
 * @deprecated use {@link OemLockManager#isOemUnlockAllowedByUser()} instead.
 */
====>[PUBLIC]<android.service.persistentdata.PersistentDataBlockManager: boolean getOemUnlockEnabled()>    ---->    OemLockManager#isOemUnlockAllowedByUser()
<android.os.Environment: File maybeTranslateEmulatedPathToInternal(File)>
/**
 * If the given path exists on emulated external storage, return the
 * translated backing path hosted on internal storage. This bypasses any
 * emulation later, improving performance. This is <em>only</em> suitable
 * for read-only access.
 * <p>
 * Returns original path if given path doesn't meet these criteria. Callers
 * must hold {@link android.Manifest.permission#WRITE_MEDIA_STORAGE}
 * permission.
 *
 * @deprecated disabled now that FUSE has been replaced by sdcardfs
 * @hide
 */
====>[HIDDEN]<android.os.Environment: File maybeTranslateEmulatedPathToInternal(File)>    ---->    
<android.renderscript.ProgramVertexFixedFunction.Builder: ProgramVertexFixedFunction create()>
/**
 * @deprecated in API 16
 * Creates ProgramVertexFixedFunction from the current state of
 * the builder
 *
 * @return Fixed function emulation ProgramVertex
 */
====>[PUBLIC]<android.renderscript.ProgramVertexFixedFunction.Builder: ProgramVertexFixedFunction create()>    ---->    
<android.os.Debug: void resetGlobalClassInitTime()>
/**
 * Clears the count of time spent initializing classes.
 * @see #getGlobalClassInitTime()
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void resetGlobalClassInitTime()>    ---->    
<android.app.admin.DeviceAdminReceiver: void onPasswordExpiring(Context,Intent)>
/**
 * Called periodically when the device or profile challenge password is about to expire
 * or has expired.  It will typically be called at these times: on device boot, once per day
 * before the password expires, and at the time when the password expires.
 *
 * <p>If the password is not updated by the user, this method will continue to be called
 * once per day until the password is changed or the device admin disables password expiration.
 *
 * <p>The admin will typically post a notification requesting the user to change their password
 * in response to this call. The actual password expiration time can be obtained by calling
 * {@link DevicePolicyManager#getPasswordExpiration(ComponentName) }
 *
 * <p>The admin should be sure to take down any notifications it posted in response to this call
 * when it receives {@link DeviceAdminReceiver#onPasswordChanged(Context, Intent) }.
 *
 * @param context The running context as per {@link #onReceive}.
 * @param intent The received intent as per {@link #onReceive}.
 *
 * @deprecated From {@link android.os.Build.VERSION_CODES#O}, use
 * {@link #onPasswordExpiring(Context, Intent, UserHandle)} instead.
 */
====>[PUBLIC]<android.app.admin.DeviceAdminReceiver: void onPasswordExpiring(Context,Intent)>    ---->    #onPasswordExpiring(Context, Intent, UserHandle)
<android.util.proto.ProtoOutputStream: void writePackedFloat(long,float[])>
/**
 * Write a list of packed proto "float" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedFloat(long,float[])>    ---->    #write
<android.hardware.location.ContextHubManager: int unregisterCallback(ICallback)>
/**
 * @deprecated Use {@link #unregisterCallback(Callback)} instead.
 * @hide
 */
====>[HIDDEN]<android.hardware.location.ContextHubManager: int unregisterCallback(ICallback)>    ---->    #unregisterCallback(Callback)
Inconsistency (Non-Documentation):<android.content.ContextWrapper: void sendStickyBroadcastAsUser(Intent,UserHandle)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/content/ContextWrapper.java
<android.content.ContextWrapper: void sendStickyBroadcastAsUser(Intent,UserHandle)>

====>[PUBLIC]<android.content.ContextWrapper: void sendStickyBroadcastAsUser(Intent,UserHandle)>    ---->    
<android.renderscript.Font: Font createFromFile(RenderScript,Resources,File,float)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.Font: Font createFromFile(RenderScript,Resources,File,float)>    ---->    
<android.webkit.Plugin: void setFileName(String)>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin: void setFileName(String)>    ---->    
<android.media.MediaFile: boolean isDrmFileType(int)>
/**
 * @deprecated file types no longer exist
 */
====>[PUBLIC]<android.media.MediaFile: boolean isDrmFileType(int)>    ---->    
<android.app.ActivityManager: boolean isRunningInTestHarness()>
/**
 * Returns "true" if device is running in a test harness.
 *
 * @deprecated this method is false for all user builds. Users looking to check if their device
 * is running in a device farm should see {@link #isRunningInUserTestHarness()}.
 */
====>[PUBLIC]<android.app.ActivityManager: boolean isRunningInTestHarness()>    ---->    #isRunningInUserTestHarness()
<android.hardware.location.GeofenceHardwareMonitorCallback: void onMonitoringSystemChange(int,boolean,Location)>
/**
 * The callback called when the state of a monitoring system changes.
 * {@link GeofenceHardware#MONITORING_TYPE_GPS_HARDWARE} is an example of a
 * monitoring system.
 *
 * @deprecated use {@link #onMonitoringSystemChange(GeofenceHardwareMonitorEvent)} instead.
 * NOTE: this API is will remain to be called on Android API 21 and above for backwards
 * compatibility. But clients must stop implementing it when updating their code.
 *
 * @param monitoringType The type of the monitoring system.
 * @param available Indicates whether the system is currently available or not.
 * @param location The last known location according to the monitoring system.
 */
====>[PUBLIC]<android.hardware.location.GeofenceHardwareMonitorCallback: void onMonitoringSystemChange(int,boolean,Location)>    ---->    #onMonitoringSystemChange(GeofenceHardwareMonitorEvent)
<android.telephony.TelephonyManager: boolean isRadioOn()>
/**
 * @deprecated Use {@link android.telephony.TelephonyManager#getServiceState} instead
 * @hide
 */
====>[HIDDEN]<android.telephony.TelephonyManager: boolean isRadioOn()>    ---->    android.telephony.TelephonyManager#getServiceState
<android.media.MediaFile: int getFileTypeForMimeType(String)>
/**
 * @deprecated file types no longer exist
 */
====>[PUBLIC]<android.media.MediaFile: int getFileTypeForMimeType(String)>    ---->    
<android.app.prediction.AppTarget: void <init>(AppTargetId,ShortcutInfo,String)>
/**
 * @deprecated use the Builder class
 * @hide
 */
====>[HIDDEN]<android.app.prediction.AppTarget: void <init>(AppTargetId,ShortcutInfo,String)>    ---->    
Inconsistency (Non-Documentation):<android.os.UserManager: void setUserRestrictions(Bundle,UserHandle)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/os/UserManager.java
<android.os.UserManager: void setUserRestrictions(Bundle,UserHandle)>
/**
 * This will no longer work.  Device owners and profile owners should use
 * {@link DevicePolicyManager#addUserRestriction(ComponentName, String)} instead.
 */
====>[PUBLIC]<android.os.UserManager: void setUserRestrictions(Bundle,UserHandle)>    ---->    
<com.android.uiautomator.core.UiDevice: String getCurrentActivityName()>
/**
 * Retrieves the last activity to report accessibility events.
 * @deprecated The results returned should be considered unreliable
 * @return String name of activity
 * @since API Level 16
 */
====>[PUBLIC]<com.android.uiautomator.core.UiDevice: String getCurrentActivityName()>    ---->    
<android.location.Location: void removeAccuracy()>
/**
 * Remove the horizontal accuracy from this location.
 *
 * <p>Following this call {@link #hasAccuracy} will return false, and
 * {@link #getAccuracy} will return 0.0.
 *
 * @deprecated use a new Location object for location updates.
 */
====>[PUBLIC]<android.location.Location: void removeAccuracy()>    ---->    
<android.app.Notification.Builder: Builder setChannel(String)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.Notification.Builder: Builder setChannel(String)>    ---->    
<android.view.ViewConfiguration: int getMaximumFlingVelocity()>
/**
 * @return Maximum velocity to initiate a fling, as measured in dips per second.
 *
 * @deprecated Use {@link #getScaledMaximumFlingVelocity()} instead.
 */
====>[PUBLIC]<android.view.ViewConfiguration: int getMaximumFlingVelocity()>    ---->    #getScaledMaximumFlingVelocity()
<android.view.inputmethod.InputMethodManager: void setInputMethod(IBinder,String)>
/**
 * Force switch to a new input method component. This can only be called
 * from an application or a service which has a token of the currently active input method.
 *
 * <p>On Android {@link Build.VERSION_CODES#Q} and later devices, the undocumented behavior that
 * token can be {@code null} when the caller has
 * {@link android.Manifest.permission#WRITE_SECURE_SETTINGS} is deprecated. Instead, update
 * {@link android.provider.Settings.Secure#DEFAULT_INPUT_METHOD} and
 * {@link android.provider.Settings.Secure#SELECTED_INPUT_METHOD_SUBTYPE} directly.</p>
 *
 * @param token Supplies the identifying token given to an input method
 * when it was started, which allows it to perform this operation on
 * itself.
 * @param id The unique identifier for the new input method to be switched to.
 * @deprecated Use {@link InputMethodService#switchInputMethod(String)}
 * instead. This method was intended for IME developers who should be accessing APIs through
 * the service. APIs in this class are intended for app developers interacting with the IME.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodManager: void setInputMethod(IBinder,String)>    ---->    InputMethodService#switchInputMethod(String)
<com.android.systemui.statusbar.StatusBarStateControllerImpl: void addCallback(StateListener,int)>
/**
 * Add a listener and a rank based on the priority of this message
 * @param listener the listener
 * @param rank the order in which you'd like to be called. Ranked listeners will be
 * notified before unranked, and we will sort ranked listeners from low to high
 *
 * @deprecated This method exists only to solve latent inter-dependencies from refactoring
 * StatusBarState out of StatusBar.java. Any new listeners should be built not to need ranking
 * (i.e., they are non-dependent on the order of operations of StatusBarState listeners).
 */
====>[PUBLIC]<com.android.systemui.statusbar.StatusBarStateControllerImpl: void addCallback(StateListener,int)>    ---->    
<android.provider.MediaStore.Video: Cursor query(ContentResolver,Uri,String[])>
/**
 * @deprecated all queries should be performed through
 * {@link ContentResolver} directly, which offers modern
 * features like {@link CancellationSignal}.
 */
====>[PUBLIC]<android.provider.MediaStore.Video: Cursor query(ContentResolver,Uri,String[])>    ---->    ContentResolver
<android.view.textclassifier.TextClassification.Builder: Builder setIcon(Drawable)>
/**
 * Sets the icon for the <i>primary</i> action that may be rendered on a widget used to act
 * on the classified text.
 *
 * <p><strong>NOTE: </strong>This field is not parcelled. If read from a parcel, the
 * returned icon represents the icon of the first {@link RemoteAction} (if one exists).
 *
 * @deprecated Use {@link #addAction(RemoteAction)} instead.
 */
====>[PUBLIC]<android.view.textclassifier.TextClassification.Builder: Builder setIcon(Drawable)>    ---->    #addAction(RemoteAction)
<android.os.Debug: void resetThreadExternalAllocCount()>
/**
 * This method exists for compatibility and has no effect.
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: void resetThreadExternalAllocCount()>    ---->    
<android.webkit.WebSettings: void setEnableSmoothTransition(boolean)>
/**
 * Sets whether the WebView will enable smooth transition while panning or
 * zooming or while the window hosting the WebView does not have focus.
 * If it is {@code true}, WebView will choose a solution to maximize the performance.
 * e.g. the WebView's content may not be updated during the transition.
 * If it is false, WebView will keep its fidelity. The default value is {@code false}.
 *
 * @deprecated This method is now obsolete, and will become a no-op in future.
 */
====>[PUBLIC]<android.webkit.WebSettings: void setEnableSmoothTransition(boolean)>    ---->    
<android.provider.MediaStore: Uri createPending(Context,PendingParams)>
/**
 * Create a new pending media item using the given parameters. Pending items
 * are expected to have a short lifetime, and owners should either
 * {@link PendingSession#publish()} or {@link PendingSession#abandon()} a
 * pending item within a few hours after first creating it.
 *
 * @return token which can be passed to {@link #openPending(Context, Uri)}
 * to work with this pending item.
 * @see MediaColumns#IS_PENDING
 * @see MediaStore#setIncludePending(Uri)
 * @see MediaStore#createPending(Context, PendingParams)
 * @removed
 */
====>[HIDDEN]<android.provider.MediaStore: Uri createPending(Context,PendingParams)>    ---->    
<android.location.Location: void removeBearingAccuracy()>
/**
 * Remove the bearing accuracy from this location.
 *
 * <p>Following this call {@link #hasBearingAccuracy} will return false, and
 * {@link #getBearingAccuracyDegrees} will return 0.0.
 *
 * @deprecated use a new Location object for location updates.
 * @removed
 */
====>[HIDDEN]<android.location.Location: void removeBearingAccuracy()>    ---->    
<android.telephony.PhoneNumberUtils: boolean isPotentialEmergencyNumber(String,String)>
/**
 * Checks if a given number might *potentially* result in a call to an
 * emergency service, for a specific country.
 *
 * Specifically, this method will return true if the specified number
 * is an emergency number in the specified country, *or* if the number
 * simply starts with the same digits as any emergency number for that
 * country.
 *
 * This method is intended for internal use by the phone app when
 * deciding whether to allow ACTION_CALL intents from 3rd party apps
 * (where we're required to *not* allow emergency calls to be placed.)
 *
 * @param number the number to look up.
 * @param defaultCountryIso the specific country which the number should be checked against
 * @return true if the number is an emergency number for the specific
 * country, *or* if the number starts with the same digits as
 * any of those emergency numbers.
 *
 * @deprecated Please use {@link TelephonyManager#isPotentialEmergencyNumber(String)}
 * instead.
 *
 * @hide
 */
====>[HIDDEN]<android.telephony.PhoneNumberUtils: boolean isPotentialEmergencyNumber(String,String)>    ---->    TelephonyManager#isPotentialEmergencyNumber(String)
<android.util.proto.ProtoOutputStream: void writeSInt32(long,int)>
/**
 * Write a single proto "sint32" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeSInt32(long,int)>    ---->    #write
<android.os.storage.StorageManager: void disableUsbMassStorage()>
/**
 * Disables USB Mass Storage (UMS) on the device.
 *
 * @hide
 */
====>[HIDDEN]<android.os.storage.StorageManager: void disableUsbMassStorage()>    ---->    
<android.webkit.WebSettings: void setTextSize(TextSize)>
/**
 * Sets the text size of the page. The default is {@link TextSize#NORMAL}.
 *
 * @param t the text size as a {@link TextSize} value
 * @deprecated Use {@link #setTextZoom} instead.
 */
====>[PUBLIC]<android.webkit.WebSettings: void setTextSize(TextSize)>    ---->    #setTextZoom
<android.net.NetworkInfo: void setDetailedState(DetailedState,String,String)>
/**
 * Sets the fine-grained state of the network.
 * @param detailedState the {@link DetailedState}.
 * @param reason a {@code String} indicating the reason for the state change,
 * if one was supplied. May be {@code null}.
 * @param extraInfo an optional {@code String} providing addditional network state
 * information passed up from the lower networking layers.
 * @deprecated Use {@link NetworkCapabilities} instead.
 * @hide
 */
====>[HIDDEN]<android.net.NetworkInfo: void setDetailedState(DetailedState,String,String)>    ---->    NetworkCapabilities
<android.text.Html: String toHtml(Spanned)>
/**
 * @deprecated use {@link #toHtml(Spanned, int)} instead.
 */
====>[PUBLIC]<android.text.Html: String toHtml(Spanned)>    ---->    #toHtml(Spanned, int)
<android.database.CursorWindow: boolean isLong(int,int)>
/**
 * Returns true if the field at the specified row and column index
 * has type {@link Cursor#FIELD_TYPE_INTEGER}.
 *
 * @param row The zero-based row index.
 * @param column The zero-based column index.
 * @return True if the field has type {@link Cursor#FIELD_TYPE_INTEGER}.
 * @deprecated Use {@link #getType(int, int)} instead.
 */
====>[PUBLIC]<android.database.CursorWindow: boolean isLong(int,int)>    ---->    #getType(int, int)
<android.app.ActionBar: void setListNavigationCallbacks(SpinnerAdapter,OnNavigationListener)>
/**
 * Set the adapter and navigation callback for list navigation mode.
 *
 * The supplied adapter will provide views for the expanded list as well as
 * the currently selected item. (These may be displayed differently.)
 *
 * The supplied OnNavigationListener will alert the application when the user
 * changes the current list selection.
 *
 * @param adapter An adapter that will provide views both to display
 * the current navigation selection and populate views
 * within the dropdown navigation menu.
 * @param callback An OnNavigationListener that will receive events when the user
 * selects a navigation item.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: void setListNavigationCallbacks(SpinnerAdapter,OnNavigationListener)>    ---->    
<android.app.admin.DevicePolicyManager: UserHandle createUser(ComponentName,String)>
/**
 * Called by a device owner to create a user with the specified name. The UserHandle returned
 * by this method should not be persisted as user handles are recycled as users are removed and
 * created. If you need to persist an identifier for this user, use
 * {@link UserManager#getSerialNumberForUser}.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param name the user's name
 * @see UserHandle
 * @return the {@link android.os.UserHandle} object for the created user, or {@code null} if the
 * user could not be created.
 *
 * @deprecated From {@link android.os.Build.VERSION_CODES#M}
 * @removed From {@link android.os.Build.VERSION_CODES#N}
 */
====>[HIDDEN]<android.app.admin.DevicePolicyManager: UserHandle createUser(ComponentName,String)>    ---->    
<android.os.Debug: int getGlobalAllocCount()>
/**
 * Returns the global count of objects allocated by the runtime between a
 * {@link #startAllocCounting() start} and {@link #stopAllocCounting() stop}.
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: int getGlobalAllocCount()>    ---->    
<android.content.pm.PackageManager: void addPreferredActivity(IntentFilter,int,ComponentName[],ComponentName)>
/**
 * Add a new preferred activity mapping to the system.  This will be used
 * to automatically select the given activity component when
 * {@link Context#startActivity(Intent) Context.startActivity()} finds
 * multiple matching activities and also matches the given filter.
 *
 * @param filter The set of intents under which this activity will be
 * made preferred.
 * @param match The IntentFilter match category that this preference
 * applies to.
 * @param set The set of activities that the user was picking from when
 * this preference was made.
 * @param activity The component name of the activity that is to be
 * preferred.
 *
 * @deprecated This function no longer does anything. It is the platform's
 * responsibility to assign preferred activities and this cannot be modified
 * directly. To determine the activities resolved by the platform, use
 * {@link #resolveActivity} or {@link #queryIntentActivities}. To configure
 * an app to be responsible for a particular role and to check current role
 * holders, see {@link android.app.role.RoleManager}.
 */
====>[PUBLIC]<android.content.pm.PackageManager: void addPreferredActivity(IntentFilter,int,ComponentName[],ComponentName)>    ---->    #resolveActivity
<android.os.Debug: int getGlobalExternalAllocSize()>
/**
 * This method exists for compatibility and always returns 0.
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: int getGlobalExternalAllocSize()>    ---->    
<android.content.pm.ShortcutInfo.Builder: Builder setTitleResId(int)>
/**
 * @hide -- old signature, the internal code still uses it.
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo.Builder: Builder setTitleResId(int)>    ---->    
<android.database.AbstractCursor: Object getUpdatedField(int)>
/**
 * @deprecated Always returns null since Cursors do not support updating rows
 */
====>[PUBLIC]<android.database.AbstractCursor: Object getUpdatedField(int)>    ---->    
<android.renderscript.Font: Font create(RenderScript,Resources,String,Style,float)>
/**
 * @deprecated in API 16
 * Accepts one of the following family names as an argument
 * and will attempt to produce the best match with a system font:
 *
 * "sans-serif" "arial" "helvetica" "tahoma" "verdana"
 * "serif" "times" "times new roman" "palatino" "georgia" "baskerville"
 * "goudy" "fantasy" "cursive" "ITC Stone Serif"
 * "monospace" "courier" "courier new" "monaco"
 *
 * Returns default font if no match could be found.
 */
====>[PUBLIC]<android.renderscript.Font: Font create(RenderScript,Resources,String,Style,float)>    ---->    
<android.renderscript.RenderScriptGL.SurfaceConfig: void setAlpha(int,int)>
/**
 * @deprecated in API 16
 * Set the bit depth for alpha. This configures the surface for
 * an unsigned integer buffer type.
 *
 * @param minimum
 * @param preferred
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL.SurfaceConfig: void setAlpha(int,int)>    ---->    
<android.media.AudioManager: void setRouting(int,int,int)>
/**
 * Sets the audio routing for a specified mode
 *
 * @param mode   audio mode to change route. E.g., MODE_RINGTONE.
 * @param routes bit vector of routes requested, created from one or
 * more of ROUTE_xxx types. Set bits indicate that route should be on
 * @param mask   bit vector of routes to change, created from one or more of
 * ROUTE_xxx types. Unset bits indicate the route should be left unchanged
 *
 * @deprecated   Do not set audio routing directly, use setSpeakerphoneOn(),
 * setBluetoothScoOn() methods instead.
 */
====>[PUBLIC]<android.media.AudioManager: void setRouting(int,int,int)>    ---->    setSpeakerphoneOn(),  setBluetoothScoOn() methods
<android.view.Surface: void transferFrom(Surface)>
/**
 * This is intended to be used by {@link SurfaceView#updateWindow} only.
 * @param other access is not thread safe
 * @hide
 * @deprecated
 */
====>[HIDDEN]<android.view.Surface: void transferFrom(Surface)>    ---->    
<com.android.internal.widget.LockPatternUtils: String patternToString(Cell>)>
/**
 * Serialize a pattern.
 * @param pattern The pattern.
 * @return The pattern in string form.
 * @deprecated Use patternToByteArray instead.
 */
====>[PUBLIC]<com.android.internal.widget.LockPatternUtils: String patternToString(Cell>)>    ---->    patternToByteArray
<android.view.View: boolean computeFitSystemWindows(Rect,Rect)>
/**
 * @hide Compute the insets that should be consumed by this view and the ones
 * that should propagate to those under it.
 *
 * Note: This is used by appcompat's ActionBarOverlayLayout through reflection.
 *
 * @param inoutInsets the insets given to this view
 * @param outLocalInsets the insets that should be applied to this view
 * @deprecated use {@link #computeSystemWindowInsets}
 * @return
 */
====>[HIDDEN]<android.view.View: boolean computeFitSystemWindows(Rect,Rect)>    ---->    #computeSystemWindowInsets
<android.widget.CalendarView: void setSelectedDateVerticalBar(Drawable)>
/**
 * Sets the drawable for the vertical bar shown at the beginning and at
 * the end of the selected date.
 *
 * @param drawable The vertical bar drawable.
 *
 * @attr ref android.R.styleable#CalendarView_selectedDateVerticalBar
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: void setSelectedDateVerticalBar(Drawable)>    ---->    
<android.accessibilityservice.AccessibilityServiceInfo: List<CapabilityInfo> getCapabilityInfos()>
/**
 * @hide
 * @return The list of {@link CapabilityInfo} objects.
 * @deprecated The version that takes a context works better.
 */
====>[HIDDEN]<android.accessibilityservice.AccessibilityServiceInfo: List<CapabilityInfo> getCapabilityInfos()>    ---->    
Inconsistency (Non-Documentation):<android.webkit.WebViewDatabase: boolean hasFormData()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/webkit/WebViewDatabase.java
<android.webkit.WebViewDatabase: boolean hasFormData()>
/**
 * Gets whether there is any saved data for web forms.
 *
 * @return whether there is any saved data for web forms
 * @see #clearFormData
 */
====>[PUBLIC]<android.webkit.WebViewDatabase: boolean hasFormData()>    ---->    
<com.android.internal.widget.LockPatternUtils: Cell> stringToPattern(String)>
/**
 * Deserialize a pattern.
 * @param string The pattern serialized with {@link #patternToString}
 * @return The pattern.
 * @deprecated Pass patterns as byte[] and use byteArrayToPattern
 */
====>[PUBLIC]<com.android.internal.widget.LockPatternUtils: Cell> stringToPattern(String)>    ---->    
<android.view.textclassifier.TextClassifier.EntityConfig: EntityConfig createWithExplicitEntityList(Collection<String>)>
/**
 * Creates an EntityConfig with an explicit entity list.
 *
 * @param entityTypes Complete set of entities, e.g. {@link #TYPE_URL} to find.
 *
 * @deprecated Use {@link Builder} instead.
 */
====>[PUBLIC]<android.view.textclassifier.TextClassifier.EntityConfig: EntityConfig createWithExplicitEntityList(Collection<String>)>    ---->    Builder
<android.view.ViewDebug: void dump(View,boolean,boolean,OutputStream)>
/**
 * Dumps the view hierarchy starting from the given view.
 * @deprecated See {@link #dumpv2(View, ByteArrayOutputStream)} below.
 * @hide
 */
====>[HIDDEN]<android.view.ViewDebug: void dump(View,boolean,boolean,OutputStream)>    ---->    #dumpv2(View, ByteArrayOutputStream)
<android.net.SSLCertificateSocketFactory: void <init>(int)>
/**
 * @deprecated Use {@link #getDefault(int)} instead.
 */
====>[PUBLIC]<android.net.SSLCertificateSocketFactory: void <init>(int)>    ---->    #getDefault(int)
<android.bluetooth.BluetoothAdapter: boolean startLeScan(LeScanCallback)>
/**
 * Starts a scan for Bluetooth LE devices.
 *
 * <p>Results of the scan are reported using the
 * {@link LeScanCallback#onLeScan} callback.
 *
 * @param callback the callback LE scan results are delivered
 * @return true, if the scan was started successfully
 * @deprecated use {@link BluetoothLeScanner#startScan(List, ScanSettings, ScanCallback)}
 * instead.
 */
====>[PUBLIC]<android.bluetooth.BluetoothAdapter: boolean startLeScan(LeScanCallback)>    ---->    BluetoothLeScanner#startScan(List, ScanSettings, ScanCallback)
<com.android.server.backup.BackupManagerService: String selectBackupTransport(int,String)>
/**
 * Selects transport {@code transportName} and returns the previously selected transport.
 *
 * @deprecated Use {@link #selectBackupTransportAsync(ComponentName,
 * ISelectBackupTransportCallback)} instead.
 */
====>[PUBLIC]<com.android.server.backup.BackupManagerService: String selectBackupTransport(int,String)>    ---->    #selectBackupTransportAsync(ComponentName,  ISelectBackupTransportCallback)
<android.media.MediaFile: boolean isAudioFileType(int)>
/**
 * @deprecated file types no longer exist
 */
====>[PUBLIC]<android.media.MediaFile: boolean isAudioFileType(int)>    ---->    
<com.android.internal.widget.RecyclerView.ViewHolder: int getPosition()>
/**
 * @deprecated This method is deprecated because its meaning is ambiguous due to the async
 * handling of adapter updates. Please use {@link #getLayoutPosition()} or
 * {@link #getAdapterPosition()} depending on your use case.
 *
 * @see #getLayoutPosition()
 * @see #getAdapterPosition()
 */
====>[PUBLIC]<com.android.internal.widget.RecyclerView.ViewHolder: int getPosition()>    ---->    #getLayoutPosition()
<android.webkit.CookieSyncManager: void startSync()>
/**
 * startSync() requests sync manager to start sync.
 * @deprecated Calling startSync is no longer necessary as the WebView automatically
 * syncs cookies.
 */
====>[PUBLIC]<android.webkit.CookieSyncManager: void startSync()>    ---->    
<android.content.pm.PermissionInfo: void <init>()>
/**
 * @deprecated Should only be created by the system.
 */
====>[PUBLIC]<android.content.pm.PermissionInfo: void <init>()>    ---->    
<android.bluetooth.BluetoothHealth: boolean unregisterAppConfiguration(BluetoothHealthAppConfiguration)>
/**
 * Unregister an application configuration that has been registered using
 * {@link #registerSinkAppConfiguration}
 *
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
 *
 * @param config The health app configuration
 * @return Success or failure.
 *
 * @deprecated Health Device Profile (HDP) and MCAP protocol are no longer used. New
 * apps should use Bluetooth Low Energy based solutions such as {@link BluetoothGatt},
 * {@link BluetoothAdapter#listenUsingL2capChannel()(int)}, or
 * {@link BluetoothDevice#createL2capChannel(int)}
 */
====>[PUBLIC]<android.bluetooth.BluetoothHealth: boolean unregisterAppConfiguration(BluetoothHealthAppConfiguration)>    ---->    BluetoothGatt
<android.app.FragmentController: void dispatchPictureInPictureModeChanged(boolean)>
/**
 * Lets all Fragments managed by the controller's FragmentManager know the picture-in-picture
 * mode of the activity changed.
 * <p>Call when the picture-in-picture mode of the activity changed.
 *
 * @see Fragment#onPictureInPictureModeChanged
 * @deprecated use {@link #dispatchPictureInPictureModeChanged(boolean, Configuration)}
 */
====>[PUBLIC]<android.app.FragmentController: void dispatchPictureInPictureModeChanged(boolean)>    ---->    #dispatchPictureInPictureModeChanged(boolean, Configuration)
<android.view.ViewGroup: void setPersistentDrawingCache(int)>
/**
 * Indicates what types of drawing caches should be kept in memory after
 * they have been created.
 *
 * @see #getPersistentDrawingCache()
 * @see #setAnimationCacheEnabled(boolean)
 *
 * @param drawingCacheToKeep one or a combination of {@link #PERSISTENT_NO_CACHE},
 * {@link #PERSISTENT_ANIMATION_CACHE}, {@link #PERSISTENT_SCROLLING_CACHE}
 * and {@link #PERSISTENT_ALL_CACHES}
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.ViewGroup: void setPersistentDrawingCache(int)>    ---->    #setLayerType(int, Paint)
<android.widget.OverScroller: void <init>(Context,Interpolator,float,float)>
/**
 * Creates an OverScroller with flywheel enabled.
 * @param context The context of this application.
 * @param interpolator The scroll interpolator. If null, a default (viscous) interpolator will
 * be used.
 * @param bounceCoefficientX A value between 0 and 1 that will determine the proportion of the
 * velocity which is preserved in the bounce when the horizontal edge is reached. A null value
 * means no bounce. This behavior is no longer supported and this coefficient has no effect.
 * @param bounceCoefficientY Same as bounceCoefficientX but for the vertical direction. This
 * behavior is no longer supported and this coefficient has no effect.
 * @deprecated Use {@link #OverScroller(Context, Interpolator)} instead.
 */
====>[PUBLIC]<android.widget.OverScroller: void <init>(Context,Interpolator,float,float)>    ---->    #OverScroller(Context, Interpolator)
<android.graphics.ImageDecoder: boolean getDecodeAsAlphaMask()>
/**
 * @removed
 * @deprecated Renamed to {@link #isDecodeAsAlphaMaskEnabled}.
 */
====>[HIDDEN]<android.graphics.ImageDecoder: boolean getDecodeAsAlphaMask()>    ---->    #isDecodeAsAlphaMaskEnabled
<android.webkit.CookieManager: void removeAllCookie()>
/**
 * Removes all cookies.
 * @deprecated Use {@link #removeAllCookies(ValueCallback)} instead.
 */
====>[PUBLIC]<android.webkit.CookieManager: void removeAllCookie()>    ---->    #removeAllCookies(ValueCallback)
<android.nfc.NfcAdapter: void setBeamPushUrisCallback(CreateBeamUrisCallback,Activity)>
/**
 * Set a callback that will dynamically generate one or more {@link Uri}s
 * to send using Android Beam (TM). Every Uri the callback provides
 * must have either scheme 'file' or scheme 'content'.
 *
 * <p>For the data provided through this callback, Android Beam tries to
 * switch to alternate transports such as Bluetooth to achieve a fast
 * transfer speed. Hence this method is very suitable
 * for transferring large files such as pictures or songs.
 *
 * <p>The receiving side will store the content of each Uri in
 * a file and present a notification to the user to open the file
 * with a {@link android.content.Intent} with action
 * {@link android.content.Intent#ACTION_VIEW}.
 * If multiple URIs are sent, the {@link android.content.Intent} will refer
 * to the first of the stored files.
 *
 * <p>This method may be called at any time before {@link Activity#onDestroy},
 * but the URI(s) are only made available for Android Beam when the
 * specified activity(s) are in resumed (foreground) state. The recommended
 * approach is to call this method during your Activity's
 * {@link Activity#onCreate} - see sample
 * code below. This method does not immediately perform any I/O or blocking work,
 * so is safe to call on your main thread.
 *
 * <p>{@link #setBeamPushUris} and {@link #setBeamPushUrisCallback}
 * have priority over both {@link #setNdefPushMessage} and
 * {@link #setNdefPushMessageCallback}.
 *
 * <p>If {@link #setBeamPushUris} is called with a null Uri array,
 * and/or {@link #setBeamPushUrisCallback} is called with a null callback,
 * then the Uri push will be completely disabled for the specified activity(s).
 *
 * <p>Code example:
 * <pre>
 * protected void onCreate(Bundle savedInstanceState) {
 * super.onCreate(savedInstanceState);
 * NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this);
 * if (nfcAdapter == null) return;  // NFC not available on this device
 * nfcAdapter.setBeamPushUrisCallback(callback, this);
 * }</pre>
 * And that is it. Only one call per activity is necessary. The Android
 * OS will automatically release its references to the Uri(s) and the
 * Activity object when it is destroyed if you follow this pattern.
 *
 * <p class="note">Do not pass in an Activity that has already been through
 * {@link Activity#onDestroy}. This is guaranteed if you call this API
 * during {@link Activity#onCreate}.
 *
 * <p class="note">If this device does not support alternate transports
 * such as Bluetooth or WiFI, calling this method does nothing.
 *
 * <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
 *
 * @param callback callback, or null to disable
 * @param activity activity for which the Uri(s) will be pushed
 * @throws UnsupportedOperationException if FEATURE_NFC is unavailable.
 * @deprecated this feature is deprecated. File sharing can work using other technology like
 * Bluetooth.
 */
====>[PUBLIC]<android.nfc.NfcAdapter: void setBeamPushUrisCallback(CreateBeamUrisCallback,Activity)>    ---->    
<android.net.wifi.WifiManager: boolean isDeviceToApRttSupported()>
/**
 * @deprecated Please use {@link android.content.pm.PackageManager#hasSystemFeature(String)}
 * with {@link android.content.pm.PackageManager#FEATURE_WIFI_RTT}.
 *
 * @return true if this adapter supports Device-to-AP RTT
 */
====>[PUBLIC]<android.net.wifi.WifiManager: boolean isDeviceToApRttSupported()>    ---->    android.content.pm.PackageManager#hasSystemFeature(String)
<android.hardware.Camera.Parameters: List<Integer> getSupportedPreviewFrameRates()>
/**
 * Gets the supported preview frame rates.
 *
 * @return a list of supported preview frame rates. null if preview
 * frame rate setting is not supported.
 * @deprecated replaced by {@link #getSupportedPreviewFpsRange()}
 */
====>[PUBLIC]<android.hardware.Camera.Parameters: List<Integer> getSupportedPreviewFrameRates()>    ---->    #getSupportedPreviewFpsRange()
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,String)>
/**
 * Tells the underlying networking system that the caller wants to
 * begin using the named feature. The interpretation of {@code feature}
 * is completely up to each networking implementation.
 *
 * <p>This method requires the caller to hold either the
 * {@link android.Manifest.permission#CHANGE_NETWORK_STATE} permission
 * or the ability to modify system settings as determined by
 * {@link android.provider.Settings.System#canWrite}.</p>
 *
 * @param networkType specifies which network the request pertains to
 * @param feature the name of the feature to be used
 * @return an integer value representing the outcome of the request.
 * The interpretation of this value is specific to each networking
 * implementation+feature combination, except that the value {@code -1}
 * always indicates failure.
 *
 * @deprecated Deprecated in favor of the cleaner
 * {@link #requestNetwork(NetworkRequest, NetworkCallback)} API.
 * In {@link VERSION_CODES#M}, and above, this method is unsupported and will
 * throw {@code UnsupportedOperationException} if called.
 * @removed
 */
====>[HIDDEN]<android.net.ConnectivityManager: int startUsingNetworkFeature(int,String)>    ---->    #requestNetwork(NetworkRequest, NetworkCallback)
<android.app.usage.StorageStatsManager: long getCacheBytes(String)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.app.usage.StorageStatsManager: long getCacheBytes(String)>    ---->    
<android.widget.ListView: long[] getCheckItemIds()>
/**
 * Returns the set of checked items ids. The result is only valid if the
 * choice mode has not been set to {@link #CHOICE_MODE_NONE}.
 *
 * @return A new array which contains the id of each checked item in the
 * list.
 *
 * @deprecated Use {@link #getCheckedItemIds()} instead.
 */
====>[PUBLIC]<android.widget.ListView: long[] getCheckItemIds()>    ---->    #getCheckedItemIds()
<android.app.Notification.MessagingStyle.Message: void <init>(CharSequence,long,CharSequence)>
/**
 * Constructor
 * @param text A {@link CharSequence} to be displayed as the message content
 * @param timestamp Time at which the message arrived
 * @param sender A {@link CharSequence} to be used for displaying the name of the
 * sender. Should be <code>null</code> for messages by the current user, in which case
 * the platform will insert {@link MessagingStyle#getUserDisplayName()}.
 * Should be unique amongst all individuals in the conversation, and should be
 * consistent during re-posts of the notification.
 *
 * @deprecated use {@code Message(CharSequence, long, Person)}
 */
====>[PUBLIC]<android.app.Notification.MessagingStyle.Message: void <init>(CharSequence,long,CharSequence)>    ---->    
<junit.runner.BaseTestRunner: TestSuiteLoader getLoader()>
/**
 * Returns the loader to be used.
 *
 * @deprecated not present in JUnit4.10
 */
====>[PUBLIC]<junit.runner.BaseTestRunner: TestSuiteLoader getLoader()>    ---->    
Inconsistency (Non-Documentation):<android.content.ContextWrapper: Drawable getWallpaper()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/content/ContextWrapper.java
<android.content.ContextWrapper: Drawable getWallpaper()>

====>[PUBLIC]<android.content.ContextWrapper: Drawable getWallpaper()>    ---->    
<android.renderscript.FileA3D: FileA3D createFromAsset(RenderScript,AssetManager,String)>
/**
 * @deprecated in API 16
 * Creates a FileA3D object from an asset stored on disk
 *
 * @param rs Context to which the object will belong.
 * @param mgr asset manager used to load asset
 * @param path location of the file to load
 *
 * @return a3d file containing renderscript objects
 */
====>[PUBLIC]<android.renderscript.FileA3D: FileA3D createFromAsset(RenderScript,AssetManager,String)>    ---->    
<android.net.TrafficStats: void setThreadStatsUidSelf()>
/**
 * Set specific UID to use when accounting {@link Socket} traffic
 * originating from the current thread as the calling UID. Designed for use
 * when another application is performing operations on your behalf.
 * <p>
 * Changes only take effect during subsequent calls to
 * {@link #tagSocket(Socket)}.
 *
 * @removed
 * @deprecated use {@link #setThreadStatsUid(int)} instead.
 */
====>[HIDDEN]<android.net.TrafficStats: void setThreadStatsUidSelf()>    ---->    #setThreadStatsUid(int)
<android.speech.tts.TextToSpeech: Locale getLanguage()>
/**
 * Returns a Locale instance describing the language currently being used for synthesis
 * requests sent to the TextToSpeech engine.
 *
 * In Android 4.2 and before (API <= 17) this function returns the language that is currently
 * being used by the TTS engine. That is the last language set by this or any other
 * client by a {@link TextToSpeech#setLanguage} call to the same engine.
 *
 * In Android versions after 4.2 this function returns the language that is currently being
 * used for the synthesis requests sent from this client. That is the last language set
 * by a {@link TextToSpeech#setLanguage} call on this instance.
 *
 * If a voice is set (by {@link #setVoice(Voice)}), getLanguage will return the language of
 * the currently set voice.
 *
 * Please note that the Locale object returned by this method is NOT a valid Locale object. Its
 * language field contains a three-letter ISO 639-2/T code (where a proper Locale would use
 * a two-letter ISO 639-1 code), and the country field contains a three-letter ISO 3166 country
 * code (where a proper Locale would use a two-letter ISO 3166-1 code).
 *
 * @return language, country (if any) and variant (if any) used by the client stored in a
 * Locale instance, or {@code null} on error.
 *
 * @deprecated As of API level 21, please use <code>getVoice().getLocale()</code>
 * ({@link #getVoice()}).
 */
====>[PUBLIC]<android.speech.tts.TextToSpeech: Locale getLanguage()>    ---->    #getVoice()
<android.renderscript.ProgramVertexFixedFunction.Builder: Builder setTextureMatrixEnable(boolean)>
/**
 * @deprecated in API 16
 * Specifies whether texture matrix calculations are to be added
 * to the shader
 */
====>[PUBLIC]<android.renderscript.ProgramVertexFixedFunction.Builder: Builder setTextureMatrixEnable(boolean)>    ---->    
<android.webkit.Plugin: String getDescription()>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin: String getDescription()>    ---->    
<android.net.NetworkScoreManager: void registerNetworkScoreCache(int,INetworkScoreCache)>
/**
 * Register a network score cache.
 *
 * @param networkType the type of network this cache can handle. See {@link NetworkKey#type}.
 * @param scoreCache implementation of {@link INetworkScoreCache} to store the scores.
 * @throws SecurityException if the caller does not hold the
 * {@link permission#REQUEST_NETWORK_SCORES} permission.
 * @throws IllegalArgumentException if a score cache is already registered for this type.
 * @deprecated equivalent to registering for cache updates with CACHE_FILTER_NONE.
 * @hide
 */
====>[HIDDEN]<android.net.NetworkScoreManager: void registerNetworkScoreCache(int,INetworkScoreCache)>    ---->    
<android.app.Notification: String getChannel()>
/**
 * @removed
 */
====>[HIDDEN]<android.app.Notification: String getChannel()>    ---->    
<android.media.AudioTrack: void <init>(int,int,int,int,int,int)>
/**
 * Class constructor.
 * @param streamType the type of the audio stream. See
 * {@link AudioManager#STREAM_VOICE_CALL}, {@link AudioManager#STREAM_SYSTEM},
 * {@link AudioManager#STREAM_RING}, {@link AudioManager#STREAM_MUSIC},
 * {@link AudioManager#STREAM_ALARM}, and {@link AudioManager#STREAM_NOTIFICATION}.
 * @param sampleRateInHz the initial source sample rate expressed in Hz.
 * {@link AudioFormat#SAMPLE_RATE_UNSPECIFIED} means to use a route-dependent value
 * which is usually the sample rate of the sink.
 * {@link #getSampleRate()} can be used to retrieve the actual sample rate chosen.
 * @param channelConfig describes the configuration of the audio channels.
 * See {@link AudioFormat#CHANNEL_OUT_MONO} and
 * {@link AudioFormat#CHANNEL_OUT_STEREO}
 * @param audioFormat the format in which the audio data is represented.
 * See {@link AudioFormat#ENCODING_PCM_16BIT},
 * {@link AudioFormat#ENCODING_PCM_8BIT},
 * and {@link AudioFormat#ENCODING_PCM_FLOAT}.
 * @param bufferSizeInBytes the total size (in bytes) of the internal buffer where audio data is
 * read from for playback. This should be a nonzero multiple of the frame size in bytes.
 * <p> If the track's creation mode is {@link #MODE_STATIC},
 * this is the maximum length sample, or audio clip, that can be played by this instance.
 * <p> If the track's creation mode is {@link #MODE_STREAM},
 * this should be the desired buffer size
 * for the <code>AudioTrack</code> to satisfy the application's
 * latency requirements.
 * If <code>bufferSizeInBytes</code> is less than the
 * minimum buffer size for the output sink, it is increased to the minimum
 * buffer size.
 * The method {@link #getBufferSizeInFrames()} returns the
 * actual size in frames of the buffer created, which
 * determines the minimum frequency to write
 * to the streaming <code>AudioTrack</code> to avoid underrun.
 * See {@link #getMinBufferSize(int, int, int)} to determine the estimated minimum buffer size
 * for an AudioTrack instance in streaming mode.
 * @param mode streaming or static buffer. See {@link #MODE_STATIC} and {@link #MODE_STREAM}
 * @throws java.lang.IllegalArgumentException
 * @deprecated use {@link Builder} or
 * {@link #AudioTrack(AudioAttributes, AudioFormat, int, int, int)} to specify the
 * {@link AudioAttributes} instead of the stream type which is only for volume control.
 */
====>[PUBLIC]<android.media.AudioTrack: void <init>(int,int,int,int,int,int)>    ---->    Builder
<android.app.Notification: void setLatestEventInfo(Context,CharSequence,CharSequence,PendingIntent)>
/**
 * Sets the {@link #contentView} field to be a view with the standard "Latest Event"
 * layout.
 *
 * <p>Uses the {@link #icon} and {@link #when} fields to set the icon and time fields
 * in the view.</p>
 * @param context       The context for your application / activity.
 * @param contentTitle The title that goes in the expanded entry.
 * @param contentText  The text that goes in the expanded entry.
 * @param contentIntent The intent to launch when the user clicks the expanded notification.
 * If this is an activity, it must include the
 * {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK} flag, which requires
 * that you take care of task management as described in the
 * <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
 * Stack</a> document.
 *
 * @deprecated Use {@link Builder} instead.
 * @removed
 */
====>[HIDDEN]<android.app.Notification: void setLatestEventInfo(Context,CharSequence,CharSequence,PendingIntent)>    ---->    Builder
<android.app.StatsManager: boolean addConfiguration(long,byte[])>
/**
 * @deprecated Use {@link #addConfig(long, byte[])}
 */
====>[PUBLIC]<android.app.StatsManager: boolean addConfiguration(long,byte[])>    ---->    #addConfig(long, byte[])
<android.media.Ringtone: int getStreamType()>
/**
 * Gets the stream type where this ringtone will be played.
 *
 * @return The stream type, see {@link AudioManager}.
 * @deprecated use of stream types is deprecated, see
 * {@link #setAudioAttributes(AudioAttributes)}
 */
====>[PUBLIC]<android.media.Ringtone: int getStreamType()>    ---->    #setAudioAttributes(AudioAttributes)
<android.widget.CalendarView: void setWeekSeparatorLineColor(int)>
/**
 * Sets the color for the separator line between weeks.
 *
 * @param color The week separator color.
 *
 * @attr ref android.R.styleable#CalendarView_weekSeparatorLineColor
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: void setWeekSeparatorLineColor(int)>    ---->    
<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder setNormal(float,float,float)>
/**
 * @deprecated in API 16
 * Sets the normal vector for the vertices that are added after this method call.
 *
 * @param x normal vector x
 * @param y normal vector y
 * @param z normal vector z
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder setNormal(float,float,float)>    ---->    
<android.media.MediaRecorder: void setAuxiliaryOutputFile(String)>
/**
 * Currently not implemented. It does nothing.
 * @deprecated Time lapse mode video recording using camera still image capture
 * is not desirable, and will not be supported.
 * @hide
 */
====>[HIDDEN]<android.media.MediaRecorder: void setAuxiliaryOutputFile(String)>    ---->    
<android.webkit.UrlInterceptRegistry: boolean registerHandler(UrlInterceptHandler)>
/**
 * Register a new UrlInterceptHandler. This handler will be called
 * before any that were previously registered.
 *
 * @param handler The new UrlInterceptHandler object
 * @return {@code true} if the handler was not previously registered.
 *
 * @hide
 * @deprecated This class was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.UrlInterceptRegistry: boolean registerHandler(UrlInterceptHandler)>    ---->    
<android.view.accessibility.AccessibilityManager: List<ServiceInfo> getAccessibilityServiceList()>
/**
 * Returns the {@link ServiceInfo}s of the installed accessibility services.
 *
 * @return An unmodifiable list with {@link ServiceInfo}s.
 *
 * @deprecated Use {@link #getInstalledAccessibilityServiceList()}
 */
====>[PUBLIC]<android.view.accessibility.AccessibilityManager: List<ServiceInfo> getAccessibilityServiceList()>    ---->    #getInstalledAccessibilityServiceList()
<android.net.NetworkInfo: String getExtraInfo()>
/**
 * Report the extra information about the network state, if any was
 * provided by the lower networking layers.
 * @return the extra information, or null if not available
 * @deprecated Use other services e.g. WifiManager to get additional information passed up from
 * the lower networking layers.
 */
====>[PUBLIC]<android.net.NetworkInfo: String getExtraInfo()>    ---->    
<android.widget.CalendarView: Drawable getSelectedDateVerticalBar()>
/**
 * Gets the drawable for the vertical bar shown at the beginning and at
 * the end of the selected date.
 *
 * @return The vertical bar drawable.
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: Drawable getSelectedDateVerticalBar()>    ---->    
<android.view.View: void buildDrawingCache()>
/**
 * <p>Calling this method is equivalent to calling <code>buildDrawingCache(false)</code>.</p>
 *
 * @see #buildDrawingCache(boolean)
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: void buildDrawingCache()>    ---->    #setLayerType(int, Paint)
<android.app.usage.StorageStatsManager: ExternalStorageStats queryExternalStatsForUser(String,UserHandle)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.usage.StorageStatsManager: ExternalStorageStats queryExternalStatsForUser(String,UserHandle)>    ---->    
<android.os.Debug: void resetGlobalFreedCount()>
/**
 * Clears the global count of objects freed.
 * @see #getGlobalFreedCount()
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void resetGlobalFreedCount()>    ---->    
<android.app.Fragment: void onInflate(AttributeSet,Bundle)>
/**
 * @deprecated Use {@link #onInflate(Context, AttributeSet, Bundle)} instead.
 */
====>[PUBLIC]<android.app.Fragment: void onInflate(AttributeSet,Bundle)>    ---->    #onInflate(Context, AttributeSet, Bundle)
<android.content.pm.InstantAppResolveInfo: int getVersionCode()>
/**
 * @deprecated Use {@link #getLongVersionCode} instead.
 */
====>[PUBLIC]<android.content.pm.InstantAppResolveInfo: int getVersionCode()>    ---->    #getLongVersionCode
<android.text.format.DateUtils: String getMonthString(int,int)>
/**
 * Return a localized string for the month of the year.
 * @param month One of {@link Calendar#JANUARY Calendar.JANUARY},
 * {@link Calendar#FEBRUARY Calendar.FEBRUARY}, etc.
 * @param abbrev One of {@link #LENGTH_LONG}, {@link #LENGTH_MEDIUM},
 * or {@link #LENGTH_SHORTEST}.
 * Undefined lengths will return {@link #LENGTH_MEDIUM}
 * but may return something different in the future.
 * @return Localized month of the year.
 * @deprecated Use {@link java.text.SimpleDateFormat} instead.
 */
====>[PUBLIC]<android.text.format.DateUtils: String getMonthString(int,int)>    ---->    java.text.SimpleDateFormat
<android.location.LocationManager: void removeGpsMeasurementListener(Listener)>
/**
 * No-op method to keep backward-compatibility. Don't use it. Use {@link
 * #unregisterGnssMeasurementsCallback} instead.
 *
 * @hide
 * @deprecated use {@link #unregisterGnssMeasurementsCallback(GnssMeasurementsEvent.Callback)}
 * instead.
 * @removed
 */
====>[HIDDEN]<android.location.LocationManager: void removeGpsMeasurementListener(Listener)>    ---->    #unregisterGnssMeasurementsCallback(GnssMeasurementsEvent.Callback)
<android.os.PowerManager: void wakeUp(long)>
/**
 * Forces the device to wake up from sleep.
 * <p>
 * If the device is currently asleep, wakes it up, otherwise does nothing.
 * This is what happens when the power key is pressed to turn on the screen.
 * </p><p>
 * Requires the {@link android.Manifest.permission#DEVICE_POWER} permission.
 * </p>
 *
 * @param time The time when the request to wake up was issued, in the
 * {@link SystemClock#uptimeMillis()} time base.  This timestamp is used to correctly
 * order the wake up request with other power management functions.  It should be set
 * to the timestamp of the input event that caused the request to wake up.
 *
 * @see #userActivity
 * @see #goToSleep
 *
 * @deprecated Use {@link #wakeUp(long, int, String)} instead.
 * @removed Requires signature permission.
 */
====>[HIDDEN]<android.os.PowerManager: void wakeUp(long)>    ---->    #wakeUp(long, int, String)
<android.util.proto.ProtoOutputStream: void writeRepeatedObject(long,byte[])>
/**
 * Write an object that has already been flattend.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedObject(long,byte[])>    ---->    #write
<android.renderscript.ProgramFragmentFixedFunction.Builder: Builder setPointSpriteTexCoordinateReplacement(boolean)>
/**
 * @deprecated in API 16
 * Specifies whether the texture coordinate passed from the
 * vertex program is replaced with an openGL internal point
 * sprite texture coordinate
 */
====>[PUBLIC]<android.renderscript.ProgramFragmentFixedFunction.Builder: Builder setPointSpriteTexCoordinateReplacement(boolean)>    ---->    
<com.android.internal.widget.PagerAdapter: void startUpdate(View)>
/**
 * Called when a change in the shown pages is going to start being made.
 * @param container The containing View which is displaying this adapter's
 * page views.
 *
 * @deprecated Use {@link #startUpdate(android.view.ViewGroup)}
 */
====>[PUBLIC]<com.android.internal.widget.PagerAdapter: void startUpdate(View)>    ---->    #startUpdate(android.view.ViewGroup)
<android.webkit.PluginData: InputStream getInputStream()>
/**
 * Returns the input stream that contains the plugin content.
 *
 * @return An InputStream instance with the plugin content.
 *
 * @hide
 * @deprecated This class was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.PluginData: InputStream getInputStream()>    ---->    
<android.test.TouchUtils: void dragViewToTop(ActivityInstrumentationTestCase,View,int)>
/**
 * Simulate touching the center of a view and dragging to the top of the screen.
 *
 * @param test The test case that is being run
 * @param v The view that should be dragged
 * @param stepCount How many move steps to include in the drag
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: void dragViewToTop(ActivityInstrumentationTestCase,View,int)>    ---->    android.test.ActivityInstrumentationTestCase2
<android.bluetooth.BluetoothHealthAppConfiguration: String getName()>
/**
 * Return the name of the application configuration.
 *
 * @return String name
 *
 * @deprecated Health Device Profile (HDP) and MCAP protocol are no longer used. New
 * apps should use Bluetooth Low Energy based solutions such as {@link BluetoothGatt},
 * {@link BluetoothAdapter#listenUsingL2capChannel()(int)}, or
 * {@link BluetoothDevice#createL2capChannel(int)}
 */
====>[PUBLIC]<android.bluetooth.BluetoothHealthAppConfiguration: String getName()>    ---->    BluetoothGatt
<android.service.voice.VoiceInteractionSession.PickOptionRequest: CharSequence getPrompt()>
/**
 * Return the prompt informing the user of what they are picking, as per
 * {@link android.app.VoiceInteractor.PickOptionRequest VoiceInteractor.PickOptionRequest}.
 * @deprecated Prefer {@link #getVoicePrompt()} which allows multiple voice prompts.
 */
====>[PUBLIC]<android.service.voice.VoiceInteractionSession.PickOptionRequest: CharSequence getPrompt()>    ---->    #getVoicePrompt()
<android.telephony.TelephonyManager: boolean isVisualVoicemailEnabled(PhoneAccountHandle)>
/**
 * Returns whether the visual voicemail client is enabled.
 *
 * @param phoneAccountHandle the phone account to check for.
 * @return {@code true} when the visual voicemail client is enabled for this client
 * @hide
 * @deprecated Visual voicemail no longer in telephony. {@link VisualVoicemailService} should
 * be implemented instead.
 */
====>[HIDDEN]<android.telephony.TelephonyManager: boolean isVisualVoicemailEnabled(PhoneAccountHandle)>    ---->    VisualVoicemailService
<android.net.wifi.WifiManager: void cancelWps(WpsCallback)>
/**
 * WPS support has been deprecated from Client mode and this method will immediately trigger
 * {@link WpsCallback#onFailed(int)} with a generic error.
 *
 * @param listener for callbacks on success or failure. Can be null.
 * @throws IllegalStateException if the WifiManager instance needs to be initialized again
 * @deprecated This API is deprecated
 */
====>[PUBLIC]<android.net.wifi.WifiManager: void cancelWps(WpsCallback)>    ---->    
<android.graphics.drawable.Drawable: void setColorFilter(int,Mode)>
/**
 * Specify a color and Porter-Duff mode to be the color filter for this
 * drawable.
 * <p>
 * Convenience for {@link #setColorFilter(ColorFilter)} which constructs a
 * {@link PorterDuffColorFilter}.
 * </p>
 * <p class="note"><strong>Note:</strong> Setting a color filter disables
 * {@link #setTintList(ColorStateList) tint}.
 * </p>
 *
 * @see {@link #setColorFilter(ColorFilter)} }
 * @deprecated use {@link #setColorFilter(ColorFilter)} with an instance
 * of {@link android.graphics.BlendModeColorFilter}
 */
====>[PUBLIC]<android.graphics.drawable.Drawable: void setColorFilter(int,Mode)>    ---->    #setColorFilter(ColorFilter)
<android.content.ContentResolver: Drawable getTypeDrawable(String)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.content.ContentResolver: Drawable getTypeDrawable(String)>    ---->    
<android.renderscript.FileA3D: FileA3D createFromResource(RenderScript,Resources,int)>
/**
 * @deprecated in API 16
 * Creates a FileA3D object from an application resource
 *
 * @param rs Context to which the object will belong.
 * @param res resource manager used for loading
 * @param id resource to create FileA3D from
 *
 * @return a3d file containing renderscript objects
 */
====>[PUBLIC]<android.renderscript.FileA3D: FileA3D createFromResource(RenderScript,Resources,int)>    ---->    
<android.renderscript.RenderScriptGL.SurfaceConfig: void setColor(int,int)>
/**
 * @deprecated in API 16
 * Set the per-component bit depth for color (red, green, blue).  This
 * configures the surface for an unsigned integer buffer type.
 *
 * @param minimum
 * @param preferred
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL.SurfaceConfig: void setColor(int,int)>    ---->    
<android.app.admin.DevicePolicyManager: void setApplicationRestrictionsManagingPackage(ComponentName,String)>
/**
 * Called by a profile owner or device owner to grant permission to a package to manage
 * application restrictions for the calling user via {@link #setApplicationRestrictions} and
 * {@link #getApplicationRestrictions}.
 * <p>
 * This permission is persistent until it is later cleared by calling this method with a
 * {@code null} value or uninstalling the managing package.
 * <p>
 * The supplied application restriction managing package must be installed when calling this
 * API, otherwise an {@link NameNotFoundException} will be thrown.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param packageName The package name which will be given access to application restrictions
 * APIs. If {@code null} is given the current package will be cleared.
 * @throws SecurityException if {@code admin} is not a device or profile owner.
 * @throws NameNotFoundException if {@code packageName} is not found
 *
 * @deprecated From {@link android.os.Build.VERSION_CODES#O}. Use {@link #setDelegatedScopes}
 * with the {@link #DELEGATION_APP_RESTRICTIONS} scope instead.
 */
====>[PUBLIC]<android.app.admin.DevicePolicyManager: void setApplicationRestrictionsManagingPackage(ComponentName,String)>    ---->    #setDelegatedScopes
<android.graphics.Shader: void <init>()>
/**
 * @deprecated Use subclass constructors directly instead.
 */
====>[PUBLIC]<android.graphics.Shader: void <init>()>    ---->    subclass constructors directly
<android.content.IntentSender: String getTargetPackage()>
/**
 * @deprecated Renamed to {@link #getCreatorPackage()}.
 */
====>[PUBLIC]<android.content.IntentSender: String getTargetPackage()>    ---->    #getCreatorPackage()
<com.android.internal.widget.RecyclerView: void setOnScrollListener(OnScrollListener)>
/**
 * Set a listener that will be notified of any changes in scroll state or position.
 *
 * @param listener Listener to set or null to clear
 *
 * @deprecated Use {@link #addOnScrollListener(OnScrollListener)} and
 * {@link #removeOnScrollListener(OnScrollListener)}
 */
====>[PUBLIC]<com.android.internal.widget.RecyclerView: void setOnScrollListener(OnScrollListener)>    ---->    #addOnScrollListener(OnScrollListener)
<android.telephony.TelephonyManager: boolean isOffhook()>
/**
 * @deprecated Use {@link android.telecom.TelecomManager#isInCall} instead
 * @hide
 */
====>[HIDDEN]<android.telephony.TelephonyManager: boolean isOffhook()>    ---->    android.telecom.TelecomManager#isInCall
<android.webkit.PluginData: void <init>(InputStream,long,Map<String, String[]>,int)>
/**
 * Creates a PluginData instance.
 *
 * @param stream The stream that supplies content for the plugin.
 * @param length The length of the plugin content.
 * @param headers The response headers. Map of
 * lowercase header name to [ unmodified header name, header value]
 * @param length The HTTP response status code.
 *
 * @hide
 * @deprecated This class was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.PluginData: void <init>(InputStream,long,Map<String, String[]>,int)>    ---->    
<android.net.TrafficStats: long getUidTcpTxSegments(int)>
/**
 * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},
 * transport layer statistics are no longer available, and will
 * always return {@link #UNSUPPORTED}.
 * @see #getUidTxPackets(int)
 */
====>[PUBLIC]<android.net.TrafficStats: long getUidTcpTxSegments(int)>    ---->    #getUidTxPackets(int)
<android.telephony.SignalStrength: int getEvdoLevel()>
/**
 * Get Evdo as level 0..4
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthCdma#getEvdoLevel}.
 *
 * @see android.telephony#CellSignalStrengthCdma
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getEvdoLevel()>    ---->    android.telephony#CellSignalStrengthCdma
<android.telephony.CellIdentityGsm: int getMcc()>
/**
 * @return 3-digit Mobile Country Code, 0..999,
 * {@link android.telephony.CellInfo#UNAVAILABLE UNAVAILABLE} if unavailable.
 * @deprecated Use {@link #getMccString} instead.
 */
====>[PUBLIC]<android.telephony.CellIdentityGsm: int getMcc()>    ---->    #getMccString
<android.database.AbstractWindowedCursor: boolean isFloat(int)>
/**
 * @deprecated Use {@link #getType}
 */
====>[PUBLIC]<android.database.AbstractWindowedCursor: boolean isFloat(int)>    ---->    #getType
<com.android.internal.app.SimpleIconFactory: Bitmap createUserBadgedIconBitmap(Drawable,UserHandle)>
/**
 * Creates bitmap using the source drawable and various parameters.
 * The bitmap is visually normalized with other icons and has enough spacing to add shadow.
 * Note: this method has been modified from iconloaderlib to remove a profile diff check.
 *
 * @param icon                      source of the icon associated with a user that has no badge,
 * likely user 0
 * @param user                      info can be used for a badge
 * @return a bitmap suitable for disaplaying as an icon at various system UIs.
 *
 * @deprecated Do not use, functionality will be replaced by iconloader lib eventually.
 */
====>[PUBLIC]<com.android.internal.app.SimpleIconFactory: Bitmap createUserBadgedIconBitmap(Drawable,UserHandle)>    ---->    
<com.android.server.location.AbstractLocationProvider: long getStatusUpdateTime()>
/**
 * Retrieves the last update time of the status of the provider.
 *
 * @deprecated Will be removed in a future release.
 */
====>[PUBLIC]<com.android.server.location.AbstractLocationProvider: long getStatusUpdateTime()>    ---->    
<android.webkit.WebSettings: String getPluginsPath()>
/**
 * Gets the directory that contains the plugin libraries. This method is
 * obsolete since each plugin is now loaded from its own package.
 *
 * @return an empty string
 * @deprecated This method is no longer used as plugins are loaded from
 * their own APK via the system's package manager.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}
 */
====>[HIDDEN]<android.webkit.WebSettings: String getPluginsPath()>    ---->    
<android.media.MediaTimestamp: long getAnchorSytemNanoTime()>
/**
 * Get the {@link java.lang.System#nanoTime system time} corresponding to the media time
 * in nanoseconds.
 * @deprecated use {@link #getAnchorSystemNanoTime} instead.
 */
====>[PUBLIC]<android.media.MediaTimestamp: long getAnchorSytemNanoTime()>    ---->    #getAnchorSystemNanoTime
<android.telephony.CellIdentityGsm: int getPsc()>
/**
 * @deprecated Primary Scrambling Code is not applicable to GSM.
 * @return {@link android.telephony.CellInfo#UNAVAILABLE UNAVAILABLE} - undefined for GSM
 */
====>[PUBLIC]<android.telephony.CellIdentityGsm: int getPsc()>    ---->    android.telephony.CellInfo#UNAVAILABLE UNAVAILABLE
<android.widget.TimePicker: Integer getCurrentHour()>
/**
 * @return the currently selected hour, in the range (0-23)
 * @deprecated Use {@link #getHour()}
 */
====>[PUBLIC]<android.widget.TimePicker: Integer getCurrentHour()>    ---->    #getHour()
<android.view.ViewDebug: void stopRecyclerTracing()>
/**
 * @deprecated This method is now unused and invoking it is a no-op
 */
====>[PUBLIC]<android.view.ViewDebug: void stopRecyclerTracing()>    ---->    
<android.preference.PreferenceActivity: void setPreferenceScreen(PreferenceScreen)>
/**
 * Sets the root of the preference hierarchy that this activity is showing.
 *
 * @param preferenceScreen The root {@link PreferenceScreen} of the preference hierarchy.
 *
 * @deprecated This function is not relevant for a modern fragment-based
 * PreferenceActivity.
 */
====>[PUBLIC]<android.preference.PreferenceActivity: void setPreferenceScreen(PreferenceScreen)>    ---->    
<android.media.AudioManager: void setParameter(String,String)>
/**
 * @hide
 * @deprecated Use {@link #setParameters(String)} instead
 */
====>[HIDDEN]<android.media.AudioManager: void setParameter(String,String)>    ---->    #setParameters(String)
<android.app.FragmentController: void dispatchMultiWindowModeChanged(boolean)>
/**
 * Lets all Fragments managed by the controller's FragmentManager know the multi-window mode of
 * the activity changed.
 * <p>Call when the multi-window mode of the activity changed.
 *
 * @see Fragment#onMultiWindowModeChanged
 * @deprecated use {@link #dispatchMultiWindowModeChanged(boolean, Configuration)}
 */
====>[PUBLIC]<android.app.FragmentController: void dispatchMultiWindowModeChanged(boolean)>    ---->    #dispatchMultiWindowModeChanged(boolean, Configuration)
<android.view.inputmethod.InputMethodSubtype: void <init>(int,int,String,String,String,boolean,boolean)>
/**
 * Constructor with no subtype ID specified.
 * @deprecated use {@link InputMethodSubtypeBuilder} instead.
 * Arguments for this constructor have the same meanings as
 * {@link InputMethodSubtype#InputMethodSubtype(int, int, String, String, String, boolean,
 * boolean, int)} except "id".
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodSubtype: void <init>(int,int,String,String,String,boolean,boolean)>    ---->    InputMethodSubtypeBuilder
<android.view.ViewGroup: int getPersistentDrawingCache()>
/**
 * Returns an integer indicating what types of drawing caches are kept in memory.
 *
 * @see #setPersistentDrawingCache(int)
 * @see #setAnimationCacheEnabled(boolean)
 *
 * @return one or a combination of {@link #PERSISTENT_NO_CACHE},
 * {@link #PERSISTENT_ANIMATION_CACHE}, {@link #PERSISTENT_SCROLLING_CACHE}
 * and {@link #PERSISTENT_ALL_CACHES}
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.ViewGroup: int getPersistentDrawingCache()>    ---->    #setLayerType(int, Paint)
<android.telephony.SignalStrength: int getGsmSignalStrength()>
/**
 * Get the GSM RSSI in ASU.
 *
 * Asu is calculated based on 3GPP RSRP. Refer to 3GPP 27.007 (Ver 10.3.0) Sec 8.69
 *
 * @return RSSI in ASU 0..31, 99, or UNAVAILABLE
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthGsm#getAsuLevel}.
 * @see android.telephony#CellSignalStrengthGsm
 * @see android.telephony.SignalStrength#getCellSignalStrengths
 */
====>[PUBLIC]<android.telephony.SignalStrength: int getGsmSignalStrength()>    ---->    android.telephony#CellSignalStrengthGsm
<android.webkit.PluginData: Map<String, String[]> getHeaders()>
/**
 * Returns the HTTP response headers associated with the plugin
 * content.
 *
 * @return A Map<String, String[]> containing all headers. The
 * mapping is 'lowercase header name' to ['unmodified header
 * name', header value].
 *
 * @hide
 * @deprecated This class was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.PluginData: Map<String, String[]> getHeaders()>    ---->    
<android.os.Debug: void resetGlobalAllocSize()>
/**
 * Clears the global size of objects allocated.
 * @see #getGlobalAllocSize()
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void resetGlobalAllocSize()>    ---->    
<android.renderscript.Mesh.Builder: int getCurrentIndexSetIndex()>
/**
 * @deprecated in API 16
 * @return internal index of the last index set added to the
 * builder
 */
====>[PUBLIC]<android.renderscript.Mesh.Builder: int getCurrentIndexSetIndex()>    ---->    
<android.webkit.WebViewClient: WebResourceResponse shouldInterceptRequest(WebView,String)>
/**
 * Notify the host application of a resource request and allow the
 * application to return the data.  If the return value is {@code null}, the WebView
 * will continue to load the resource as usual.  Otherwise, the return
 * response and data will be used.
 *
 * <p>This callback is invoked for a variety of URL schemes (e.g., {@code http(s):}, {@code
 * data:}, {@code file:}, etc.), not only those schemes which send requests over the network.
 * This is not called for {@code javascript:} URLs, {@code blob:} URLs, or for assets accessed
 * via {@code file:///android_asset/} or {@code file:///android_res/} URLs.
 *
 * <p>In the case of redirects, this is only called for the initial resource URL, not any
 * subsequent redirect URLs.
 *
 * <p class="note"><b>Note:</b> This method is called on a thread
 * other than the UI thread so clients should exercise caution
 * when accessing private data or the view system.
 *
 * <p class="note"><b>Note:</b> When Safe Browsing is enabled, these URLs still undergo Safe
 * Browsing checks. If this is undesired, whitelist the URL with {@link
 * WebView#setSafeBrowsingWhitelist} or ignore the warning with {@link #onSafeBrowsingHit}.
 *
 * @param view The {@link android.webkit.WebView} that is requesting the
 * resource.
 * @param url The raw url of the resource.
 * @return A {@link android.webkit.WebResourceResponse} containing the
 * response information or {@code null} if the WebView should load the
 * resource itself.
 * @deprecated Use {@link #shouldInterceptRequest(WebView, WebResourceRequest)
 * shouldInterceptRequest(WebView, WebResourceRequest)} instead.
 */
====>[PUBLIC]<android.webkit.WebViewClient: WebResourceResponse shouldInterceptRequest(WebView,String)>    ---->    #shouldInterceptRequest(WebView, WebResourceRequest)  shouldInterceptRequest(WebView, WebResourceRequest)
Inconsistency (Non-Documentation):<android.app.ContextImpl: void setWallpaper(InputStream)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/ContextImpl.java
<android.app.ContextImpl: void setWallpaper(InputStream)>

====>[PUBLIC]<android.app.ContextImpl: void setWallpaper(InputStream)>    ---->    
<android.renderscript.ProgramRaster: boolean isPointSpriteEnabled()>
/**
 * @deprecated in API 16
 * Specifies whether vertices are rendered as screen aligned
 * elements of a specified size
 * @return whether point sprites are enabled
 */
====>[PUBLIC]<android.renderscript.ProgramRaster: boolean isPointSpriteEnabled()>    ---->    
<android.provider.Contacts.Phones: CharSequence getDisplayLabel(Context,int,CharSequence,CharSequence[])>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.Phones: CharSequence getDisplayLabel(Context,int,CharSequence,CharSequence[])>    ---->    android.provider.ContactsContract
<android.telephony.TelephonyManager: void answerRingingCall()>
/**
 * @removed Use {@link android.telecom.TelecomManager#acceptRingingCall} instead
 * @hide
 * @removed
 */
====>[HIDDEN]<android.telephony.TelephonyManager: void answerRingingCall()>    ---->    
<android.app.Dialog: void <init>(Context,boolean,Message)>
/**
 * @deprecated
 * @hide
 */
====>[HIDDEN]<android.app.Dialog: void <init>(Context,boolean,Message)>    ---->    
Inconsistency (Non-Documentation):<android.net.SntpClient: boolean requestTime(String,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/net/SntpClient.java
<android.net.SntpClient: boolean requestTime(String,int)>

====>[PUBLIC]<android.net.SntpClient: boolean requestTime(String,int)>    ---->    
<android.webkit.WebSettings: void setNavDump(boolean)>
/**
 * Enables dumping the pages navigation cache to a text file. The default
 * is {@code false}.
 *
 * @deprecated This method is now obsolete.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebSettings: void setNavDump(boolean)>    ---->    
<android.os.UserManager: boolean isLinkedUser()>
/**
 * @hide
 * @deprecated Use {@link #isRestrictedProfile()}
 */
====>[HIDDEN]<android.os.UserManager: boolean isLinkedUser()>    ---->    #isRestrictedProfile()
<android.os.Debug: void resetGlobalFreedSize()>
/**
 * Clears the global size of objects freed.
 * @see #getGlobalFreedSize()
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void resetGlobalFreedSize()>    ---->    
<com.android.systemui.Dependency: T get(DependencyKey<T>)>
/**
 * @deprecated see docs/dagger.md
 */
====>[PUBLIC]<com.android.systemui.Dependency: T get(DependencyKey<T>)>    ---->    
<android.bluetooth.BluetoothHealthCallback: void onHealthChannelStateChange(BluetoothHealthAppConfiguration,BluetoothDevice,int,int,ParcelFileDescriptor,int)>
/**
 * Callback to inform change in channel state.
 * <p> Its the responsibility of the implementor of this callback to close the
 * parcel file descriptor when done. This callback is called on the Binder
 * thread (not the UI thread)
 *
 * @param config The Health app configutation
 * @param device The Bluetooth Device
 * @param prevState The previous state of the channel
 * @param newState The new state of the channel.
 * @param fd The Parcel File Descriptor when the channel state is connected.
 * @param channelId The id associated with the channel. This id will be used in future calls
 * like when disconnecting the channel.
 *
 * @deprecated Health Device Profile (HDP) and MCAP protocol are no longer used. New
 * apps should use Bluetooth Low Energy based solutions such as {@link BluetoothGatt},
 * {@link BluetoothAdapter#listenUsingL2capChannel()(int)}, or
 * {@link BluetoothDevice#createL2capChannel(int)}
 */
====>[PUBLIC]<android.bluetooth.BluetoothHealthCallback: void onHealthChannelStateChange(BluetoothHealthAppConfiguration,BluetoothDevice,int,int,ParcelFileDescriptor,int)>    ---->    BluetoothGatt
<android.app.Activity: boolean showDialog(int,Bundle)>
/**
 * Show a dialog managed by this activity.  A call to {@link #onCreateDialog(int, Bundle)}
 * will be made with the same id the first time this is called for a given
 * id.  From thereafter, the dialog will be automatically saved and restored.
 *
 * <em>If you are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}
 * or later, consider instead using a {@link DialogFragment} instead.</em>
 *
 * <p>Each time a dialog is shown, {@link #onPrepareDialog(int, Dialog, Bundle)} will
 * be made to provide an opportunity to do any timely preparation.
 *
 * @param id The id of the managed dialog.
 * @param args Arguments to pass through to the dialog.  These will be saved
 * and restored for you.  Note that if the dialog is already created,
 * {@link #onCreateDialog(int, Bundle)} will not be called with the new
 * arguments but {@link #onPrepareDialog(int, Dialog, Bundle)} will be.
 * If you need to rebuild the dialog, call {@link #removeDialog(int)} first.
 * @return Returns true if the Dialog was created; false is returned if
 * it is not created because {@link #onCreateDialog(int, Bundle)} returns false.
 *
 * @see Dialog
 * @see #onCreateDialog(int, Bundle)
 * @see #onPrepareDialog(int, Dialog, Bundle)
 * @see #dismissDialog(int)
 * @see #removeDialog(int)
 *
 * @deprecated Use the new {@link DialogFragment} class with
 * {@link FragmentManager} instead; this is also
 * available on older platforms through the Android compatibility package.
 */
====>[PUBLIC]<android.app.Activity: boolean showDialog(int,Bundle)>    ---->    DialogFragment
<android.os.Debug: void changeDebugPort(int)>
/**
 * Change the JDWP port.
 *
 * @deprecated no longer needed or useful
 */
====>[PUBLIC]<android.os.Debug: void changeDebugPort(int)>    ---->    
<android.renderscript.RSTextureView: void pause()>
/**
 * @deprecated in API 16
 * Inform the view that the activity is paused. The owner of this view must
 * call this method when the activity is paused. Calling this method will
 * pause the rendering thread.
 * Must not be called before a renderer has been set.
 */
====>[PUBLIC]<android.renderscript.RSTextureView: void pause()>    ---->    
<android.hardware.radio.RadioTuner: void setAnalogForced(boolean)>
/**
 * Forces the analog playback for the supporting radio technology.
 *
 * User may disable digital playback for FM HD Radio or hybrid FM/DAB with
 * this option. This is purely user choice, ie. does not reflect digital-
 * analog handover managed from the HAL implementation side.
 *
 * Some radio technologies may not support this, ie. DAB.
 *
 * @param isForced {@code true} to force analog, {@code false} for a default behaviour.
 * @throws IllegalStateException if the switch is not supported at current
 * configuration.
 * @deprecated Use {@link setConfigFlag(int, boolean)} instead.
 */
====>[PUBLIC]<android.hardware.radio.RadioTuner: void setAnalogForced(boolean)>    ---->    setConfigFlag(int, boolean)
<android.net.wifi.WifiManager: boolean setEnableAutoJoinWhenAssociated(boolean)>
/**
 * Deprecated
 * returns false
 * @hide
 * @deprecated
 */
====>[HIDDEN]<android.net.wifi.WifiManager: boolean setEnableAutoJoinWhenAssociated(boolean)>    ---->    
<android.provider.MediaStore: Uri setIncludeTrashed(Uri)>
/**
 * Update the given {@link Uri} to also include any trashed media items from
 * calls such as
 * {@link ContentResolver#query(Uri, String[], Bundle, CancellationSignal)}.
 * By default no trashed items are returned.
 *
 * @see MediaColumns#IS_TRASHED
 * @see MediaStore#setIncludeTrashed(Uri)
 * @see MediaStore#trash(Context, Uri)
 * @see MediaStore#untrash(Context, Uri)
 * @removed
 */
====>[HIDDEN]<android.provider.MediaStore: Uri setIncludeTrashed(Uri)>    ---->    
<android.webkit.Plugin: void setPath(String)>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin: void setPath(String)>    ---->    
<android.os.Debug: void resetGlobalExternalAllocCount()>
/**
 * This method exists for compatibility and has no effect.
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: void resetGlobalExternalAllocCount()>    ---->    
<android.view.textservice.TextServicesManager: TextServicesManager getInstance()>
/**
 * @deprecated Do not use. Just kept because of {@link UnsupportedAppUsage} in
 * {@link #getInstance()}.
 * @hide
 */
====>[HIDDEN]<android.view.textservice.TextServicesManager: TextServicesManager getInstance()>    ---->    UnsupportedAppUsage
Inconsistency (Non-Documentation):<com.android.server.StorageManagerService: void killMediaProvider(List<UserInfo>)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//services/core/java/com/android/server/StorageManagerService.java
<com.android.server.StorageManagerService: void killMediaProvider(List<UserInfo>)>
/**
 * MediaProvider has a ton of code that makes assumptions about storage
 * paths never changing, so we outright kill them to pick up new state.
 */
====>[PUBLIC]<com.android.server.StorageManagerService: void killMediaProvider(List<UserInfo>)>    ---->    
<android.telephony.SubscriptionInfo: int getMcc()>
/**
 * @return the MCC.
 * @deprecated Use {@link #getMccString()} instead.
 */
====>[PUBLIC]<android.telephony.SubscriptionInfo: int getMcc()>    ---->    #getMccString()
<android.app.Notification.WearableExtender: WearableExtender clearPages()>
/**
 * Clear all additional pages present on this builder.
 * @return this object for method chaining.
 * @see #addPage
 * @deprecated Multiple content pages are no longer supported.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: WearableExtender clearPages()>    ---->    
<android.bluetooth.BluetoothAdapter: boolean startLeScan(UUID[],LeScanCallback)>
/**
 * Starts a scan for Bluetooth LE devices, looking for devices that
 * advertise given services.
 *
 * <p>Devices which advertise all specified services are reported using the
 * {@link LeScanCallback#onLeScan} callback.
 *
 * @param serviceUuids Array of services to look for
 * @param callback the callback LE scan results are delivered
 * @return true, if the scan was started successfully
 * @deprecated use {@link BluetoothLeScanner#startScan(List, ScanSettings, ScanCallback)}
 * instead.
 */
====>[PUBLIC]<android.bluetooth.BluetoothAdapter: boolean startLeScan(UUID[],LeScanCallback)>    ---->    BluetoothLeScanner#startScan(List, ScanSettings, ScanCallback)
<android.os.FileUtils: long checksumCrc32(File)>
/**
 * Computes the checksum of a file using the CRC32 checksum routine. The
 * value of the checksum is returned.
 *
 * @param file the file to checksum, must not be null
 * @return the checksum value or an exception is thrown.
 * @deprecated this is a weak hashing algorithm, and should not be used due
 * to its potential for collision.
 * @hide
 */
====>[HIDDEN]<android.os.FileUtils: long checksumCrc32(File)>    ---->    
<android.renderscript.ProgramRaster: ProgramRaster CULL_FRONT(RenderScript)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.ProgramRaster: ProgramRaster CULL_FRONT(RenderScript)>    ---->    
<android.provider.Contacts.Intents.Insert: void <init>()>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.Intents.Insert: void <init>()>    ---->    android.provider.ContactsContract
<android.app.usage.StorageStatsManager: StorageStats queryStatsForUser(String,UserHandle)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.usage.StorageStatsManager: StorageStats queryStatsForUser(String,UserHandle)>    ---->    
<android.app.DownloadManager: long addCompletedDownload(String,String,boolean,String,String,long,boolean)>
/**
 * Adds a file to the downloads database system, so it could appear in Downloads App
 * (and thus become eligible for management by the Downloads App).
 * <p>
 * It is helpful to make the file scannable by MediaScanner by setting the param
 * isMediaScannerScannable to true. It makes the file visible in media managing
 * applications such as Gallery App, which could be a useful purpose of using this API.
 *
 * <p> For applications targeting {@link android.os.Build.VERSION_CODES#Q} or above,
 * {@code path} must be within directories owned by the application
 * {e.g. {@link Context#getExternalFilesDir(String)}} or if the application is running under
 * the legacy storage model (see
 * {@link android.R.styleable#AndroidManifestApplication_requestLegacyExternalStorage
 * android:requestLegacyExternalStorage}), {@code path} can also be within the top-level
 * Downloads directory (as returned by
 * {@link Environment#getExternalStoragePublicDirectory(String)} with
 * {@link Environment#DIRECTORY_DOWNLOADS}).
 *
 * @param title the title that would appear for this file in Downloads App.
 * @param description the description that would appear for this file in Downloads App.
 * @param isMediaScannerScannable true if the file is to be scanned by MediaScanner. Files
 * scanned by MediaScanner appear in the applications used to view media (for example,
 * Gallery app).
 * @param mimeType mimetype of the file.
 * @param path absolute pathname to the file. The file should be world-readable, so that it can
 * be managed by the Downloads App and any other app that is used to read it (for example,
 * Gallery app to display the file, if the file contents represent a video/image).
 * @param length length of the downloaded file
 * @param showNotification true if a notification is to be sent, false otherwise
 * @return  an ID for the download entry added to the downloads app, unique across the system
 * This ID is used to make future calls related to this download.
 *
 * @deprecated Apps should instead contribute files to
 * {@link android.provider.MediaStore.Downloads} collection to make them available to user
 * as part of Downloads.
 */
====>[PUBLIC]<android.app.DownloadManager: long addCompletedDownload(String,String,boolean,String,String,long,boolean)>    ---->    android.provider.MediaStore.Downloads
<android.widget.TimePicker: Integer getCurrentMinute()>
/**
 * @return the currently selected minute, in the range (0-59)
 * @deprecated Use {@link #getMinute()}
 */
====>[PUBLIC]<android.widget.TimePicker: Integer getCurrentMinute()>    ---->    #getMinute()
<android.view.inputmethod.InputMethodManager: void updateCursor(View,int,int,int,int)>
/**
 * Report the current cursor location in its window.
 *
 * @deprecated Use {@link #updateCursorAnchorInfo(View, CursorAnchorInfo)} instead.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodManager: void updateCursor(View,int,int,int,int)>    ---->    #updateCursorAnchorInfo(View, CursorAnchorInfo)
Inconsistency (Non-Documentation):<android.webkit.Plugin.DefaultClickHandler: void handleClickEvent(Context)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/webkit/Plugin.java
<android.webkit.Plugin.DefaultClickHandler: void handleClickEvent(Context)>

====>[PUBLIC]<android.webkit.Plugin.DefaultClickHandler: void handleClickEvent(Context)>    ---->    
<com.android.internal.widget.PagerAdapter: void destroyItem(View,int,Object)>
/**
 * Remove a page for the given position.  The adapter is responsible
 * for removing the view from its container, although it only must ensure
 * this is done by the time it returns from {@link #finishUpdate(android.view.View)}.
 *
 * @param container The containing View from which the page will be removed.
 * @param position The page position to be removed.
 * @param object The same object that was returned by
 * {@link #instantiateItem(android.view.View, int)}.
 *
 * @deprecated Use {@link #destroyItem(android.view.ViewGroup, int, Object)}
 */
====>[PUBLIC]<com.android.internal.widget.PagerAdapter: void destroyItem(View,int,Object)>    ---->    #destroyItem(android.view.ViewGroup, int, Object)
<android.content.pm.PackageManager: void getPackageSizeInfoAsUser(String,int,IPackageStatsObserver)>
/**
 * Retrieve the size information for a package.
 * Since this may take a little while, the result will
 * be posted back to the given observer.  The calling context
 * should have the {@link android.Manifest.permission#GET_PACKAGE_SIZE} permission.
 *
 * @param packageName The name of the package whose size information is to be retrieved
 * @param userId The user whose size information should be retrieved.
 * @param observer An observer callback to get notified when the operation
 * is complete.
 * {@link android.content.pm.IPackageStatsObserver#onGetStatsCompleted(PackageStats, boolean)}
 * The observer's callback is invoked with a PackageStats object(containing the
 * code, data and cache sizes of the package) and a boolean value representing
 * the status of the operation. observer may be null to indicate that
 * no callback is desired.
 *
 * @deprecated use {@link StorageStatsManager} instead.
 * @hide
 */
====>[HIDDEN]<android.content.pm.PackageManager: void getPackageSizeInfoAsUser(String,int,IPackageStatsObserver)>    ---->    StorageStatsManager
<android.service.voice.VoiceInteractionSession.ConfirmationRequest: CharSequence getPrompt()>
/**
 * Return the prompt informing the user of what will happen, as per
 * {@link android.app.VoiceInteractor.ConfirmationRequest
 * VoiceInteractor.ConfirmationRequest}.
 * @deprecated Prefer {@link #getVoicePrompt()} which allows multiple voice prompts.
 */
====>[PUBLIC]<android.service.voice.VoiceInteractionSession.ConfirmationRequest: CharSequence getPrompt()>    ---->    #getVoicePrompt()
<android.hardware.location.NanoApp: void <init>(int,byte[])>
/**
 * Initialize a NanoApp with the given id and binary.
 *
 * While this sets defaults for other fields, users will want to provide
 * other values for those fields in most cases.
 *
 * @see #setPublisher(String)
 * @see #setName(String)
 * @see #setAppVersion(int)
 * @see #setNeededReadMemBytes(int)
 * @see #setNeededWriteMemBytes(int)
 * @see #setNeededExecMemBytes(int)
 * @see #setNeededSensors(int[])
 * @see #setOutputEvents(int[])
 *
 * @deprecated Use NanoApp(long, byte[]) instead
 */
====>[PUBLIC]<android.hardware.location.NanoApp: void <init>(int,byte[])>    ---->    NanoApp(long, byte[])
<android.app.KeyguardManager: void dismissKeyguard(Activity,KeyguardDismissCallback,Handler)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.KeyguardManager: void dismissKeyguard(Activity,KeyguardDismissCallback,Handler)>    ---->    
<android.location.GnssMeasurement: void setCarrierCycles(long)>
/**
 * Sets the number of full carrier cycles between the satellite and the receiver.
 *
 * @deprecated use {@link #setAccumulatedDeltaRangeMeters(double)}
 * and {@link #setAccumulatedDeltaRangeState(int)} instead.
 *
 * @hide
 */
====>[HIDDEN]<android.location.GnssMeasurement: void setCarrierCycles(long)>    ---->    #setAccumulatedDeltaRangeMeters(double)
<android.view.View: void destroyDrawingCache()>
/**
 * <p>Frees the resources used by the drawing cache. If you call
 * {@link #buildDrawingCache()} manually without calling
 * {@link #setDrawingCacheEnabled(boolean) setDrawingCacheEnabled(true)}, you
 * should cleanup the cache with this method afterwards.</p>
 *
 * @see #setDrawingCacheEnabled(boolean)
 * @see #buildDrawingCache()
 * @see #getDrawingCache()
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: void destroyDrawingCache()>    ---->    #setLayerType(int, Paint)
<android.service.textclassifier.TextClassifierService: void onSelectionEvent(TextClassificationSessionId,SelectionEvent)>
/**
 * Writes the selection event.
 * This is called when a selection event occurs. e.g. user changed selection; or smart selection
 * happened.
 *
 * <p>The default implementation ignores the event.
 *
 * @param sessionId the session id
 * @param event the selection event
 * @deprecated
 * Use {@link #onTextClassifierEvent(TextClassificationSessionId, TextClassifierEvent)}
 * instead
 */
====>[PUBLIC]<android.service.textclassifier.TextClassifierService: void onSelectionEvent(TextClassificationSessionId,SelectionEvent)>    ---->    #onTextClassifierEvent(TextClassificationSessionId, TextClassifierEvent)
<android.os.Vibrator: void vibrate(long[],int,AudioAttributes)>
/**
 * Vibrate with a given pattern.
 *
 * <p>
 * Pass in an array of ints that are the durations for which to turn on or off
 * the vibrator in milliseconds.  The first value indicates the number of milliseconds
 * to wait before turning the vibrator on.  The next value indicates the number of milliseconds
 * for which to keep the vibrator on before turning it off.  Subsequent values alternate
 * between durations in milliseconds to turn the vibrator off or to turn the vibrator on.
 * </p><p>
 * To cause the pattern to repeat, pass the index into the pattern array at which
 * to start the repeat, or -1 to disable repeating.
 * </p>
 *
 * @param pattern an array of longs of times for which to turn the vibrator on or off.
 * @param repeat the index into pattern at which to repeat, or -1 if
 * you don't want to repeat.
 * @param attributes {@link AudioAttributes} corresponding to the vibration. For example,
 * specify {@link AudioAttributes#USAGE_ALARM} for alarm vibrations or
 * {@link AudioAttributes#USAGE_NOTIFICATION_RINGTONE} for
 * vibrations associated with incoming calls.
 *
 * @deprecated Use {@link #vibrate(VibrationEffect, AudioAttributes)} instead.
 */
====>[PUBLIC]<android.os.Vibrator: void vibrate(long[],int,AudioAttributes)>    ---->    #vibrate(VibrationEffect, AudioAttributes)
<android.app.Activity: boolean isBackgroundVisibleBehind()>
/**
 * Translucent activities may call this to determine if there is an activity below them that
 * is currently set to be visible in the background.
 *
 * @deprecated This method's functionality is no longer supported as of
 * {@link android.os.Build.VERSION_CODES#O} and will be removed in a future release.
 *
 * @return true if an activity below is set to visible according to the most recent call to
 * {@link #requestVisibleBehind(boolean)}, false otherwise.
 *
 * @see #requestVisibleBehind(boolean)
 * @see #onVisibleBehindCanceled()
 * @see #onBackgroundVisibleBehindChanged(boolean)
 * @hide
 */
====>[HIDDEN]<android.app.Activity: boolean isBackgroundVisibleBehind()>    ---->    #requestVisibleBehind(boolean)
<android.app.Notification.Builder: void <init>(Context)>
/**
 * @deprecated use {@link Notification.Builder#Notification.Builder(Context, String)}
 * instead. All posted Notifications must specify a NotificationChannel Id.
 */
====>[PUBLIC]<android.app.Notification.Builder: void <init>(Context)>    ---->    Notification.Builder#Notification.Builder(Context, String)
<com.android.internal.widget.RecyclerView: ViewHolder findViewHolderForPosition(int)>
/**
 * @deprecated use {@link #findViewHolderForLayoutPosition(int)} or
 * {@link #findViewHolderForAdapterPosition(int)}
 */
====>[PUBLIC]<com.android.internal.widget.RecyclerView: ViewHolder findViewHolderForPosition(int)>    ---->    #findViewHolderForLayoutPosition(int)
<android.content.pm.VersionedPackage: int getVersionCode()>
/**
 * @deprecated use {@link #getLongVersionCode()} instead.
 */
====>[PUBLIC]<android.content.pm.VersionedPackage: int getVersionCode()>    ---->    #getLongVersionCode()
Inconsistency (Non-Documentation):<com.android.server.net.IpConfigStore: SparseArray<IpConfiguration> readIpAndProxyConfigurations(String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//services/core/java/com/android/server/net/IpConfigStore.java
<com.android.server.net.IpConfigStore: SparseArray<IpConfiguration> readIpAndProxyConfigurations(String)>
/**
 * @Deprecated use {@link #readIpConfigurations(String)}
 */
====>[PUBLIC]<com.android.server.net.IpConfigStore: SparseArray<IpConfiguration> readIpAndProxyConfigurations(String)>    ---->    
<android.view.inputmethod.InputMethodManager: void showSoftInputUnchecked(int,ResultReceiver)>
/**
 * This method is still kept for a while until android.support.v7.widget.SearchView ver. 26.0
 * is publicly released because previous implementations of that class had relied on this method
 * via reflection.
 *
 * @deprecated This is a hidden API. You should never use this.
 * @hide
 */
====>[HIDDEN]<android.view.inputmethod.InputMethodManager: void showSoftInputUnchecked(int,ResultReceiver)>    ---->    
<android.app.TaskStackListener: void onTaskRemovalStarted(int)>
/**
 * @deprecated see {@link #onTaskRemovalStarted(ActivityManager.RunningTaskInfo)}
 */
====>[PUBLIC]<android.app.TaskStackListener: void onTaskRemovalStarted(int)>    ---->    #onTaskRemovalStarted(ActivityManager.RunningTaskInfo)
<android.view.inputmethod.InputMethodManager: boolean shouldOfferSwitchingToNextInputMethod(IBinder)>
/**
 * Returns true if the current IME needs to offer the users ways to switch to a next input
 * method (e.g. a globe key.).
 * When an IME sets supportsSwitchingToNextInputMethod and this method returns true,
 * the IME has to offer ways to to invoke {@link #switchToNextInputMethod} accordingly.
 * <p> Note that the system determines the most appropriate next input method
 * and subtype in order to provide the consistent user experience in switching
 * between IMEs and subtypes.
 * @param imeToken Supplies the identifying token given to an input method when it was started,
 * which allows it to perform this operation on itself.
 * @deprecated Use {@link InputMethodService#shouldOfferSwitchingToNextInputMethod()}
 * instead. This method was intended for IME developers who should be accessing APIs through
 * the service. APIs in this class are intended for app developers interacting with the IME.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodManager: boolean shouldOfferSwitchingToNextInputMethod(IBinder)>    ---->    InputMethodService#shouldOfferSwitchingToNextInputMethod()
<android.media.AudioManager: void setWiredHeadsetOn(boolean)>
/**
 * Sets audio routing to the wired headset on or off.
 *
 * @param on set <var>true</var> to route audio to/from wired
 * headset; <var>false</var> disable wired headset audio
 * @deprecated Do not use.
 */
====>[PUBLIC]<android.media.AudioManager: void setWiredHeadsetOn(boolean)>    ---->    
<android.opengl.GLES30: void glGetTransformFeedbackVarying(int,int,int,IntBuffer,IntBuffer,IntBuffer,byte)>
/**
 * @deprecated
 * Use the version that takes a ByteBuffer as the last argument, or the versions that return a String.
 */
====>[PUBLIC]<android.opengl.GLES30: void glGetTransformFeedbackVarying(int,int,int,IntBuffer,IntBuffer,IntBuffer,byte)>    ---->    
<android.renderscript.ScriptIntrinsicColorMatrix: ScriptIntrinsicColorMatrix create(RenderScript,Element)>
/**
 * Create an intrinsic for applying a color matrix to an
 * allocation.
 *
 * @param rs The RenderScript context
 * @param e Element type for inputs and outputs, As of API 19,
 * this parameter is ignored. The Element type check is
 * performed in the kernel launch.
 *
 * @deprecated Use the single argument version as Element is now
 * ignored.
 *
 * @return ScriptIntrinsicColorMatrix
 */
====>[PUBLIC]<android.renderscript.ScriptIntrinsicColorMatrix: ScriptIntrinsicColorMatrix create(RenderScript,Element)>    ---->    
<android.location.LocationManager: void setLocationControllerExtraPackageEnabled(boolean)>
/**
 * Set whether the extra location controller package is currently enabled on the device.
 *
 * @removed
 * @deprecated Use {@link #setExtraLocationControllerPackageEnabled} instead.
 * @hide
 */
====>[HIDDEN]<android.location.LocationManager: void setLocationControllerExtraPackageEnabled(boolean)>    ---->    #setExtraLocationControllerPackageEnabled
<android.renderscript.ProgramRaster.Builder: void <init>(RenderScript)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.ProgramRaster.Builder: void <init>(RenderScript)>    ---->    
<com.android.internal.widget.RecyclerView.ItemDecoration: void onDraw(Canvas,RecyclerView)>
/**
 * @deprecated
 * Override {@link #onDraw(Canvas, RecyclerView, RecyclerView.State)}
 */
====>[PUBLIC]<com.android.internal.widget.RecyclerView.ItemDecoration: void onDraw(Canvas,RecyclerView)>    ---->    #onDraw(Canvas, RecyclerView, RecyclerView.State)
<android.app.Fragment: void onMultiWindowModeChanged(boolean)>
/**
 * Called when the Fragment's activity changes from fullscreen mode to multi-window mode and
 * visa-versa. This is generally tied to {@link Activity#onMultiWindowModeChanged} of the
 * containing Activity.
 *
 * @param isInMultiWindowMode True if the activity is in multi-window mode.
 *
 * @deprecated Use {@link #onMultiWindowModeChanged(boolean, Configuration)} instead.
 */
====>[PUBLIC]<android.app.Fragment: void onMultiWindowModeChanged(boolean)>    ---->    #onMultiWindowModeChanged(boolean, Configuration)
Inconsistency (Non-Documentation):<android.app.Notification.Action.WearableExtender: CharSequence getCancelLabel()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.Action.WearableExtender: CharSequence getCancelLabel()>
/**
 * Get the label to display to cancel the action.
 * This is usually an imperative verb like "Cancel".
 *
 * @return the label to display to cancel the action
 */
====>[PUBLIC]<android.app.Notification.Action.WearableExtender: CharSequence getCancelLabel()>    ---->    
<android.os.Debug: void resetGlobalGcInvocationCount()>
/**
 * Clears the count of non-concurrent GC invocations.
 * @see #getGlobalGcInvocationCount()
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void resetGlobalGcInvocationCount()>    ---->    
<com.android.internal.app.SimpleIconFactory: void setWrapperBackgroundColor(int)>
/**
 * Sets the background color used for wrapped adaptive icon
 *
 * @deprecated Do not use, functionality will be replaced by iconloader lib eventually.
 */
====>[PUBLIC]<com.android.internal.app.SimpleIconFactory: void setWrapperBackgroundColor(int)>    ---->    
<android.app.InstantAppResolverService: void onGetInstantAppResolveInfo(Intent,int[],String,InstantAppResolutionCallback)>
/**
 * Called to retrieve resolve info for instant applications immediately. The response will be
 * ignored if not provided within a reasonable time. {@link InstantAppResolveInfo}s provided
 * in response to this method may be partial to request a second phase of resolution which will
 * result in a subsequent call to
 * {@link #onGetInstantAppIntentFilter(Intent, int[], String, InstantAppResolutionCallback)}
 *
 * @param sanitizedIntent The sanitized {@link Intent} used for resolution. A sanitized Intent
 * is an intent with potential PII removed from the original intent.
 * Fields removed include extras and the host + path of the data, if
 * defined.
 * @param hostDigestPrefix The hash prefix of the instant app's domain.
 * @param token A unique identifier that will be provided in calls to
 * {@link #onGetInstantAppIntentFilter(Intent, int[], String,
 * InstantAppResolutionCallback)}
 * and provided to the installer via {@link Intent#EXTRA_INSTANT_APP_TOKEN} to
 * tie a single launch together.
 * @param callback The {@link InstantAppResolutionCallback} to provide results to.
 *
 * @see InstantAppResolveInfo
 *
 * @deprecated Should implement {@link #onGetInstantAppResolveInfo(Intent, int[], UserHandle,
 * String, InstantAppResolutionCallback)}.
 */
====>[PUBLIC]<android.app.InstantAppResolverService: void onGetInstantAppResolveInfo(Intent,int[],String,InstantAppResolutionCallback)>    ---->    #onGetInstantAppResolveInfo(Intent, int[], UserHandle,  String, InstantAppResolutionCallback)
<android.net.TrafficStats: long getUidUdpTxBytes(int)>
/**
 * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},
 * transport layer statistics are no longer available, and will
 * always return {@link #UNSUPPORTED}.
 * @see #getUidTxBytes(int)
 */
====>[PUBLIC]<android.net.TrafficStats: long getUidUdpTxBytes(int)>    ---->    #getUidTxBytes(int)
<android.widget.TimePicker: void setCurrentHour(Integer)>
/**
 * Sets the currently selected hour using 24-hour time.
 *
 * @param currentHour the hour to set, in the range (0-23)
 * @deprecated Use {@link #setHour(int)}
 */
====>[PUBLIC]<android.widget.TimePicker: void setCurrentHour(Integer)>    ---->    #setHour(int)
<android.webkit.Plugin.DefaultClickHandler: void onClick(DialogInterface,int)>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin.DefaultClickHandler: void onClick(DialogInterface,int)>    ---->    
<android.view.textservice.SpellCheckerSession: void getSuggestions(TextInfo[],int,boolean)>
/**
 * A batch process of getSuggestions
 * @param textInfos an array of text metadata for a spell checker
 * @param suggestionsLimit the maximum number of suggestions that will be returned
 * @param sequentialWords true if textInfos can be treated as sequential words.
 * @deprecated use {@link SpellCheckerSession#getSentenceSuggestions(TextInfo[], int)} instead
 */
====>[PUBLIC]<android.view.textservice.SpellCheckerSession: void getSuggestions(TextInfo[],int,boolean)>    ---->    SpellCheckerSession#getSentenceSuggestions(TextInfo[], int)
<android.hardware.hdmi.HdmiControlManager: void powerOffRemoteDevice(HdmiDeviceInfo)>
/**
 * @removed
 * @hide
 * @deprecated Please use {@link #powerOffDevice(deviceInfo)} instead.
 */
====>[HIDDEN]<android.hardware.hdmi.HdmiControlManager: void powerOffRemoteDevice(HdmiDeviceInfo)>    ---->    #powerOffDevice(deviceInfo)
<android.telephony.SignalStrength: int getEvdoEcio()>
/**
 * Get the EVDO Ec/Io value in dB*10
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthCdma#getEvdoEcio}.
 *
 * @see android.telephony#CellSignalStrengthCdma
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 */
====>[PUBLIC]<android.telephony.SignalStrength: int getEvdoEcio()>    ---->    android.telephony#CellSignalStrengthCdma
<android.hardware.SensorManager: boolean registerListener(SensorListener,int)>
/**
 * Registers a listener for given sensors.
 *
 * @deprecated This method is deprecated, use
 * {@link SensorManager#registerListener(SensorEventListener, Sensor, int)}
 * instead.
 *
 * @param listener
 * sensor listener object
 *
 * @param sensors
 * a bit masks of the sensors to register to
 *
 * @return <code>true</code> if the sensor is supported and successfully
 * enabled
 */
====>[PUBLIC]<android.hardware.SensorManager: boolean registerListener(SensorListener,int)>    ---->    SensorManager#registerListener(SensorEventListener, Sensor, int)
<android.os.Debug: int getGlobalClassInitCount()>
/**
 * Returns the number of classes successfully initialized (ie those that executed without
 * throwing an exception) between a {@link #startAllocCounting() start} and
 * {@link #stopAllocCounting() stop}.
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: int getGlobalClassInitCount()>    ---->    
<android.speech.tts.SynthesisRequest: String getText()>
/**
 * Gets the text which should be synthesized.
 * @deprecated As of API level 21, replaced by {@link #getCharSequenceText}.
 */
====>[PUBLIC]<android.speech.tts.SynthesisRequest: String getText()>    ---->    #getCharSequenceText
<android.net.NetworkStatsHistory: void generateRandom(long,long,long)>
/**
 * @deprecated only for temporary testing
 */
====>[PUBLIC]<android.net.NetworkStatsHistory: void generateRandom(long,long,long)>    ---->    
<android.renderscript.ProgramFragmentFixedFunction.Builder: Builder setVaryingColor(boolean)>
/**
 * @deprecated in API 16
 * Specifies whether the varying color passed from the vertex
 * program or the constant color set on the fragment program is
 * used in the final color calculation in the fixed function
 * fragment shader
 */
====>[PUBLIC]<android.renderscript.ProgramFragmentFixedFunction.Builder: Builder setVaryingColor(boolean)>    ---->    
<android.media.AudioManager: boolean shouldVibrate(int)>
/**
 * Returns whether a particular type should vibrate according to user
 * settings and the current ringer mode.
 * <p>
 * This shouldn't be needed by most clients that use notifications to
 * vibrate. The notification manager will not vibrate if the policy doesn't
 * allow it, so the client should always set a vibrate pattern and let the
 * notification manager control whether or not to actually vibrate.
 *
 * @param vibrateType The type of vibrate. One of
 * {@link #VIBRATE_TYPE_NOTIFICATION} or
 * {@link #VIBRATE_TYPE_RINGER}.
 * @return Whether the type should vibrate at the instant this method is
 * called.
 * @see #setVibrateSetting(int, int)
 * @see #getVibrateSetting(int)
 * @deprecated Applications should maintain their own vibrate policy based on
 * current ringer mode that can be queried via {@link #getRingerMode()}.
 */
====>[PUBLIC]<android.media.AudioManager: boolean shouldVibrate(int)>    ---->    #getRingerMode()
<android.telephony.data.ApnSetting: InetAddress getProxyAddress()>
/**
 * Gets the HTTP proxy address configured for the APN. The proxy address might be an IP address
 * or hostname. This method returns {@code null} if system networking (typically DNS) isn’t
 * available to resolve a hostname value—values set as IP addresses don’t have this restriction.
 * This is a known problem and will be addressed in a future release.
 *
 * @return the HTTP proxy address or {@code null} if DNS isn’t available to resolve a hostname
 * @deprecated use {@link #getProxyAddressAsString()} instead.
 */
====>[PUBLIC]<android.telephony.data.ApnSetting: InetAddress getProxyAddress()>    ---->    #getProxyAddressAsString()
<android.util.proto.ProtoOutputStream: void writeRepeatedSFixed64(long,long)>
/**
 * Write a single repeated proto "sfixed64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedSFixed64(long,long)>    ---->    #write
<com.android.server.policy.WindowManagerPolicy.WindowState: boolean hasDrawnLw()>
/**
 * Returns true if this window has been shown on screen at some time in
 * the past.  Must be called with the window manager lock held.
 *
 * @deprecated Use {@link #isDrawnLw} or any of the other drawn/visibility methods.
 */
====>[PUBLIC]<com.android.server.policy.WindowManagerPolicy.WindowState: boolean hasDrawnLw()>    ---->    #isDrawnLw
Inconsistency (Non-Documentation):<com.android.server.NativeDaemonEvent: String getRawEvent()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//services/core/java/com/android/server/NativeDaemonEvent.java
<com.android.server.NativeDaemonEvent: String getRawEvent()>

====>[PUBLIC]<com.android.server.NativeDaemonEvent: String getRawEvent()>    ---->    
<android.test.mock.MockPackageManager: String getDefaultBrowserPackageName(int)>
/**
 * {@removed}
 */
====>[HIDDEN]<android.test.mock.MockPackageManager: String getDefaultBrowserPackageName(int)>    ---->    
<android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo: boolean isHeading()>
/**
 * Gets if the collection item is a heading. For example, section
 * heading, table header, etc.
 *
 * @return If the item is a heading.
 * @deprecated Use {@link AccessibilityNodeInfo#isHeading()}
 */
====>[PUBLIC]<android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo: boolean isHeading()>    ---->    AccessibilityNodeInfo#isHeading()
<android.webkit.PluginList: void addPlugin(Plugin)>
/**
 * Adds a plugin to the list.
 *
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.PluginList: void addPlugin(Plugin)>    ---->    
<android.view.ViewDebug: void startHierarchyTracing(String,View)>
/**
 * @deprecated This method is now unused and invoking it is a no-op
 */
====>[PUBLIC]<android.view.ViewDebug: void startHierarchyTracing(String,View)>    ---->    
<android.nfc.NdefRecord: void <init>(byte[])>
/**
 * Construct an NDEF Record from raw bytes.<p>
 * This method is deprecated, use {@link NdefMessage#NdefMessage(byte[])}
 * instead. This is because it does not make sense to parse a record:
 * the NDEF binary format is only defined for a message, and the
 * record flags MB and ME do not make sense outside of the context of
 * an entire message.<p>
 * This implementation will attempt to parse a single record by ignoring
 * the MB and ME flags, and otherwise following the rules of
 * {@link NdefMessage#NdefMessage(byte[])}.<p>
 *
 * @param data raw bytes to parse
 * @throws FormatException if the data cannot be parsed into a valid record
 * @deprecated use {@link NdefMessage#NdefMessage(byte[])} instead.
 */
====>[PUBLIC]<android.nfc.NdefRecord: void <init>(byte[])>    ---->    NdefMessage#NdefMessage(byte[])
<android.app.Activity: FragmentManager getFragmentManager()>
/**
 * Return the FragmentManager for interacting with fragments associated
 * with this activity.
 *
 * @deprecated Use {@link android.support.v4.app.FragmentActivity#getSupportFragmentManager()}
 */
====>[PUBLIC]<android.app.Activity: FragmentManager getFragmentManager()>    ---->    android.support.v4.app.FragmentActivity#getSupportFragmentManager()
<android.telecom.Conference: AudioState getAudioState()>
/**
 * @return The audio state of the conference, describing how its audio is currently
 * being routed by the system. This is {@code null} if this Conference
 * does not directly know about its audio state.
 * @deprecated Use {@link #getCallAudioState()} instead.
 * @hide
 */
====>[HIDDEN]<android.telecom.Conference: AudioState getAudioState()>    ---->    #getCallAudioState()
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: WearableExtender setHintShowBackgroundOnly(boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.WearableExtender: WearableExtender setHintShowBackgroundOnly(boolean)>
/**
 * Set a visual hint that only the background image of this notification should be
 * displayed, and other semantic content should be hidden. This hint is only applicable
 * to sub-pages added using {@link #addPage}.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: WearableExtender setHintShowBackgroundOnly(boolean)>    ---->    
Inconsistency (Non-Documentation):<android.provider.Contacts.People: void markAsContacted(ContentResolver,long)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/provider/Contacts.java
<android.provider.Contacts.People: void markAsContacted(ContentResolver,long)>
/**
 * This API is no longer supported as of O.
 */
====>[PUBLIC]<android.provider.Contacts.People: void markAsContacted(ContentResolver,long)>    ---->    
Inconsistency (Non-Documentation):<android.content.ContextWrapper: void removeStickyBroadcast(Intent)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/content/ContextWrapper.java
<android.content.ContextWrapper: void removeStickyBroadcast(Intent)>

====>[PUBLIC]<android.content.ContextWrapper: void removeStickyBroadcast(Intent)>    ---->    
<com.android.internal.widget.RecyclerView.LayoutManager: void onDetachedFromWindow(RecyclerView)>
/**
 * @deprecated
 * override {@link #onDetachedFromWindow(RecyclerView, Recycler)}
 */
====>[PUBLIC]<com.android.internal.widget.RecyclerView.LayoutManager: void onDetachedFromWindow(RecyclerView)>    ---->    #onDetachedFromWindow(RecyclerView, Recycler)
<android.net.ConnectivityManager: NetworkInfo getNetworkInfo(int)>
/**
 * Returns connection status information about a particular
 * network type.
 *
 * @param networkType integer specifying which networkType in
 * which you're interested.
 * @return a {@link NetworkInfo} object for the requested
 * network type or {@code null} if the type is not
 * supported by the device. If {@code networkType} is
 * TYPE_VPN and a VPN is active for the calling app,
 * then this method will try to return one of the
 * underlying networks for the VPN or null if the
 * VPN agent didn't specify any.
 *
 * @deprecated This method does not support multiple connected networks
 * of the same type. Use {@link #getAllNetworks} and
 * {@link #getNetworkInfo(android.net.Network)} instead.
 */
====>[PUBLIC]<android.net.ConnectivityManager: NetworkInfo getNetworkInfo(int)>    ---->    #getAllNetworks
<android.provider.ContactsContract.StreamItemPhotos: void <init>()>
/**
 * No public constructor since this is a utility class
 *
 * @deprecated - Do not use. This will not be supported in the future. In the future,
 * cursors returned from related queries will be empty.
 */
====>[PUBLIC]<android.provider.ContactsContract.StreamItemPhotos: void <init>()>    ---->    
<android.content.res.AssetManager: int addOverlayPath(String)>
/**
 * @deprecated Use {@link #setApkAssets(ApkAssets[], boolean)}
 * @hide
 */
====>[HIDDEN]<android.content.res.AssetManager: int addOverlayPath(String)>    ---->    #setApkAssets(ApkAssets[], boolean)
<android.provider.Contacts.ContactMethods: String encodeCustomImProtocol(String)>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.ContactMethods: String encodeCustomImProtocol(String)>    ---->    android.provider.ContactsContract
<android.renderscript.ProgramVertexFixedFunction.InternalBuilder: ProgramVertexFixedFunction create()>
/**
 * @deprecated in API 16
 * Creates ProgramVertexFixedFunction from the current state of
 * the builder
 *
 * @return  ProgramVertexFixedFunction
 */
====>[PUBLIC]<android.renderscript.ProgramVertexFixedFunction.InternalBuilder: ProgramVertexFixedFunction create()>    ---->    
<android.net.wifi.WifiManager: List<PasspointConfiguration> getPasspointConfigurations()>
/**
 * Return the list of installed Passpoint configurations.
 *
 * An empty list will be returned when no configurations are installed.
 *
 * @return A list of {@link PasspointConfiguration}
 * @deprecated This is no longer supported.
 */
====>[PUBLIC]<android.net.wifi.WifiManager: List<PasspointConfiguration> getPasspointConfigurations()>    ---->    
<android.view.textclassifier.TextClassification.Builder: Builder setOnClickListener(OnClickListener)>
/**
 * Sets the OnClickListener for the <i>primary</i> action that may be triggered to act on
 * the classified text.
 *
 * <p><strong>NOTE: </strong>This field is not parcelable. If read from a parcel, the
 * returned OnClickListener represents the first {@link RemoteAction} (if one exists).
 *
 * @deprecated Use {@link #addAction(RemoteAction)} instead.
 */
====>[PUBLIC]<android.view.textclassifier.TextClassification.Builder: Builder setOnClickListener(OnClickListener)>    ---->    #addAction(RemoteAction)
<android.renderscript.RSTextureView: void onSurfaceTextureAvailable(SurfaceTexture,int,int)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.RSTextureView: void onSurfaceTextureAvailable(SurfaceTexture,int,int)>    ---->    
<android.provider.Contacts.Presence: void setPresenceIcon(ImageView,int)>
/**
 * Sets a presence icon to the proper graphic
 *
 * @param icon the icon to to set
 * @param serverStatus that status
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.Presence: void setPresenceIcon(ImageView,int)>    ---->    android.provider.ContactsContract
<android.renderscript.ScriptGroup: void execute()>
/**
 * Execute the ScriptGroup.  This will run all the kernels in
 * the ScriptGroup.  No internal connection results will be visible
 * after execution of the ScriptGroup.
 *
 * @deprecated Use {@link #execute} instead.
 */
====>[PUBLIC]<android.renderscript.ScriptGroup: void execute()>    ---->    #execute
<android.media.MediaFile: boolean isImageFileType(int)>
/**
 * @deprecated file types no longer exist
 */
====>[PUBLIC]<android.media.MediaFile: boolean isImageFileType(int)>    ---->    
<android.hardware.display.DisplayManager: void setSaturationLevel(float)>
/**
 * Set the level of color saturation to apply to the display.
 * @param level The amount of saturation to apply, between 0 and 1 inclusive.
 * 0 produces a grayscale image, 1 is normal.
 *
 * @hide
 * @deprecated use {@link ColorDisplayManager#setSaturationLevel(int)} instead. The level passed
 * as a parameter here will be rounded to the nearest hundredth.
 */
====>[HIDDEN]<android.hardware.display.DisplayManager: void setSaturationLevel(float)>    ---->    ColorDisplayManager#setSaturationLevel(int)
<android.renderscript.RSSurfaceView: void resume()>
/**
 * @deprecated in API 16
 * Inform the view that the activity is resumed. The owner of this view must
 * call this method when the activity is resumed. Calling this method will
 * recreate the OpenGL display and resume the rendering
 * thread.
 * Must not be called before a renderer has been set.
 */
====>[PUBLIC]<android.renderscript.RSSurfaceView: void resume()>    ---->    
<android.webkit.WebSettings: void setPluginsEnabled(boolean)>
/**
 * Sets whether the WebView should enable plugins. The default is {@code false}.
 *
 * @param flag {@code true} if plugins should be enabled
 * @deprecated This method has been deprecated in favor of
 * {@link #setPluginState}
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}
 */
====>[HIDDEN]<android.webkit.WebSettings: void setPluginsEnabled(boolean)>    ---->    #setPluginState
<android.renderscript.RSTextureView: void setRenderScriptGL(RenderScriptGL)>
/**
 * @deprecated in API 16
 * Set a new RenderScriptGL object.  This also will attach the
 * new object to the TextureView if present.
 *
 * @param rs The new RS object.
 */
====>[PUBLIC]<android.renderscript.RSTextureView: void setRenderScriptGL(RenderScriptGL)>    ---->    
<android.net.ConnectivityManager: Network getProcessDefaultNetwork()>
/**
 * Returns the {@link Network} currently bound to this process via
 * {@link #bindProcessToNetwork}, or {@code null} if no {@link Network} is explicitly bound.
 *
 * @return {@code Network} to which this process is bound, or {@code null}.
 * @deprecated Using this function can lead to other functions throwing
 * {@link IllegalStateException}.  Use {@link #getBoundNetworkForProcess} instead.
 * {@code getBoundNetworkForProcess} is a direct replacement.
 */
====>[PUBLIC]<android.net.ConnectivityManager: Network getProcessDefaultNetwork()>    ---->    #getBoundNetworkForProcess
Inconsistency (Non-Documentation):<android.graphics.BaseCanvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,Paint)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//graphics/java/android/graphics/BaseCanvas.java
<android.graphics.BaseCanvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,Paint)>

====>[PUBLIC]<android.graphics.BaseCanvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,Paint)>    ---->    
<android.telephony.TelephonyManager: void setVoicemailRingtoneUri(PhoneAccountHandle,Uri)>
/**
 * Sets the per-account voicemail ringtone.
 *
 * <p>Requires that the calling app is the default dialer, or has carrier privileges (see
 * {@link #hasCarrierPrivileges}, or has permission
 * {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}.
 *
 * @param phoneAccountHandle The handle for the {@link PhoneAccount} for which to set the
 * voicemail ringtone.
 * @param uri The URI for the ringtone to play when receiving a voicemail from a specific
 * PhoneAccount.
 *
 * @deprecated Use {@link android.provider.Settings#ACTION_CHANNEL_NOTIFICATION_SETTINGS}
 * instead.
 */
====>[PUBLIC]<android.telephony.TelephonyManager: void setVoicemailRingtoneUri(PhoneAccountHandle,Uri)>    ---->    android.provider.Settings#ACTION_CHANNEL_NOTIFICATION_SETTINGS
<android.os.Debug: void resetGlobalAllocCount()>
/**
 * Clears the global count of objects allocated.
 * @see #getGlobalAllocCount()
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void resetGlobalAllocCount()>    ---->    
<android.telephony.SignalStrength: int getDbm()>
/**
 * Get the signal strength as dBm
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrength#getDbm()}. Because the levels vary by technology,
 * this method is misleading and should not be used.
 * @see android.telephony#CellSignalStrength
 * @see android.telephony.SignalStrength#getCellSignalStrengths
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getDbm()>    ---->    android.telephony#CellSignalStrength
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onScreenTurnedOff()>
/**
 * Called when the screen has been turned off.
 *
 * @deprecated use {@link com.android.systemui.keyguard.ScreenLifecycle}.
 */
====>[PUBLIC]<com.android.keyguard.KeyguardUpdateMonitorCallback: void onScreenTurnedOff()>    ---->    com.android.systemui.keyguard.ScreenLifecycle
<android.content.pm.ShortcutInfo.Builder: Builder setTitle(CharSequence)>
/**
 * @hide -- old signature, the internal code still uses it.
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo.Builder: Builder setTitle(CharSequence)>    ---->    
<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder setColor(float,float,float,float)>
/**
 * @deprecated in API 16
 * Sets the color for the vertices that are added after this method call.
 *
 * @param r red component
 * @param g green component
 * @param b blue component
 * @param a alpha component
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder setColor(float,float,float,float)>    ---->    
<android.provider.MediaStore.Images.Thumbnails: void cancelThumbnailRequest(ContentResolver,long,long)>
/**
 * Cancel any outstanding {@link #getThumbnail} requests, causing
 * them to return by throwing a {@link OperationCanceledException}.
 * <p>
 * This method has no effect on
 * {@link ContentResolver#loadThumbnail} calls, since they provide
 * their own {@link CancellationSignal}.
 *
 * @deprecated Callers should migrate to using
 * {@link ContentResolver#loadThumbnail}, since it
 * offers richer control over requested thumbnail sizes
 * and cancellation behavior.
 */
====>[PUBLIC]<android.provider.MediaStore.Images.Thumbnails: void cancelThumbnailRequest(ContentResolver,long,long)>    ---->    
<com.android.server.am.ActivityManagerService: void requestBugReportWithDescription(String,String,int)>
/**
 * @deprecated This method is only used by a few internal components and it will soon be
 * replaced by a proper bug report API (which will be restricted to a few, pre-defined apps).
 * No new code should be calling it.
 */
====>[PUBLIC]<com.android.server.am.ActivityManagerService: void requestBugReportWithDescription(String,String,int)>    ---->    
<android.bluetooth.BluetoothHealth: ParcelFileDescriptor getMainChannelFd(BluetoothDevice,BluetoothHealthAppConfiguration)>
/**
 * Get the file descriptor of the main channel associated with the remote device
 * and application configuration.
 *
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
 *
 * <p> Its the responsibility of the caller to close the ParcelFileDescriptor
 * when done.
 *
 * @param device The remote Bluetooth health device
 * @param config The application configuration
 * @return null on failure, ParcelFileDescriptor on success.
 *
 * @deprecated Health Device Profile (HDP) and MCAP protocol are no longer used. New
 * apps should use Bluetooth Low Energy based solutions such as {@link BluetoothGatt},
 * {@link BluetoothAdapter#listenUsingL2capChannel()(int)}, or
 * {@link BluetoothDevice#createL2capChannel(int)}
 */
====>[PUBLIC]<android.bluetooth.BluetoothHealth: ParcelFileDescriptor getMainChannelFd(BluetoothDevice,BluetoothHealthAppConfiguration)>    ---->    BluetoothGatt
<android.util.proto.ProtoOutputStream: void writeRepeatedInt64(long,long)>
/**
 * Write a single repeated proto "int64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedInt64(long,long)>    ---->    #write
<android.util.proto.ProtoOutputStream: void writeString(long,String)>
/**
 * Write a single proto "string" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeString(long,String)>    ---->    #write
Inconsistency (Non-Documentation):<android.provider.MediaStore.InternalThumbnails: void cancelThumbnail(ContentResolver,Uri)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/provider/MediaStore.java
<android.provider.MediaStore.InternalThumbnails: void cancelThumbnail(ContentResolver,Uri)>
/**
 * This method cancels the thumbnail request so clients waiting for
 * {@link #getThumbnail} will be interrupted and return immediately.
 * Only the original process which made the request can cancel their own
 * requests.
 */
====>[PUBLIC]<android.provider.MediaStore.InternalThumbnails: void cancelThumbnail(ContentResolver,Uri)>    ---->    
<android.view.textservice.SpellCheckerSession: void getSuggestions(TextInfo,int)>
/**
 * Get candidate strings for a substring of the specified text.
 * @param textInfo text metadata for a spell checker
 * @param suggestionsLimit the maximum number of suggestions that will be returned
 * @deprecated use {@link SpellCheckerSession#getSentenceSuggestions(TextInfo[], int)} instead
 */
====>[PUBLIC]<android.view.textservice.SpellCheckerSession: void getSuggestions(TextInfo,int)>    ---->    SpellCheckerSession#getSentenceSuggestions(TextInfo[], int)
<com.android.location.provider.LocationProviderBase: void onEnable()>
/**
 * @deprecated This callback will be invoked once when the provider is created to maintain
 * backwards compatibility with providers not designed for Android Q and above. This method
 * should only be implemented in location providers that need to support SDKs below Android Q.
 * Even in this case, it is usually unnecessary to implement this callback with the correct
 * design. This method may be removed in the future.
 */
====>[PUBLIC]<com.android.location.provider.LocationProviderBase: void onEnable()>    ---->    
<android.hardware.radio.ProgramSelector: int getProgramType()>
/**
 * Type of a radio technology.
 *
 * @return program type.
 * @deprecated use {@link getPrimaryId} instead
 */
====>[PUBLIC]<android.hardware.radio.ProgramSelector: int getProgramType()>    ---->    getPrimaryId
<android.view.inputmethod.InputMethodManager: void showStatusIcon(IBinder,String,int)>
/**
 * @deprecated Use {@link InputMethodService#showStatusIcon(int)} instead. This method was
 * intended for IME developers who should be accessing APIs through the service. APIs in this
 * class are intended for app developers interacting with the IME.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodManager: void showStatusIcon(IBinder,String,int)>    ---->    InputMethodService#showStatusIcon(int)
<android.os.UserHandle: boolean isOwner()>
/**
 * Returns true if this UserHandle refers to the owner user; false otherwise.
 * @return true if this UserHandle refers to the owner user; false otherwise.
 * @hide
 * @deprecated please use {@link #isSystem()} or check for
 * {@link android.content.pm.UserInfo#isPrimary()}
 * {@link android.content.pm.UserInfo#isAdmin()} based on your particular use case.
 */
====>[HIDDEN]<android.os.UserHandle: boolean isOwner()>    ---->    #isSystem()
<android.app.ActionBar: void removeAllTabs()>
/**
 * Remove all tabs from the action bar and deselect the current tab.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: void removeAllTabs()>    ---->    
<android.net.wifi.WifiManager: int addNetwork(WifiConfiguration)>
/**
 * Add a new network description to the set of configured networks.
 * The {@code networkId} field of the supplied configuration object
 * is ignored.
 * <p/>
 * The new network will be marked DISABLED by default. To enable it,
 * called {@link #enableNetwork}.
 *
 * @param config the set of variables that describe the configuration,
 * contained in a {@link WifiConfiguration} object.
 * If the {@link WifiConfiguration} has an Http Proxy set
 * the calling app must be System, or be provisioned as the Profile or Device Owner.
 * @return the ID of the newly created network description. This is used in
 * other operations to specified the network to be acted upon.
 * Returns {@code -1} on failure.
 *
 * @deprecated
 * a) See {@link WifiNetworkSpecifier.Builder#build()} for new
 * mechanism to trigger connection to a Wi-Fi network.
 * b) See {@link #addNetworkSuggestions(List)},
 * {@link #removeNetworkSuggestions(List)} for new API to add Wi-Fi networks for consideration
 * when auto-connecting to wifi.
 * <b>Compatibility Note:</b> For applications targeting
 * {@link android.os.Build.VERSION_CODES#Q} or above, this API will always return {@code -1}.
 */
====>[PUBLIC]<android.net.wifi.WifiManager: int addNetwork(WifiConfiguration)>    ---->    WifiNetworkSpecifier.Builder#build()
<android.webkit.CookieSyncManager: void resetSync()>
/**
 * resetSync() resets sync manager's timer.
 * @deprecated Calling resetSync is no longer necessary as the WebView automatically
 * syncs cookies.
 */
====>[PUBLIC]<android.webkit.CookieSyncManager: void resetSync()>    ---->    
<android.net.ConnectivityManager: NetworkInfo getActiveNetworkInfo()>
/**
 * Returns details about the currently active default data network. When
 * connected, this network is the default route for outgoing connections.
 * You should always check {@link NetworkInfo#isConnected()} before initiating
 * network traffic. This may return {@code null} when there is no default
 * network.
 * Note that if the default network is a VPN, this method will return the
 * NetworkInfo for one of its underlying networks instead, or null if the
 * VPN agent did not specify any. Apps interested in learning about VPNs
 * should use {@link #getNetworkInfo(android.net.Network)} instead.
 *
 * @return a {@link NetworkInfo} object for the current default network
 * or {@code null} if no default network is currently active
 * @deprecated See {@link NetworkInfo}.
 */
====>[PUBLIC]<android.net.ConnectivityManager: NetworkInfo getActiveNetworkInfo()>    ---->    NetworkInfo
<android.webkit.PluginList: void clear()>
/**
 * Clears the plugin list.
 *
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.PluginList: void clear()>    ---->    
<android.app.admin.DevicePolicyManager: void clearProfileOwner(ComponentName)>
/**
 * Clears the active profile owner. The caller must be the profile owner of this user, otherwise
 * a SecurityException will be thrown. This method is not available to managed profile owners.
 * <p>
 * While some policies previously set by the profile owner will be cleared by this method, it is
 * a best-effort process and some other policies will still remain in place after the profile
 * owner is cleared.
 *
 * @param admin The component to remove as the profile owner.
 * @throws SecurityException if {@code admin} is not an active profile owner, or the method is
 * being called from a managed profile.
 *
 * @deprecated This method is expected to be used for testing purposes only. The profile owner
 * will lose control of the user and its data after calling it. In order to protect any
 * sensitive data that remains on this user, it is advised that the profile owner deletes it
 * instead of calling this method. See {@link #wipeData(int)}.
 */
====>[PUBLIC]<android.app.admin.DevicePolicyManager: void clearProfileOwner(ComponentName)>    ---->    d for testing purposes only. The profile owner  will lose control of the user and its data after calling it. In order to protect any  sensitive data that remains on this user, it is advised that the profile owner deletes it
<android.app.Activity: void setProgressBarIndeterminateVisibility(boolean)>
/**
 * Sets the visibility of the indeterminate progress bar in the title.
 * <p>
 * In order for the progress bar to be shown, the feature must be requested
 * via {@link #requestWindowFeature(int)}.
 *
 * @param visible Whether to show the progress bars in the title.
 * @deprecated No longer supported starting in API 21.
 */
====>[PUBLIC]<android.app.Activity: void setProgressBarIndeterminateVisibility(boolean)>    ---->    
<android.app.KeyguardManager: void exitKeyguardSecurely(OnKeyguardExitResult)>
/**
 * Exit the keyguard securely.  The use case for this api is that, after
 * disabling the keyguard, your app, which was granted permission to
 * disable the keyguard and show a limited amount of information deemed
 * safe without the user getting past the keyguard, needs to navigate to
 * something that is not safe to view without getting past the keyguard.
 *
 * This will, if the keyguard is secure, bring up the unlock screen of
 * the keyguard.
 *
 * @param callback Lets you know whether the operation was successful and
 * it is safe to launch anything that would normally be considered safe
 * once the user has gotten past the keyguard.
 *
 * @deprecated Use {@link LayoutParams#FLAG_DISMISS_KEYGUARD}
 * and/or {@link LayoutParams#FLAG_SHOW_WHEN_LOCKED}
 * instead; this allows you to seamlessly hide the keyguard as your application
 * moves in and out of the foreground and does not require that any special
 * permissions be requested.
 */
====>[PUBLIC]<android.app.KeyguardManager: void exitKeyguardSecurely(OnKeyguardExitResult)>    ---->    LayoutParams#FLAG_DISMISS_KEYGUARD
<android.os.Vibrator: void vibrate(long)>
/**
 * Vibrate constantly for the specified period of time.
 *
 * @param milliseconds The number of milliseconds to vibrate.
 *
 * @deprecated Use {@link #vibrate(VibrationEffect)} instead.
 */
====>[PUBLIC]<android.os.Vibrator: void vibrate(long)>    ---->    #vibrate(VibrationEffect)
<android.renderscript.Mesh.AllocationBuilder: int getCurrentVertexTypeIndex()>
/**
 * @deprecated in API 16
 * @return internal index of the last vertex buffer type added to
 * builder
 */
====>[PUBLIC]<android.renderscript.Mesh.AllocationBuilder: int getCurrentVertexTypeIndex()>    ---->    
<android.transition.TransitionValues: void <init>()>
/**
 * @deprecated Use {@link #TransitionValues(View)} instead
 */
====>[PUBLIC]<android.transition.TransitionValues: void <init>()>    ---->    #TransitionValues(View)
<android.app.ActionBar: void removeTabAt(int)>
/**
 * Remove a tab from the action bar. If the removed tab was selected it will be deselected
 * and another tab will be selected if present.
 *
 * @param position Position of the tab to remove
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: void removeTabAt(int)>    ---->    
<android.app.ActivityManager.TaskDescription: void <init>(String,Bitmap)>
/**
 * Creates the TaskDescription to the specified values.
 *
 * @param label A label and description of the current state of this activity.
 * @param icon An icon that represents the current state of this activity.
 * @deprecated use TaskDescription constructor with icon resource instead
 */
====>[PUBLIC]<android.app.ActivityManager.TaskDescription: void <init>(String,Bitmap)>    ---->    TaskDescription constructor with icon resource
<android.renderscript.Mesh.AllocationBuilder: int getCurrentIndexSetIndex()>
/**
 * @deprecated in API 16
 * @return internal index of the last index set added to the
 * builder
 */
====>[PUBLIC]<android.renderscript.Mesh.AllocationBuilder: int getCurrentIndexSetIndex()>    ---->    
<android.app.admin.DevicePolicyManager: String getApplicationRestrictionsManagingPackage(ComponentName)>
/**
 * Called by a profile owner or device owner to retrieve the application restrictions managing
 * package for the current user, or {@code null} if none is set. If there are multiple
 * delegates this function will return one of them.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @return The package name allowed to manage application restrictions on the current user, or
 * {@code null} if none is set.
 * @throws SecurityException if {@code admin} is not a device or profile owner.
 *
 * @deprecated From {@link android.os.Build.VERSION_CODES#O}. Use {@link #getDelegatePackages}
 * with the {@link #DELEGATION_APP_RESTRICTIONS} scope instead.
 */
====>[PUBLIC]<android.app.admin.DevicePolicyManager: String getApplicationRestrictionsManagingPackage(ComponentName)>    ---->    #getDelegatePackages
<android.util.proto.ProtoOutputStream: void writeObject(long,byte[])>
/**
 * Write an object that has already been flattend.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeObject(long,byte[])>    ---->    #write
<android.webkit.WebView: void onChildViewAdded(View,View)>
/**
 * @deprecated WebView no longer needs to implement
 * ViewGroup.OnHierarchyChangeListener.  This method does nothing now.
 */
====>[HIDDEN]<android.webkit.WebView: void onChildViewAdded(View,View)>    ---->    
<android.webkit.WebView: boolean overlayHorizontalScrollbar()>
/**
 * Gets whether horizontal scrollbar has overlay style.
 *
 * @deprecated This method is now obsolete.
 * @return {@code true}
 */
====>[PUBLIC]<android.webkit.WebView: boolean overlayHorizontalScrollbar()>    ---->    
<android.telephony.PhoneNumberUtils: boolean isPotentialEmergencyNumber(String)>
/**
 * Checks if given number might *potentially* result in
 * a call to an emergency service on the current network.
 *
 * Specifically, this method will return true if the specified number
 * is an emergency number according to the list managed by the RIL or
 * SIM, *or* if the specified number simply starts with the same
 * digits as any of the emergency numbers listed in the RIL / SIM.
 *
 * This method is intended for internal use by the phone app when
 * deciding whether to allow ACTION_CALL intents from 3rd party apps
 * (where we're required to *not* allow emergency calls to be placed.)
 *
 * @param number the number to look up.
 * @return true if the number is in the list of emergency numbers
 * listed in the RIL / SIM, *or* if the number starts with the
 * same digits as any of those emergency numbers.
 *
 * @deprecated Please use {@link TelephonyManager#isPotentialEmergencyNumber(String)}
 * instead.
 *
 * @hide
 */
====>[HIDDEN]<android.telephony.PhoneNumberUtils: boolean isPotentialEmergencyNumber(String)>    ---->    TelephonyManager#isPotentialEmergencyNumber(String)
<android.speech.tts.TextToSpeech: int addEarcon(String,String)>
/**
 * Adds a mapping between a string of text and a sound file.
 * Use this to add custom earcons.
 *
 * @see #playEarcon(String, int, HashMap)
 *
 * @param earcon
 * The name of the earcon.
 * Example: <code>"[tick]"</code>
 * @param filename
 * The full path to the sound file (for example:
 * "/sdcard/mysounds/tick.wav")
 *
 * @return Code indicating success or failure. See {@link #ERROR} and {@link #SUCCESS}.
 *
 * @deprecated As of API level 21, replaced by
 * {@link #addEarcon(String, File)}.
 */
====>[PUBLIC]<android.speech.tts.TextToSpeech: int addEarcon(String,String)>    ---->    #addEarcon(String, File)
<android.media.AudioTrack: void removeOnRoutingChangedListener(OnRoutingChangedListener)>
/**
 * Removes an {@link OnRoutingChangedListener} which has been previously added
 * to receive rerouting notifications.
 * @param listener The previously added {@link OnRoutingChangedListener} interface to remove.
 * @deprecated users should switch to the general purpose
 * {@link AudioRouting.OnRoutingChangedListener} class instead.
 */
====>[PUBLIC]<android.media.AudioTrack: void removeOnRoutingChangedListener(OnRoutingChangedListener)>    ---->    AudioRouting.OnRoutingChangedListener
<android.app.job.JobWorkItem: long getEstimatedNetworkBytes()>
/**
 * @deprecated replaced by {@link #getEstimatedNetworkDownloadBytes()} and
 * {@link #getEstimatedNetworkUploadBytes()}.
 * @removed
 */
====>[HIDDEN]<android.app.job.JobWorkItem: long getEstimatedNetworkBytes()>    ---->    #getEstimatedNetworkDownloadBytes()
<android.bluetooth.BluetoothHealth: boolean disconnectChannel(BluetoothDevice,BluetoothHealthAppConfiguration,int)>
/**
 * Disconnect a connected health channel.
 * This is an asynchronous call. If this function returns true, the callback
 * associated with the application configuration will be called.
 *
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
 *
 * @param device The remote Bluetooth device.
 * @param config The application configuration which has been registered using {@link
 * #registerSinkAppConfiguration(String, int, BluetoothHealthCallback) }
 * @param channelId The channel id associated with the channel
 * @return If true, the callback associated with the application config will be called.
 *
 * @deprecated Health Device Profile (HDP) and MCAP protocol are no longer used. New
 * apps should use Bluetooth Low Energy based solutions such as {@link BluetoothGatt},
 * {@link BluetoothAdapter#listenUsingL2capChannel()(int)}, or
 * {@link BluetoothDevice#createL2capChannel(int)}
 */
====>[PUBLIC]<android.bluetooth.BluetoothHealth: boolean disconnectChannel(BluetoothDevice,BluetoothHealthAppConfiguration,int)>    ---->    BluetoothGatt
<android.util.proto.ProtoOutputStream: void writeRepeatedFloat(long,float)>
/**
 * Write a single repeated proto "float" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedFloat(long,float)>    ---->    #write
<android.location.Location: void removeSpeed()>
/**
 * Remove the speed from this location.
 *
 * <p>Following this call {@link #hasSpeed} will return false,
 * and {@link #getSpeed} will return 0.0.
 *
 * @deprecated use a new Location object for location updates.
 */
====>[PUBLIC]<android.location.Location: void removeSpeed()>    ---->    
<android.hardware.radio.RadioTuner.Callback: void onConfigurationChanged(BandConfig)>
/**
 * onConfigurationChanged() is called upon successful completion of
 * {@link RadioManager#openTuner(int, RadioManager.BandConfig, boolean, Callback, Handler)}
 * or {@link RadioTuner#setConfiguration(RadioManager.BandConfig)}
 *
 * @deprecated Only applicable for HAL 1.x.
 */
====>[PUBLIC]<android.hardware.radio.RadioTuner.Callback: void onConfigurationChanged(BandConfig)>    ---->    
<android.database.sqlite.SQLiteDatabase: void markTableSyncable(String,String)>
/**
 * Mark this table as syncable. When an update occurs in this table the
 * _sync_dirty field will be set to ensure proper syncing operation.
 *
 * @param table the table to mark as syncable
 * @param deletedTable The deleted table that corresponds to the
 * syncable table
 * @deprecated This method no longer serves any useful purpose and has been deprecated.
 */
====>[PUBLIC]<android.database.sqlite.SQLiteDatabase: void markTableSyncable(String,String)>    ---->    
<android.app.ActionBar: void addTab(Tab,boolean)>
/**
 * Add a tab for use in tabbed navigation mode. The tab will be added at the end of the list.
 *
 * @param tab Tab to add
 * @param setSelected True if the added tab should become the selected tab.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: void addTab(Tab,boolean)>    ---->    
<android.provider.Contacts.People: Uri addToMyContactsGroup(ContentResolver,long)>
/**
 * Adds a person to the My Contacts group.
 *
 * @param resolver the resolver to use
 * @param personId the person to add to the group
 * @return the URI of the group membership row
 * @throws IllegalStateException if the My Contacts group can't be found
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.People: Uri addToMyContactsGroup(ContentResolver,long)>    ---->    android.provider.ContactsContract
<android.webkit.PluginData: int getStatusCode()>
/**
 * Returns the HTTP status code for the response.
 *
 * @return The HTTP statue code, e.g 200.
 *
 * @hide
 * @deprecated This class was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.PluginData: int getStatusCode()>    ---->    
<android.database.AbstractWindowedCursor: boolean isBlob(int)>
/**
 * @deprecated Use {@link #getType}
 */
====>[PUBLIC]<android.database.AbstractWindowedCursor: boolean isBlob(int)>    ---->    #getType
<android.renderscript.RSTextureView: RenderScriptGL getRenderScriptGL()>
/**
 * @deprecated in API 16
 * Returns the previously set RenderScriptGL object.
 *
 * @return RenderScriptGL
 */
====>[PUBLIC]<android.renderscript.RSTextureView: RenderScriptGL getRenderScriptGL()>    ---->    
<android.graphics.ImageDecoder: boolean getRequireUnpremultiplied()>
/**
 * @removed
 * @deprecated Renamed to {@link #isUnpremultipliedRequired}.
 */
====>[HIDDEN]<android.graphics.ImageDecoder: boolean getRequireUnpremultiplied()>    ---->    #isUnpremultipliedRequired
<android.telephony.euicc.DownloadableSubscription: void setAccessRules(UiccAccessRule[])>
/**
 * @hide
 * @deprecated - Do not use.
 */
====>[HIDDEN]<android.telephony.euicc.DownloadableSubscription: void setAccessRules(UiccAccessRule[])>    ---->    
<android.os.Environment: File getUserSystemDirectory(int)>
/**
 * Return the system directory for a user. This is for use by system
 * services to store files relating to the user. This directory will be
 * automatically deleted when the user is removed.
 *
 * @deprecated This directory is valid and still exists, but but callers
 * should <em>strongly</em> consider switching to using either
 * {@link #getDataSystemCeDirectory(int)} or
 * {@link #getDataSystemDeDirectory(int)}, both of which support
 * fast user wipe.
 * @hide
 */
====>[HIDDEN]<android.os.Environment: File getUserSystemDirectory(int)>    ---->    #getDataSystemCeDirectory(int)
<android.telephony.SignalStrength: int getWcdmaAsuLevel()>
/**
 * Get the WCDMA signal level as an ASU value between 0-96, 255 is unknown
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthWcdma#getAsuLevel}.
 *
 * @see android.telephony#CellSignalStrengthWcdma
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getWcdmaAsuLevel()>    ---->    android.telephony#CellSignalStrengthWcdma
<android.view.inputmethod.InputMethodManager: void hideStatusIcon(IBinder)>
/**
 * @deprecated Use {@link InputMethodService#hideStatusIcon()} instead. This method was
 * intended for IME developers who should be accessing APIs through the service. APIs in
 * this class are intended for app developers interacting with the IME.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodManager: void hideStatusIcon(IBinder)>    ---->    InputMethodService#hideStatusIcon()
<android.test.TouchUtils: int dragViewBy(ActivityInstrumentationTestCase,View,int,int,int)>
/**
 * Simulate touching a view and dragging it by the specified amount.
 *
 * @param test The test case that is being run
 * @param v The view that should be dragged
 * @param gravity Which part of the view to use for the initial down event. A combination of
 * (TOP, CENTER_VERTICAL, BOTTOM) and (LEFT, CENTER_HORIZONTAL, RIGHT)
 * @param deltaX Amount to drag horizontally in pixels
 * @param deltaY Amount to drag vertically in pixels
 *
 * @return distance in pixels covered by the drag
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: int dragViewBy(ActivityInstrumentationTestCase,View,int,int,int)>    ---->    android.test.ActivityInstrumentationTestCase2
<android.webkit.WebSettings: int getUserAgent()>
/**
 * Gets the user-agent as an integer code.
 * <ul>
 * <li>-1 means the WebView is using a custom user-agent string set with
 * {@link #setUserAgentString}</li>
 * <li>0 means the WebView should use an Android user-agent string</li>
 * <li>1 means the WebView should use a desktop user-agent string</li>
 * </ul>
 *
 * @return the integer code for the user-agent string
 * @see #setUserAgent
 * @deprecated Please use {@link #getUserAgentString} instead.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebSettings: int getUserAgent()>    ---->    #getUserAgentString
<android.content.ContentResolver: void startSync(Uri,Bundle)>
/**
 * Start an asynchronous sync operation. If you want to monitor the progress
 * of the sync you may register a SyncObserver. Only values of the following
 * types may be used in the extras bundle:
 * <ul>
 * <li>Integer</li>
 * <li>Long</li>
 * <li>Boolean</li>
 * <li>Float</li>
 * <li>Double</li>
 * <li>String</li>
 * <li>Account</li>
 * <li>null</li>
 * </ul>
 *
 * @param uri the uri of the provider to sync or null to sync all providers.
 * @param extras any extras to pass to the SyncAdapter.
 * @deprecated instead use
 * {@link #requestSync(android.accounts.Account, String, android.os.Bundle)}
 */
====>[PUBLIC]<android.content.ContentResolver: void startSync(Uri,Bundle)>    ---->    #requestSync(android.accounts.Account, String, android.os.Bundle)
<android.content.ClipboardManager: boolean hasText()>
/**
 * @deprecated Use {@link #hasPrimaryClip()} instead.
 */
====>[PUBLIC]<android.content.ClipboardManager: boolean hasText()>    ---->    #hasPrimaryClip()
<android.view.ViewConfiguration: int getFadingEdgeLength()>
/**
 * @return the length of the fading edges in dips
 *
 * @deprecated Use {@link #getScaledFadingEdgeLength()} instead.
 */
====>[PUBLIC]<android.view.ViewConfiguration: int getFadingEdgeLength()>    ---->    #getScaledFadingEdgeLength()
<android.util.proto.ProtoOutputStream: void writeRepeatedSInt64(long,long)>
/**
 * Write a single repeated proto "sint64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedSInt64(long,long)>    ---->    #write
<android.graphics.drawable.DrawableContainer.DrawableContainerState: Drawable[] getChildren()>

====>[PUBLIC]<android.graphics.drawable.DrawableContainer.DrawableContainerState: Drawable[] getChildren()>    ---->    #getChild
<android.media.ThumbnailUtils: Bitmap createImageThumbnail(String,int)>
/**
 * Create a thumbnail for given image file.
 *
 * @param filePath The image file.
 * @param kind The desired thumbnail kind, such as
 * {@link android.provider.MediaStore.Images.Thumbnails#MINI_KIND}.
 * @deprecated Callers should migrate to using
 * {@link #createImageThumbnail(File, Size, CancellationSignal)},
 * as it offers more control over resizing and cancellation.
 */
====>[PUBLIC]<android.media.ThumbnailUtils: Bitmap createImageThumbnail(String,int)>    ---->    #createImageThumbnail(File, Size, CancellationSignal)
<android.view.inputmethod.InputMethodManager: boolean switchToNextInputMethod(IBinder,boolean)>
/**
 * Force switch to the next input method and subtype. If there is no IME enabled except
 * current IME and subtype, do nothing.
 * @param imeToken Supplies the identifying token given to an input method when it was started,
 * which allows it to perform this operation on itself.
 * @param onlyCurrentIme if true, the framework will find the next subtype which
 * belongs to the current IME
 * @return true if the current input method and subtype was successfully switched to the next
 * input method and subtype.
 * @deprecated Use {@link InputMethodService#switchToNextInputMethod(boolean)} instead. This
 * method was intended for IME developers who should be accessing APIs through the service.
 * APIs in this class are intended for app developers interacting with the IME.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodManager: boolean switchToNextInputMethod(IBinder,boolean)>    ---->    InputMethodService#switchToNextInputMethod(boolean)
<android.app.Activity: void onPrepareDialog(int,Dialog)>
/**
 * @deprecated Old no-arguments version of
 * {@link #onPrepareDialog(int, Dialog, Bundle)}.
 */
====>[PUBLIC]<android.app.Activity: void onPrepareDialog(int,Dialog)>    ---->    #onPrepareDialog(int, Dialog, Bundle)
<android.view.Display: int getHeight()>
/**
 * @deprecated Use {@link #getSize(Point)} instead.
 */
====>[PUBLIC]<android.view.Display: int getHeight()>    ---->    #getSize(Point)
<android.webkit.WebViewDelegate: void callDrawGlFunction(Canvas,long)>
/**
 * Calls the function specified with the nativeDrawGLFunctor functor pointer. This
 * functionality is used by the WebView for calling into their renderer from the
 * framework display lists.
 *
 * @param canvas a hardware accelerated canvas (see {@link Canvas#isHardwareAccelerated()})
 * @param nativeDrawGLFunctor the pointer to the native functor that implements
 * system/core/include/utils/Functor.h
 * @throws IllegalArgumentException if the canvas is not hardware accelerated
 * @deprecated Use {@link #drawWebViewFunctor(Canvas, int)}
 */
====>[PUBLIC]<android.webkit.WebViewDelegate: void callDrawGlFunction(Canvas,long)>    ---->    #drawWebViewFunctor(Canvas, int)
<android.graphics.BaseRecordingCanvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,Paint)>
/**
 * @deprecated checkstyle
 */
====>[PUBLIC]<android.graphics.BaseRecordingCanvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,Paint)>    ---->    
<android.graphics.BaseRecordingCanvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,Paint)>
/**
 * @deprecated checkstyle
 */
====>[PUBLIC]<android.graphics.BaseRecordingCanvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,Paint)>    ---->    
<android.view.KeyEvent: int getKeyboardDevice()>
/**
 * Renamed to {@link #getDeviceId}.
 *
 * @hide
 * @deprecated use {@link #getDeviceId()} instead.
 */
====>[HIDDEN]<android.view.KeyEvent: int getKeyboardDevice()>    ---->    #getDeviceId()
<android.media.AudioManager: void registerMediaButtonEventReceiver(PendingIntent)>
/**
 * Register a component to be the sole receiver of MEDIA_BUTTON intents.  This is like
 * {@link #registerMediaButtonEventReceiver(android.content.ComponentName)}, but allows
 * the buttons to go to any PendingIntent.  Note that you should only use this form if
 * you know you will continue running for the full time until unregistering the
 * PendingIntent.
 * @param eventReceiver target that will receive media button intents.  The PendingIntent
 * will be sent an {@link Intent#ACTION_MEDIA_BUTTON} event when a media button action
 * occurs, with {@link Intent#EXTRA_KEY_EVENT} added and holding the key code of the
 * media button that was pressed.
 * @deprecated Use {@link MediaSession#setMediaButtonReceiver(PendingIntent)} instead.
 */
====>[PUBLIC]<android.media.AudioManager: void registerMediaButtonEventReceiver(PendingIntent)>    ---->    MediaSession#setMediaButtonReceiver(PendingIntent)
<com.android.internal.widget.RecyclerView.ItemDecoration: void getItemOffsets(Rect,int,RecyclerView)>
/**
 * @deprecated
 * Use {@link #getItemOffsets(Rect, View, RecyclerView, State)}
 */
====>[PUBLIC]<com.android.internal.widget.RecyclerView.ItemDecoration: void getItemOffsets(Rect,int,RecyclerView)>    ---->    #getItemOffsets(Rect, View, RecyclerView, State)
<android.app.admin.DevicePolicyManager: UserHandle createAndInitializeUser(ComponentName,String,String,ComponentName,Bundle)>
/**
 * Called by a device owner to create a user with the specified name. The UserHandle returned
 * by this method should not be persisted as user handles are recycled as users are removed and
 * created. If you need to persist an identifier for this user, use
 * {@link UserManager#getSerialNumberForUser}.  The new user will be started in the background
 * immediately.
 *
 * <p> profileOwnerComponent is the {@link DeviceAdminReceiver} to be the profile owner as well
 * as registered as an active admin on the new user.  The profile owner package will be
 * installed on the new user if it already is installed on the device.
 *
 * <p>If the optionalInitializeData is not null, then the extras will be passed to the
 * profileOwnerComponent when onEnable is called.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param name the user's name
 * @param ownerName the human readable name of the organisation associated with this DPM.
 * @param profileOwnerComponent The {@link DeviceAdminReceiver} that will be an active admin on
 * the user.
 * @param adminExtras Extras that will be passed to onEnable of the admin receiver
 * on the new user.
 * @see UserHandle
 * @return the {@link android.os.UserHandle} object for the created user, or {@code null} if the
 * user could not be created.
 *
 * @deprecated From {@link android.os.Build.VERSION_CODES#M}
 * @removed From {@link android.os.Build.VERSION_CODES#N}
 */
====>[HIDDEN]<android.app.admin.DevicePolicyManager: UserHandle createAndInitializeUser(ComponentName,String,String,ComponentName,Bundle)>    ---->    
<com.android.internal.widget.LockPatternUtils: boolean saveLockPassword(String,String,int,int)>
/**
 * Save a lock password.  Does not ensure that the password is as good
 * as the requested mode, but will adjust the mode to be as good as the
 * password.
 * @param password The password to save
 * @param savedPassword The previously saved lock password, or null if none
 * @param requestedQuality {@see DevicePolicyManager#getPasswordQuality(
 * android.content.ComponentName)}
 * @param userHandle The userId of the user to change the password for
 *
 * @return whether this was successful or not.
 *
 * @deprecated Pass password as a byte array
 */
====>[PUBLIC]<com.android.internal.widget.LockPatternUtils: boolean saveLockPassword(String,String,int,int)>    ---->    
Inconsistency (Non-Documentation):<com.android.server.pm.PackageManagerService: boolean isPermissionEnforced(String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//services/core/java/com/android/server/pm/PackageManagerService.java
<com.android.server.pm.PackageManagerService: boolean isPermissionEnforced(String)>

====>[PUBLIC]<com.android.server.pm.PackageManagerService: boolean isPermissionEnforced(String)>    ---->    
<android.content.res.Configuration: void makeDefault()>
/**
 * {@hide}
 */
====>[HIDDEN]<android.content.res.Configuration: void makeDefault()>    ---->    
<android.renderscript.Font: Font createFromFile(RenderScript,Resources,String,float)>
/**
 * @deprecated in API 16
 * Takes a specific file name as an argument
 */
====>[PUBLIC]<android.renderscript.Font: Font createFromFile(RenderScript,Resources,String,float)>    ---->    
<android.app.Activity: Cursor managedQuery(Uri,String[],String,String[],String)>
/**
 * Wrapper around
 * {@link ContentResolver#query(android.net.Uri , String[], String, String[], String)}
 * that gives the resulting {@link Cursor} to call
 * {@link #startManagingCursor} so that the activity will manage its
 * lifecycle for you.
 *
 * <em>If you are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}
 * or later, consider instead using {@link LoaderManager} instead, available
 * via {@link #getLoaderManager()}.</em>
 *
 * <p><strong>Warning:</strong> Do not call {@link Cursor#close()} on a cursor obtained using
 * this method, because the activity will do that for you at the appropriate time. However, if
 * you call {@link #stopManagingCursor} on a cursor from a managed query, the system <em>will
 * not</em> automatically close the cursor and, in that case, you must call
 * {@link Cursor#close()}.</p>
 *
 * @param uri The URI of the content provider to query.
 * @param projection List of columns to return.
 * @param selection SQL WHERE clause.
 * @param selectionArgs The arguments to selection, if any ?s are pesent
 * @param sortOrder SQL ORDER BY clause.
 *
 * @return The Cursor that was returned by query().
 *
 * @see ContentResolver#query(android.net.Uri , String[], String, String[], String)
 * @see #startManagingCursor
 *
 * @deprecated Use {@link CursorLoader} instead.
 */
====>[PUBLIC]<android.app.Activity: Cursor managedQuery(Uri,String[],String,String[],String)>    ---->    CursorLoader
<android.webkit.WebView: void setHttpAuthUsernamePassword(String,String,String,String)>
/**
 * Stores HTTP authentication credentials for a given host and realm to the {@link WebViewDatabase}
 * instance.
 *
 * @param host the host to which the credentials apply
 * @param realm the realm to which the credentials apply
 * @param username the username
 * @param password the password
 * @deprecated Use {@link WebViewDatabase#setHttpAuthUsernamePassword} instead
 */
====>[PUBLIC]<android.webkit.WebView: void setHttpAuthUsernamePassword(String,String,String,String)>    ---->    WebViewDatabase#setHttpAuthUsernamePassword
Inconsistency (Non-Documentation):<android.content.ContextWrapper: void removeStickyBroadcastAsUser(Intent,UserHandle)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/content/ContextWrapper.java
<android.content.ContextWrapper: void removeStickyBroadcastAsUser(Intent,UserHandle)>

====>[PUBLIC]<android.content.ContextWrapper: void removeStickyBroadcastAsUser(Intent,UserHandle)>    ---->    
<android.util.proto.ProtoOutputStream: void writeRepeatedFixed64(long,long)>
/**
 * Write a single repeated proto "fixed64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedFixed64(long,long)>    ---->    #write
<android.telephony.TelephonyManager: boolean isIdle()>
/**
 * @deprecated Use {@link android.telecom.TelecomManager#isInCall} instead
 * @hide
 */
====>[HIDDEN]<android.telephony.TelephonyManager: boolean isIdle()>    ---->    android.telecom.TelecomManager#isInCall
<android.location.GnssMeasurement: long getCarrierCycles()>
/**
 * The number of full carrier cycles between the satellite and the receiver.
 *
 * <p>The reference frequency is given by the value of {@link #getCarrierFrequencyHz()}.
 *
 * <p>The value is only available if {@link #hasCarrierCycles()} is {@code true}.
 *
 * @deprecated use {@link #getAccumulatedDeltaRangeMeters()} instead.
 */
====>[PUBLIC]<android.location.GnssMeasurement: long getCarrierCycles()>    ---->    #getAccumulatedDeltaRangeMeters()
<android.os.WorkSource: WorkSource addReturningNewbs(WorkSource)>
/**
 * Legacy API: DO NOT USE. Only in use from unit tests.
 *
 * @hide
 * @deprecated meant for unit testing use only. Will be removed in a future API revision.
 */
====>[HIDDEN]<android.os.WorkSource: WorkSource addReturningNewbs(WorkSource)>    ---->    
<android.app.Activity: void onAttachFragment(Fragment)>
/**
 * Called when a Fragment is being attached to this activity, immediately
 * after the call to its {@link Fragment#onAttach Fragment.onAttach()}
 * method and before {@link Fragment#onCreate Fragment.onCreate()}.
 *
 * @deprecated Use {@link
 * android.support.v4.app.FragmentActivity#onAttachFragment(android.support.v4.app.Fragment)}
 */
====>[PUBLIC]<android.app.Activity: void onAttachFragment(Fragment)>    ---->    android.support.v4.app.FragmentActivity#onAttachFragment(android.support.v4.app.Fragment)
<android.telecom.StatusHints: ComponentName getPackageName()>
/**
 * @return A package used to load the icon.
 *
 * @hide
 */
====>[HIDDEN]<android.telecom.StatusHints: ComponentName getPackageName()>    ---->    
<android.graphics.Canvas: boolean clipPath(Path,Op)>
/**
 * Modify the current clip with the specified path.
 *
 * @param path The path to operate on the current clip
 * @param op   How the clip is modified
 * @return     true if the resulting is non-empty
 *
 * @deprecated Region.Op values other than {@link Region.Op#INTERSECT} and
 * {@link Region.Op#DIFFERENCE} have the ability to expand the clip. The canvas clipping APIs
 * are intended to only expand the clip as a result of a restore operation. This enables a view
 * parent to clip a canvas to clearly define the maximal drawing area of its children. The
 * recommended alternative calls are {@link #clipPath(Path)} and
 * {@link #clipOutPath(Path)};
 *
 * As of API Level API level {@value Build.VERSION_CODES#P} only {@link Region.Op#INTERSECT} and
 * {@link Region.Op#DIFFERENCE} are valid Region.Op parameters.
 */
====>[PUBLIC]<android.graphics.Canvas: boolean clipPath(Path,Op)>    ---->    Region.Op#INTERSECT
<com.android.internal.logging.MetricsLogger: void visibility(Context,int,int)>
/**
 * @deprecated because untestable; use {@link #visibility(int, int)}
 */
====>[PUBLIC]<com.android.internal.logging.MetricsLogger: void visibility(Context,int,int)>    ---->    #visibility(int, int)
<android.widget.OverScroller: void setFinalX(int)>
/**
 * Sets the final position (X) for this scroller.
 *
 * @param newX The new X offset as an absolute distance from the origin.
 * @see #extendDuration(int)
 * @see #setFinalY(int)
 *
 * @hide Pending removal once nothing depends on it
 * @deprecated OverScroller's final position may change during an animation.
 * Instead of setting a new final position and extending
 * the duration of an existing scroll, use startScroll
 * to begin a new animation.
 */
====>[HIDDEN]<android.widget.OverScroller: void setFinalX(int)>    ---->    
<android.webkit.WebSettings: boolean getUseDoubleTree()>
/**
 * Controlled a rendering optimization that is no longer present. Setting
 * it now has no effect.
 *
 * @deprecated This setting now has no effect.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebSettings: boolean getUseDoubleTree()>    ---->    
<android.renderscript.RSTextureView: void destroyRenderScriptGL()>
/**
 * @deprecated in API 16
 * Destroy the RenderScriptGL object associated with this
 * TextureView.
 */
====>[PUBLIC]<android.renderscript.RSTextureView: void destroyRenderScriptGL()>    ---->    
<android.database.ContentObservable: void dispatchChange(boolean)>
/**
 * Invokes {@link ContentObserver#dispatchChange(boolean)} on each observer.
 * <p>
 * If <code>selfChange</code> is true, only delivers the notification
 * to the observer if it has indicated that it wants to receive self-change
 * notifications by implementing {@link ContentObserver#deliverSelfNotifications}
 * to return true.
 * </p>
 *
 * @param selfChange True if this is a self-change notification.
 *
 * @deprecated Use {@link #dispatchChange(boolean, Uri)} instead.
 */
====>[PUBLIC]<android.database.ContentObservable: void dispatchChange(boolean)>    ---->    #dispatchChange(boolean, Uri)
<android.graphics.ImageDecoder: ImageDecoder setResize(int)>
/**
 * @removed
 * @deprecated Renamed to {@link #setTargetSampleSize}.
 */
====>[HIDDEN]<android.graphics.ImageDecoder: ImageDecoder setResize(int)>    ---->    #setTargetSampleSize
<android.widget.RemoteViews: void setRemoteAdapter(int,ArrayList<RemoteViews>,int)>
/**
 * Creates a simple Adapter for the viewId specified. The viewId must point to an AdapterView,
 * ie. {@link ListView}, {@link GridView}, {@link StackView} or {@link AdapterViewAnimator}.
 * This is a simpler but less flexible approach to populating collection widgets. Its use is
 * encouraged for most scenarios, as long as the total memory within the list of RemoteViews
 * is relatively small (ie. doesn't contain large or numerous Bitmaps, see {@link
 * RemoteViews#setImageViewBitmap}). In the case of numerous images, the use of API is still
 * possible by setting image URIs instead of Bitmaps, see {@link RemoteViews#setImageViewUri}.
 *
 * This API is supported in the compatibility library for previous API levels, see
 * RemoteViewsCompat.
 *
 * @param viewId The id of the {@link AdapterView}
 * @param list The list of RemoteViews which will populate the view specified by viewId.
 * @param viewTypeCount The maximum number of unique layout id's used to construct the list of
 * RemoteViews. This count cannot change during the life-cycle of a given widget, so this
 * parameter should account for the maximum possible number of types that may appear in the
 * See {@link Adapter#getViewTypeCount()}.
 *
 * @hide
 * @deprecated this appears to have no users outside of UnsupportedAppUsage?
 */
====>[HIDDEN]<android.widget.RemoteViews: void setRemoteAdapter(int,ArrayList<RemoteViews>,int)>    ---->    
<android.webkit.WebViewFactoryProvider: TokenBindingService getTokenBindingService()>
/**
 * Gets the TokenBindingService instance for this WebView implementation. The
 * implementation must return the same instance on subsequent calls.
 *
 * @deprecated this method only returns {@code null}
 * @return the TokenBindingService instance (which is always {@code null})
 */
====>[PUBLIC]<android.webkit.WebViewFactoryProvider: TokenBindingService getTokenBindingService()>    ---->    
<android.os.Debug: void resetThreadAllocSize()>
/**
 * Clears the thread-local count of objects allocated.
 * @see #getThreadAllocSize()
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void resetThreadAllocSize()>    ---->    
<android.telephony.TelephonyManager: boolean endCall()>
/**
 * @removed Use {@link android.telecom.TelecomManager#endCall()} instead.
 * @hide
 * @removed
 */
====>[HIDDEN]<android.telephony.TelephonyManager: boolean endCall()>    ---->    
<android.util.proto.ProtoOutputStream: void writeUInt64(long,long)>
/**
 * Write a single proto "uint64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeUInt64(long,long)>    ---->    #write
<android.app.Activity: void stopManagingCursor(Cursor)>
/**
 * Given a Cursor that was previously given to
 * {@link #startManagingCursor}, stop the activity's management of that
 * cursor.
 *
 * <p><strong>Warning:</strong> After calling this method on a cursor from a managed query,
 * the system <em>will not</em> automatically close the cursor and you must call
 * {@link Cursor#close()}.</p>
 *
 * @param c The Cursor that was being managed.
 *
 * @see #startManagingCursor
 *
 * @deprecated Use the new {@link android.content.CursorLoader} class with
 * {@link LoaderManager} instead; this is also
 * available on older platforms through the Android compatibility package.
 */
====>[PUBLIC]<android.app.Activity: void stopManagingCursor(Cursor)>    ---->    android.content.CursorLoader
<android.net.NetworkInfo: void setType(int)>
/**
 * @deprecated Use {@link NetworkCapabilities} instead
 * @hide
 */
====>[HIDDEN]<android.net.NetworkInfo: void setType(int)>    ---->    NetworkCapabilities
<android.net.ConnectivityManager: boolean requestRouteToHost(int,int)>
/**
 * Ensure that a network route exists to deliver traffic to the specified
 * host via the specified network interface. An attempt to add a route that
 * already exists is ignored, but treated as successful.
 *
 * <p>This method requires the caller to hold either the
 * {@link android.Manifest.permission#CHANGE_NETWORK_STATE} permission
 * or the ability to modify system settings as determined by
 * {@link android.provider.Settings.System#canWrite}.</p>
 *
 * @param networkType the type of the network over which traffic to the specified
 * host is to be routed
 * @param hostAddress the IP address of the host to which the route is desired
 * @return {@code true} on success, {@code false} on failure
 *
 * @deprecated Deprecated in favor of the
 * {@link #requestNetwork(NetworkRequest, NetworkCallback)},
 * {@link #bindProcessToNetwork} and {@link Network#getSocketFactory} API.
 * In {@link VERSION_CODES#M}, and above, this method is unsupported and will
 * throw {@code UnsupportedOperationException} if called.
 * @removed
 */
====>[HIDDEN]<android.net.ConnectivityManager: boolean requestRouteToHost(int,int)>    ---->    #requestNetwork(NetworkRequest, NetworkCallback)
<android.app.AlertDialog.Builder: Builder setInverseBackgroundForced(boolean)>
/**
 * Sets the alert dialog to use the inverse background, regardless of
 * what the contents is.
 *
 * @param useInverseBackground whether to use the inverse background
 * @return this Builder object to allow for chaining of calls to set methods
 * @deprecated This flag is only used for pre-Material themes. Instead,
 * specify the window background using on the alert dialog
 * theme.
 */
====>[PUBLIC]<android.app.AlertDialog.Builder: Builder setInverseBackgroundForced(boolean)>    ---->    d for pre-Material themes.
<android.location.LocationManager: void removeGpsNavigationMessageListener(Listener)>
/**
 * No-op method to keep backward-compatibility.
 * Don't use it. Use {@link #unregisterGnssNavigationMessageCallback} instead.
 * @hide
 * @deprecated use
 * {@link #unregisterGnssNavigationMessageCallback(GnssNavigationMessage.Callback)}
 * instead
 * @removed
 */
====>[HIDDEN]<android.location.LocationManager: void removeGpsNavigationMessageListener(Listener)>    ---->    #unregisterGnssNavigationMessageCallback(GnssNavigationMessage.Callback)
<android.renderscript.ProgramVertex: Element getInput(int)>
/**
 * @deprecated in API 16
 * @param slot location of the input to return
 * @return input attribute element
 */
====>[PUBLIC]<android.renderscript.ProgramVertex: Element getInput(int)>    ---->    
<android.net.NetworkInfo: State getState()>
/**
 * Reports the current coarse-grained state of the network.
 * @return the coarse-grained state
 * @deprecated Apps should instead use the
 * {@link android.net.ConnectivityManager.NetworkCallback} API to
 * learn about connectivity changes.
 * {@link ConnectivityManager#registerDefaultNetworkCallback} and
 * {@link ConnectivityManager#registerNetworkCallback}. These will
 * give a more accurate picture of the connectivity state of
 * the device and let apps react more easily and quickly to changes.
 */
====>[PUBLIC]<android.net.NetworkInfo: State getState()>    ---->    android.net.ConnectivityManager.NetworkCallback
<android.os.Bundle: IBinder getIBinder(String)>
/**
 * Returns the value associated with the given key, or null if
 * no mapping of the desired type exists for the given key or a null
 * value is explicitly associated with the key.
 *
 * @param key a String, or null
 * @return an IBinder value, or null
 *
 * @deprecated
 * @hide This is the old name of the function.
 */
====>[HIDDEN]<android.os.Bundle: IBinder getIBinder(String)>    ---->    
<android.net.ConnectivityManager: ConnectivityManager getInstance()>
/**
 * @deprecated - use getSystemService. This is a kludge to support static access in certain
 * situations where a Context pointer is unavailable.
 * @hide
 */
====>[HIDDEN]<android.net.ConnectivityManager: ConnectivityManager getInstance()>    ---->    
<android.util.proto.ProtoOutputStream: void writePackedBool(long,boolean[])>
/**
 * Write a list of packed proto "bool" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedBool(long,boolean[])>    ---->    #write
<android.animation.LayoutTransition: void hideChild(ViewGroup,View)>
/**
 * @deprecated Use {@link #hideChild(android.view.ViewGroup, android.view.View, int)}.
 */
====>[PUBLIC]<android.animation.LayoutTransition: void hideChild(ViewGroup,View)>    ---->    #hideChild(android.view.ViewGroup, android.view.View, int)
<android.graphics.ImageDecoder: boolean getConserveMemory()>
/**
 * @removed
 * @deprecated Replaced by {@link #getMemorySizePolicy}.
 */
====>[HIDDEN]<android.graphics.ImageDecoder: boolean getConserveMemory()>    ---->    #getMemorySizePolicy
<android.widget.RemoteViews: RemoteViews clone()>
/**
 * Returns a deep copy of the RemoteViews object. The RemoteView may not be
 * attached to another RemoteView -- it must be the root of a hierarchy.
 *
 * @deprecated use {@link #RemoteViews(RemoteViews)} instead.
 * @throws IllegalStateException if this is not the root of a RemoteView
 * hierarchy
 */
====>[PUBLIC]<android.widget.RemoteViews: RemoteViews clone()>    ---->    #RemoteViews(RemoteViews)
<android.util.proto.ProtoOutputStream: void writeRepeatedFixed32(long,int)>
/**
 * Write a single repeated proto "fixed32" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedFixed32(long,int)>    ---->    #write
<android.app.InstantAppResolverService: void onGetInstantAppResolveInfo(int[],String,InstantAppResolutionCallback)>
/**
 * Called to retrieve resolve info for instant applications immediately.
 *
 * @param digestPrefix The hash prefix of the instant app's domain.
 * @deprecated Should implement {@link #onGetInstantAppResolveInfo(Intent, int[], UserHandle,
 * String, InstantAppResolutionCallback)}.
 */
====>[PUBLIC]<android.app.InstantAppResolverService: void onGetInstantAppResolveInfo(int[],String,InstantAppResolutionCallback)>    ---->    #onGetInstantAppResolveInfo(Intent, int[], UserHandle,  String, InstantAppResolutionCallback)
<android.media.AudioManager: int requestAudioFocus(OnAudioFocusChangeListener,int,int)>
/**
 * Request audio focus.
 * Send a request to obtain the audio focus
 * @param l the listener to be notified of audio focus changes
 * @param streamType the main audio stream type affected by the focus request
 * @param durationHint use {@link #AUDIOFOCUS_GAIN_TRANSIENT} to indicate this focus request
 * is temporary, and focus will be abandonned shortly. Examples of transient requests are
 * for the playback of driving directions, or notifications sounds.
 * Use {@link #AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK} to indicate also that it's ok for
 * the previous focus owner to keep playing if it ducks its audio output.
 * Alternatively use {@link #AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE} for a temporary request
 * that benefits from the system not playing disruptive sounds like notifications, for
 * usecases such as voice memo recording, or speech recognition.
 * Use {@link #AUDIOFOCUS_GAIN} for a focus request of unknown duration such
 * as the playback of a song or a video.
 * @return {@link #AUDIOFOCUS_REQUEST_FAILED} or {@link #AUDIOFOCUS_REQUEST_GRANTED}
 * @deprecated use {@link #requestAudioFocus(AudioFocusRequest)}
 */
====>[PUBLIC]<android.media.AudioManager: int requestAudioFocus(OnAudioFocusChangeListener,int,int)>    ---->    #requestAudioFocus(AudioFocusRequest)
<android.renderscript.Element: Element MATRIX4X4(RenderScript)>
/**
 * @deprecated use MATRIX_4X4
 */
====>[PUBLIC]<android.renderscript.Element: Element MATRIX4X4(RenderScript)>    ---->    
<android.location.LocationManager: void clearTestProviderEnabled(String)>
/**
 * Removes any mock enabled value associated with the given provider.
 *
 * @param provider the provider name
 *
 * @throws SecurityException if {@link android.app.AppOpsManager#OPSTR_MOCK_LOCATION
 * mock location app op} is not set to {@link android.app.AppOpsManager#MODE_ALLOWED
 * allowed} for your app.
 * @throws IllegalArgumentException if no provider with the given name exists
 *
 * @deprecated Use {@link #setTestProviderEnabled(String, boolean)} instead.
 */
====>[PUBLIC]<android.location.LocationManager: void clearTestProviderEnabled(String)>    ---->    #setTestProviderEnabled(String, boolean)
<android.webkit.WebView: void setPictureListener(PictureListener)>
/**
 * Sets the Picture listener. This is an interface used to receive
 * notifications of a new Picture.
 *
 * @param listener an implementation of WebView.PictureListener
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.webkit.WebView: void setPictureListener(PictureListener)>    ---->    
<android.webkit.WebView: View getZoomControls()>
/**
 * Gets the zoom controls for this WebView, as a separate View. The caller
 * is responsible for inserting this View into the layout hierarchy.
 * <p/>
 * API level {@link android.os.Build.VERSION_CODES#CUPCAKE} introduced
 * built-in zoom mechanisms for the WebView, as opposed to these separate
 * zoom controls. The built-in mechanisms are preferred and can be enabled
 * using {@link WebSettings#setBuiltInZoomControls}.
 *
 * @deprecated the built-in zoom mechanisms are preferred
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN}
 */
====>[HIDDEN]<android.webkit.WebView: View getZoomControls()>    ---->    
<android.view.ViewConfiguration: int getWindowTouchSlop()>
/**
 * @return Distance in dips a touch must be outside the bounds of a window for it
 * to be counted as outside the window for purposes of dismissing that
 * window.
 *
 * @deprecated Use {@link #getScaledWindowTouchSlop()} instead.
 */
====>[PUBLIC]<android.view.ViewConfiguration: int getWindowTouchSlop()>    ---->    #getScaledWindowTouchSlop()
<android.os.storage.StorageManager: void enableUsbMassStorage()>
/**
 * Enables USB Mass Storage (UMS) on the device.
 *
 * @hide
 */
====>[HIDDEN]<android.os.storage.StorageManager: void enableUsbMassStorage()>    ---->    
<android.webkit.UrlInterceptRegistry: void setUrlInterceptDisabled(boolean)>
/**
 * set the flag to control whether url intercept is enabled or disabled
 *
 * @param disabled {@code true} to disable the cache
 *
 * @hide
 * @deprecated This class was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.UrlInterceptRegistry: void setUrlInterceptDisabled(boolean)>    ---->    
<android.view.WindowInsets: void <init>(Rect,Rect,boolean,boolean,DisplayCutout)>
/**
 * Construct a new WindowInsets from individual insets.
 *
 * A {@code null} inset indicates that the respective inset is consumed.
 *
 * @hide
 * @deprecated Use {@link WindowInsets(SparseArray, SparseArray, boolean, boolean, DisplayCutout)}
 */
====>[HIDDEN]<android.view.WindowInsets: void <init>(Rect,Rect,boolean,boolean,DisplayCutout)>    ---->    WindowInsets(SparseArray, SparseArray, boolean, boolean, DisplayCutout)
<android.graphics.Paint: Rasterizer getRasterizer()>
/**
 * Get the paint's rasterizer (or null).
 * <p />
 * The raster controls/modifies how paths/text are turned into alpha masks.
 *
 * @return         the paint's rasterizer (or null)
 *
 * @deprecated Rasterizer is not supported by either the HW or PDF backends.
 * @removed
 */
====>[HIDDEN]<android.graphics.Paint: Rasterizer getRasterizer()>    ---->    
<android.media.AudioManager: boolean isBluetoothA2dpOn()>
/**
 * Checks whether a Bluetooth A2DP audio peripheral is connected or not.
 *
 * @return true if a Bluetooth A2DP peripheral is connected
 * false if otherwise
 * @deprecated Use {@link AudioManager#getDevices(int)} instead to list available audio devices.
 */
====>[PUBLIC]<android.media.AudioManager: boolean isBluetoothA2dpOn()>    ---->    AudioManager#getDevices(int)
<com.android.internal.graphics.palette.Palette.Builder: Builder resizeBitmapSize(int)>
/**
 * Set the resize value when using a {@link android.graphics.Bitmap} as the source.
 * If the bitmap's largest dimension is greater than the value specified, then the bitmap
 * will be resized so that its largest dimension matches {@code maxDimension}. If the
 * bitmap is smaller or equal, the original is used as-is.
 *
 * @deprecated Using {@link #resizeBitmapArea(int)} is preferred since it can handle
 * abnormal aspect ratios more gracefully.
 *
 * @param maxDimension the number of pixels that the max dimension should be scaled down to,
 * or any value <= 0 to disable resizing.
 */
====>[PUBLIC]<com.android.internal.graphics.palette.Palette.Builder: Builder resizeBitmapSize(int)>    ---->    #resizeBitmapArea(int)
Inconsistency (Non-Documentation):<android.app.ContextImpl: void removeStickyBroadcastAsUser(Intent,UserHandle)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/ContextImpl.java
<android.app.ContextImpl: void removeStickyBroadcastAsUser(Intent,UserHandle)>

====>[PUBLIC]<android.app.ContextImpl: void removeStickyBroadcastAsUser(Intent,UserHandle)>    ---->    
<android.location.Location: void removeVerticalAccuracy()>
/**
 * Remove the vertical accuracy from this location.
 *
 * <p>Following this call {@link #hasVerticalAccuracy} will return false, and
 * {@link #getVerticalAccuracyMeters} will return 0.0.
 *
 * @deprecated use a new Location object for location updates.
 * @removed
 */
====>[HIDDEN]<android.location.Location: void removeVerticalAccuracy()>    ---->    
<com.android.internal.widget.RecyclerView.LayoutManager: int getChildMeasureSpec(int,int,int,boolean)>
/**
 * Calculate a MeasureSpec value for measuring a child view in one dimension.
 *
 * @param parentSize Size of the parent view where the child will be placed
 * @param padding Total space currently consumed by other elements of the parent
 * @param childDimension Desired size of the child view, or MATCH_PARENT/WRAP_CONTENT.
 * Generally obtained from the child view's LayoutParams
 * @param canScroll true if the parent RecyclerView can scroll in this dimension
 *
 * @return a MeasureSpec value for the child view
 * @deprecated use {@link #getChildMeasureSpec(int, int, int, int, boolean)}
 */
====>[PUBLIC]<com.android.internal.widget.RecyclerView.LayoutManager: int getChildMeasureSpec(int,int,int,boolean)>    ---->    #getChildMeasureSpec(int, int, int, int, boolean)
<android.hardware.location.ContextHubManager: int registerCallback(ICallback)>
/**
 * @deprecated Use {@link #registerCallback(Callback)} instead.
 * @hide
 */
====>[HIDDEN]<android.hardware.location.ContextHubManager: int registerCallback(ICallback)>    ---->    #registerCallback(Callback)
<android.view.inputmethod.InputMethodManager: void registerSuggestionSpansForNotification(SuggestionSpan[])>
/**
 * This hidden API is deprecated in {@link android.os.Build.VERSION_CODES#Q}. Does nothing.
 *
 * @param spans will be ignored.
 *
 * @deprecated Do not use.
 * @hide
 */
====>[HIDDEN]<android.view.inputmethod.InputMethodManager: void registerSuggestionSpansForNotification(SuggestionSpan[])>    ---->    
<android.app.ActionBar: void selectTab(Tab)>
/**
 * Select the specified tab. If it is not a child of this action bar it will be added.
 *
 * <p>Note: If you want to select by index, use {@link #setSelectedNavigationItem(int)}.</p>
 *
 * @param tab Tab to select
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: void selectTab(Tab)>    ---->    
<android.media.AudioTrack: void setState(int)>
/**
 * Sets the initialization state of the instance. This method was originally intended to be used
 * in an AudioTrack subclass constructor to set a subclass-specific post-initialization state.
 * However, subclasses of AudioTrack are no longer recommended, so this method is obsolete.
 * @param state the state of the AudioTrack instance
 * @deprecated Only accessible by subclasses, which are not recommended for AudioTrack.
 */
====>[PUBLIC]<android.media.AudioTrack: void setState(int)>    ---->    
<android.renderscript.ProgramVertexFixedFunction.InternalBuilder: InternalBuilder addInput(Element)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.ProgramVertexFixedFunction.InternalBuilder: InternalBuilder addInput(Element)>    ---->    
<android.renderscript.ProgramRaster.Builder: Builder setPointSpriteEnabled(boolean)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.ProgramRaster.Builder: Builder setPointSpriteEnabled(boolean)>    ---->    
<android.provider.Contacts.ContactMethods: String encodePredefinedImProtocol(int)>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.ContactMethods: String encodePredefinedImProtocol(int)>    ---->    android.provider.ContactsContract
<android.os.FileObserver: void <init>(String)>
/**
 * Equivalent to FileObserver(path, FileObserver.ALL_EVENTS).
 *
 * @deprecated use {@link #FileObserver(File)} instead.
 */
====>[PUBLIC]<android.os.FileObserver: void <init>(String)>    ---->    #FileObserver(File)
<com.android.systemui.bubbles.BubbleStackView: void collapseStack(Runnable)>
/**
 * @deprecated use {@link #setExpanded(boolean)} and {@link #setSelectedBubble(Bubble)}
 */
====>[PUBLIC]<com.android.systemui.bubbles.BubbleStackView: void collapseStack(Runnable)>    ---->    #setExpanded(boolean)
<android.widget.PopupWindow: boolean isClipToScreenEnabled()>
/**
 * <p>Indicates whether this popup will be clipped to the screen and not to the
 * containing window<p/>
 *
 * @return true if popup will be clipped to the screen instead of the window, false otherwise
 * @deprecated Use {@link #isClippedToScreen()} instead
 * @removed
 */
====>[HIDDEN]<android.widget.PopupWindow: boolean isClipToScreenEnabled()>    ---->    #isClippedToScreen()
<android.telephony.SmsMessage: SmsMessage createFromPdu(byte[])>
/**
 * Create an SmsMessage from a raw PDU. Guess format based on Voice
 * technology first, if it fails use other format.
 * All applications which handle
 * incoming SMS messages by processing the {@code SMS_RECEIVED_ACTION} broadcast
 * intent <b>must</b> now pass the new {@code format} String extra from the intent
 * into the new method {@code createFromPdu(byte[], String)} which takes an
 * extra format parameter. This is required in order to correctly decode the PDU on
 * devices that require support for both 3GPP and 3GPP2 formats at the same time,
 * such as dual-mode GSM/CDMA and CDMA/LTE phones.
 * @deprecated Use {@link #createFromPdu(byte[], String)} instead.
 */
====>[PUBLIC]<android.telephony.SmsMessage: SmsMessage createFromPdu(byte[])>    ---->    #createFromPdu(byte[], String)
<android.nfc.NfcAdapter: void setNdefPushMessage(NdefMessage,Activity,Activity)>
/**
 * Set a static {@link NdefMessage} to send using Android Beam (TM).
 *
 * <p>This method may be called at any time before {@link Activity#onDestroy},
 * but the NDEF message is only made available for NDEF push when the
 * specified activity(s) are in resumed (foreground) state. The recommended
 * approach is to call this method during your Activity's
 * {@link Activity#onCreate} - see sample
 * code below. This method does not immediately perform any I/O or blocking work,
 * so is safe to call on your main thread.
 *
 * <p>Only one NDEF message can be pushed by the currently resumed activity.
 * If both {@link #setNdefPushMessage} and
 * {@link #setNdefPushMessageCallback} are set, then
 * the callback will take priority.
 *
 * <p>If neither {@link #setNdefPushMessage} or
 * {@link #setNdefPushMessageCallback} have been called for your activity, then
 * the Android OS may choose to send a default NDEF message on your behalf,
 * such as a URI for your application.
 *
 * <p>If {@link #setNdefPushMessage} is called with a null NDEF message,
 * and/or {@link #setNdefPushMessageCallback} is called with a null callback,
 * then NDEF push will be completely disabled for the specified activity(s).
 * This also disables any default NDEF message the Android OS would have
 * otherwise sent on your behalf for those activity(s).
 *
 * <p>If you want to prevent the Android OS from sending default NDEF
 * messages completely (for all activities), you can include a
 * {@code <meta-data>} element inside the {@code <application>}
 * element of your AndroidManifest.xml file, like this:
 * <pre>
 * &lt;application ...>
 * &lt;meta-data android:name="android.nfc.disable_beam_default"
 * android:value="true" />
 * &lt;/application></pre>
 *
 * <p>The API allows for multiple activities to be specified at a time,
 * but it is strongly recommended to just register one at a time,
 * and to do so during the activity's {@link Activity#onCreate}. For example:
 * <pre>
 * protected void onCreate(Bundle savedInstanceState) {
 * super.onCreate(savedInstanceState);
 * NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this);
 * if (nfcAdapter == null) return;  // NFC not available on this device
 * nfcAdapter.setNdefPushMessage(ndefMessage, this);
 * }</pre>
 * And that is it. Only one call per activity is necessary. The Android
 * OS will automatically release its references to the NDEF message and the
 * Activity object when it is destroyed if you follow this pattern.
 *
 * <p>If your Activity wants to dynamically generate an NDEF message,
 * then set a callback using {@link #setNdefPushMessageCallback} instead
 * of a static message.
 *
 * <p class="note">Do not pass in an Activity that has already been through
 * {@link Activity#onDestroy}. This is guaranteed if you call this API
 * during {@link Activity#onCreate}.
 *
 * <p class="note">For sending large content such as pictures and songs,
 * consider using {@link #setBeamPushUris}, which switches to alternate transports
 * such as Bluetooth to achieve a fast transfer rate.
 *
 * <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
 *
 * @param message NDEF message to push over NFC, or null to disable
 * @param activity activity for which the NDEF message will be pushed
 * @param activities optional additional activities, however we strongly recommend
 * to only register one at a time, and to do so in that activity's
 * {@link Activity#onCreate}
 * @throws UnsupportedOperationException if FEATURE_NFC is unavailable.
 * @deprecated this feature is deprecated. File sharing can work using other technology like
 * Bluetooth.
 */
====>[PUBLIC]<android.nfc.NfcAdapter: void setNdefPushMessage(NdefMessage,Activity,Activity)>    ---->    
<android.media.MediaCodec: ByteBuffer[] getOutputBuffers()>
/**
 * Retrieve the set of output buffers.  Call this after start()
 * returns and whenever dequeueOutputBuffer signals an output
 * buffer change by returning {@link
 * #INFO_OUTPUT_BUFFERS_CHANGED}. After calling this method, any
 * ByteBuffers previously returned by an earlier call to this
 * method MUST no longer be used.
 *
 * @deprecated Use the new {@link #getOutputBuffer} method instead
 * each time an output buffer is dequeued.  This method is not
 * supported if codec is configured in asynchronous mode.
 *
 * <b>Note:</b> As of API 21, the position and limit of output
 * buffers that are dequeued will be set to the valid data
 * range.
 *
 * <em>Do not use this method if using an output surface.</em>
 *
 * @throws IllegalStateException if not in the Executing state,
 * or codec is configured in asynchronous mode.
 * @throws MediaCodec.CodecException upon codec error.
 */
====>[PUBLIC]<android.media.MediaCodec: ByteBuffer[] getOutputBuffers()>    ---->    #getOutputBuffer
<android.net.Proxy: int getDefaultPort()>
/**
 * Return the default proxy port specified by the carrier.
 * @return The port number to be used with the proxy host or -1 if there is
 * no proxy for this carrier.
 * @deprecated Use standard java vm proxy values to find the host, port and
 * exclusion list.  This call ignores the exclusion list and no
 * longer reports only mobile-data apn-based proxy values.
 */
====>[PUBLIC]<android.net.Proxy: int getDefaultPort()>    ---->    
<android.drm.DrmStore.DrmObjectType: void <init>()>
/**
 * @deprecated This class should have been an interface instead.
 * The default constuctor should have not been exposed.
 */
====>[PUBLIC]<android.drm.DrmStore.DrmObjectType: void <init>()>    ---->    
<android.app.ActivityManager: int getMaxNumPictureInPictureActions()>
/**
 * @removed
 */
====>[HIDDEN]<android.app.ActivityManager: int getMaxNumPictureInPictureActions()>    ---->    
<android.telephony.TelephonyManager: void setDataEnabled(int,boolean)>
/**
 * @hide
 * @deprecated use {@link #setDataEnabled(boolean)} instead.
 */
====>[HIDDEN]<android.telephony.TelephonyManager: void setDataEnabled(int,boolean)>    ---->    #setDataEnabled(boolean)
<com.android.internal.logging.MetricsLogger: void visibility(Context,int,boolean)>
/**
 * @deprecated because untestable; use {@link #visibility(int, boolean)}
 */
====>[PUBLIC]<com.android.internal.logging.MetricsLogger: void visibility(Context,int,boolean)>    ---->    #visibility(int, boolean)
<android.widget.CalendarView: int getFocusedMonthDateColor()>
/**
 * Gets the color for the dates in the focused month.
 *
 * @return The focused month date color.
 *
 * @attr ref android.R.styleable#CalendarView_focusedMonthDateColor
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: int getFocusedMonthDateColor()>    ---->    
<android.net.ConnectivityManager: NetworkCapabilities networkCapabilitiesForType(int)>
/**
 * Given a legacy type (TYPE_WIFI, ...) returns a NetworkCapabilities
 * instance suitable for registering a request or callback.  Throws an
 * IllegalArgumentException if no mapping from the legacy type to
 * NetworkCapabilities is known.
 *
 * @deprecated Types are deprecated. Use {@link NetworkCallback} or {@link NetworkRequest}
 * to find the network instead.
 * @hide
 */
====>[HIDDEN]<android.net.ConnectivityManager: NetworkCapabilities networkCapabilitiesForType(int)>    ---->    NetworkCallback
<android.net.wifi.WifiManager: void startWps(WpsInfo,WpsCallback)>
/**
 * WPS suport has been deprecated from Client mode and this method will immediately trigger
 * {@link WpsCallback#onFailed(int)} with a generic error.
 *
 * @param config WPS configuration (does not support {@link WpsInfo#LABEL})
 * @param listener for callbacks on success or failure. Can be null.
 * @throws IllegalStateException if the WifiManager instance needs to be initialized again
 * @deprecated This API is deprecated
 */
====>[PUBLIC]<android.net.wifi.WifiManager: void startWps(WpsInfo,WpsCallback)>    ---->    
<android.hardware.SensorManager: int configureDirectChannel(SensorDirectChannel,Sensor,int)>
/**
 * @removed
 */
====>[HIDDEN]<android.hardware.SensorManager: int configureDirectChannel(SensorDirectChannel,Sensor,int)>    ---->    
<android.speech.tts.UtteranceProgressListener: void onError(String)>
/**
 * Called when an error has occurred during processing. This can be called
 * at any point in the synthesis process. Note that there might be calls
 * to {@link #onStart(String)} for specified utteranceId but there will never
 * be a call to both {@link #onDone(String)} and {@link #onError(String)} for
 * the same utterance.
 *
 * @param utteranceId The utterance ID of the utterance.
 * @deprecated Use {@link #onError(String,int)} instead
 */
====>[PUBLIC]<android.speech.tts.UtteranceProgressListener: void onError(String)>    ---->    #onError(String,int)
<android.renderscript.FileA3D.IndexEntry: EntryType getEntryType()>
/**
 * @deprecated in API 16
 * Returns the type of a renderscript object the index entry
 * describes
 * @return type of a renderscript object the index entry
 * describes
 */
====>[PUBLIC]<android.renderscript.FileA3D.IndexEntry: EntryType getEntryType()>    ---->    
<android.service.carrier.CarrierMessagingService: void onSendDataSms(byte[],int,String,int,ResultCallback<SendSmsResult>)>
/**
 * Override this method to intercept binary SMSs sent from the device.
 * @deprecated Override {@link #onSendDataSms} below instead.
 *
 * @param data the binary content
 * @param subId SMS subscription ID of the SIM
 * @param destAddress phone number of the recipient of the message
 * @param destPort the destination port
 * @param callback result callback. Call with a {@link SendSmsResult}.
 */
====>[PUBLIC]<android.service.carrier.CarrierMessagingService: void onSendDataSms(byte[],int,String,int,ResultCallback<SendSmsResult>)>    ---->    #onSendDataSms
<android.net.Proxy: String getHost(Context)>
/**
 * Return the proxy host set by the user.
 * @param ctx A Context used to get the settings for the proxy host.
 * @return String containing the host name. If the user did not set a host
 * name it returns the default host. A null value means that no
 * host is to be used.
 * @deprecated Use standard java vm proxy values to find the host, port
 * and exclusion list.  This call ignores the exclusion list.
 */
====>[PUBLIC]<android.net.Proxy: String getHost(Context)>    ---->    
<android.net.NetworkStatsHistory: void generateRandom(long,long,long,long,long,long,long,Random)>
/**
 * @deprecated only for temporary testing
 */
====>[PUBLIC]<android.net.NetworkStatsHistory: void generateRandom(long,long,long,long,long,long,long,Random)>    ---->    
<android.util.proto.ProtoOutputStream: void writePackedSFixed64(long,long[])>
/**
 * Write a list of packed proto "sfixed64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedSFixed64(long,long[])>    ---->    #write
<android.app.ActivityManagerNative: void broadcastStickyIntent(Intent,String,int)>
/**
 * @deprecated use ActivityManager.broadcastStickyIntent instead.
 */
====>[PUBLIC]<android.app.ActivityManagerNative: void broadcastStickyIntent(Intent,String,int)>    ---->    ActivityManager.broadcastStickyIntent
<android.database.ContentObserver: void dispatchChange(boolean)>
/**
 * Dispatches a change notification to the observer.
 * <p>
 * If a {@link Handler} was supplied to the {@link ContentObserver} constructor,
 * then a call to the {@link #onChange} method is posted to the handler's message queue.
 * Otherwise, the {@link #onChange} method is invoked immediately on this thread.
 * </p>
 *
 * @param selfChange True if this is a self-change notification.
 *
 * @deprecated Use {@link #dispatchChange(boolean, Uri)} instead.
 */
====>[PUBLIC]<android.database.ContentObserver: void dispatchChange(boolean)>    ---->    #dispatchChange(boolean, Uri)
<com.android.internal.logging.MetricsLogger: void histogram(Context,String,int)>
/**
 * Increment the bucket with the integer label on the histogram with the given name.
 * @deprecated use {@link #histogram(String, int)}
 */
====>[PUBLIC]<com.android.internal.logging.MetricsLogger: void histogram(Context,String,int)>    ---->    #histogram(String, int)
<android.media.MediaFile: boolean isPlayListFileType(int)>
/**
 * @deprecated file types no longer exist
 */
====>[PUBLIC]<android.media.MediaFile: boolean isPlayListFileType(int)>    ---->    
<android.webkit.WebView: boolean showFindDialog(String,boolean)>
/**
 * Starts an ActionMode for finding text in this WebView.  Only works if this
 * WebView is attached to the view system.
 *
 * @param text if non-null, will be the initial text to search for.
 * Otherwise, the last String searched for in this WebView will
 * be used to start.
 * @param showIme if {@code true}, show the IME, assuming the user will begin typing.
 * If {@code false} and text is non-null, perform a find all.
 * @return {@code true} if the find dialog is shown, {@code false} otherwise
 * @deprecated This method does not work reliably on all Android versions;
 * implementing a custom find dialog using WebView.findAllAsync()
 * provides a more robust solution.
 */
====>[PUBLIC]<android.webkit.WebView: boolean showFindDialog(String,boolean)>    ---->    
<android.view.textclassifier.TextClassification.Builder: Builder setLabel(String)>
/**
 * Sets the label for the <i>primary</i> action that may be rendered on a widget used to
 * act on the classified text.
 *
 * <p><strong>NOTE: </strong>This field is not parcelled. If read from a parcel, the
 * returned label represents the label of the first {@link RemoteAction} (if one exists).
 *
 * @deprecated Use {@link #addAction(RemoteAction)} instead.
 */
====>[PUBLIC]<android.view.textclassifier.TextClassification.Builder: Builder setLabel(String)>    ---->    #addAction(RemoteAction)
<android.telecom.Phone: AudioState getAudioState()>
/**
 * Obtains the current phone call audio state of the {@code Phone}.
 *
 * @return An object encapsulating the audio state.
 * @deprecated Use {@link #getCallAudioState()} instead.
 */
====>[PUBLIC]<android.telecom.Phone: AudioState getAudioState()>    ---->    #getCallAudioState()
<android.app.Notification.Builder: Builder setLights(int,int,int)>
/**
 * Set the desired color for the indicator LED on the device, as well as the
 * blink duty cycle (specified in milliseconds).
 *
 * Not all devices will honor all (or even any) of these values.
 *
 * @deprecated use {@link NotificationChannel#enableLights(boolean)} instead.
 * @see Notification#ledARGB
 * @see Notification#ledOnMS
 * @see Notification#ledOffMS
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder setLights(int,int,int)>    ---->    NotificationChannel#enableLights(boolean)
<android.content.pm.PackageInstaller: void removeSessionCallback(SessionCallback)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.content.pm.PackageInstaller: void removeSessionCallback(SessionCallback)>    ---->    
<android.webkit.WebView: void setMapTrackballToArrowKeys(boolean)>
/**
 * @deprecated Only the default case, {@code true}, will be supported in a future version.
 */
====>[PUBLIC]<android.webkit.WebView: void setMapTrackballToArrowKeys(boolean)>    ---->    
<android.content.ContentResolver: void cancelSync(Uri)>
/**
 * Cancel any active or pending syncs that match the Uri. If the uri is null then
 * all syncs will be canceled.
 *
 * @param uri the uri of the provider to sync or null to sync all providers.
 * @deprecated instead use {@link #cancelSync(android.accounts.Account, String)}
 */
====>[PUBLIC]<android.content.ContentResolver: void cancelSync(Uri)>    ---->    #cancelSync(android.accounts.Account, String)
<android.telephony.SignalStrength: int getGsmBitErrorRate()>
/**
 * Get the GSM bit error rate (0-7, 99) as defined in TS 27.007 8.5
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthGsm#getBitErrorRate}.
 *
 * @see android.telephony#CellSignalStrengthGsm
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 */
====>[PUBLIC]<android.telephony.SignalStrength: int getGsmBitErrorRate()>    ---->    android.telephony#CellSignalStrengthGsm
<android.view.ViewGroup: void setChildrenDrawingCacheEnabled(boolean)>
/**
 * Enables or disables the drawing cache for each child of this view group.
 *
 * @param enabled true to enable the cache, false to dispose of it
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.ViewGroup: void setChildrenDrawingCacheEnabled(boolean)>    ---->    #setLayerType(int, Paint)
<android.renderscript.RenderScriptGL: int getWidth()>
/**
 * @deprecated in API 16
 * return the width of the last set surface.
 *
 * @return int
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL: int getWidth()>    ---->    
<android.telecom.Conference: void onAudioStateChanged(AudioState)>
/**
 * Notifies the {@link Conference} that the {@link #getAudioState()} property has a new value.
 *
 * @param state The new call audio state.
 * @deprecated Use {@link #onCallAudioStateChanged(CallAudioState)} instead.
 * @hide
 */
====>[HIDDEN]<android.telecom.Conference: void onAudioStateChanged(AudioState)>    ---->    #onCallAudioStateChanged(CallAudioState)
<android.media.AudioManager: void unregisterMediaButtonEventReceiver(PendingIntent)>
/**
 * Unregister the receiver of MEDIA_BUTTON intents.
 * @param eventReceiver same PendingIntent that was registed with
 * {@link #registerMediaButtonEventReceiver(PendingIntent)}.
 * @deprecated Use {@link MediaSession} instead.
 */
====>[PUBLIC]<android.media.AudioManager: void unregisterMediaButtonEventReceiver(PendingIntent)>    ---->    MediaSession
<android.provider.ContactsContract.StreamItems.StreamItemPhotos: void <init>()>
/**
 * No public constructor since this is a utility class
 *
 * @deprecated - Do not use. This will not be supported in the future. In the future,
 * cursors returned from related queries will be empty.
 */
====>[PUBLIC]<android.provider.ContactsContract.StreamItems.StreamItemPhotos: void <init>()>    ---->    
<android.renderscript.FileA3D.IndexEntry: BaseObj getObject()>
/**
 * @deprecated in API 16
 * Used to load the object described by the index entry
 * @return base renderscript object described by the entry
 */
====>[PUBLIC]<android.renderscript.FileA3D.IndexEntry: BaseObj getObject()>    ---->    
<android.view.inputmethod.InputMethodManager: void setAdditionalInputMethodSubtypes(String,InputMethodSubtype[])>
/**
 * Set additional input method subtypes. Only a process which shares the same uid with the IME
 * can add additional input method subtypes to the IME.
 * Please note that a subtype's status is stored in the system.
 * For example, enabled subtypes are remembered by the framework even after they are removed
 * by using this method. If you re-add the same subtypes again,
 * they will just get enabled. If you want to avoid such conflicts, for instance, you may
 * want to create a "different" new subtype even with the same locale and mode,
 * by changing its extra value. The different subtype won't get affected by the stored past
 * status. (You may want to take a look at {@link InputMethodSubtype#hashCode()} to refer
 * to the current implementation.)
 *
 * <p>NOTE: If the same subtype exists in both the manifest XML file and additional subtypes
 * specified by {@code subtypes}, those multiple instances are automatically merged into one
 * instance.</p>
 *
 * <p>CAVEAT: In API Level 23 and prior, the system may do nothing if an empty
 * {@link InputMethodSubtype} is specified in {@code subtypes}, which prevents you from removing
 * the last one entry of additional subtypes. If your IME statically defines one or more
 * subtypes in the manifest XML file, you may be able to work around this limitation by
 * specifying one of those statically defined subtypes in {@code subtypes}.</p>
 *
 * @param imiId Id of InputMethodInfo which additional input method subtypes will be added to.
 * @param subtypes subtypes will be added as additional subtypes of the current input method.
 * @deprecated For IMEs that have already implemented features like customizable/downloadable
 * keyboard layouts/languages, please start migration to other approaches. One idea
 * would be exposing only one unified {@link InputMethodSubtype} then implement
 * IME's own language switching mechanism within that unified subtype. The support
 * of "Additional Subtype" may be completely dropped in a future version of Android.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodManager: void setAdditionalInputMethodSubtypes(String,InputMethodSubtype[])>    ---->    InputMethodSubtype
<android.widget.DatePicker: void setCalendarViewShown(boolean)>
/**
 * Sets whether the {@link CalendarView} is shown.
 * <p>
 * <strong>Note:</strong> Calling this method has no effect when the
 * {@link android.R.styleable#DatePicker_datePickerMode} attribute is set
 * to {@code calendar}.
 *
 * @param shown {@code true} to show the calendar view, {@code false} to
 * hide it
 * @deprecated Not supported by Material-style {@code calendar} mode
 */
====>[PUBLIC]<android.widget.DatePicker: void setCalendarViewShown(boolean)>    ---->    
<com.android.server.SystemServiceManager: File ensureSystemDir()>
/**
 * Ensures that the system directory exist creating one if needed.
 * @deprecated Use {@link Environment#getDataSystemCeDirectory()}
 * or {@link Environment#getDataSystemDeDirectory()} instead.
 * @return The system directory.
 */
====>[PUBLIC]<com.android.server.SystemServiceManager: File ensureSystemDir()>    ---->    Environment#getDataSystemCeDirectory()
<android.renderscript.Mesh: int getVertexAllocationCount()>
/**
 * @deprecated in API 16
 * @return number of allocations containing vertex data
 */
====>[PUBLIC]<android.renderscript.Mesh: int getVertexAllocationCount()>    ---->    
<android.renderscript.Mesh.Builder: Builder addIndexSetType(Type,Primitive)>
/**
 * @deprecated in API 16
 * Adds an index set data type to the builder object
 *
 * @param t type of the index set data, could be null
 * @param p primitive type
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.Builder: Builder addIndexSetType(Type,Primitive)>    ---->    
<android.renderscript.Mesh.AllocationBuilder: AllocationBuilder addIndexSetAllocation(Allocation,Primitive)>
/**
 * @deprecated in API 16
 * Adds an allocation containing index buffer data and index type
 * to the builder
 *
 * @param a index set data allocation, could be null
 * @param p index set primitive type
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.AllocationBuilder: AllocationBuilder addIndexSetAllocation(Allocation,Primitive)>    ---->    
<android.preference.PreferenceActivity: PreferenceManager getPreferenceManager()>
/**
 * Returns the {@link PreferenceManager} used by this activity.
 * @return The {@link PreferenceManager}.
 *
 * @deprecated This function is not relevant for a modern fragment-based
 * PreferenceActivity.
 */
====>[PUBLIC]<android.preference.PreferenceActivity: PreferenceManager getPreferenceManager()>    ---->    
<android.opengl.EGLObjectHandle: int getHandle()>
/**
 * @deprecated Use {@link #getNativeHandle()} instead. Handles on
 * 64 bit platforms will be wider than java ints.
 */
====>[PUBLIC]<android.opengl.EGLObjectHandle: int getHandle()>    ---->    #getNativeHandle()
<android.text.format.DateUtils: String getAMPMString(int)>
/**
 * Return a localized string for AM or PM.
 * @param ampm Either {@link Calendar#AM Calendar.AM} or {@link Calendar#PM Calendar.PM}.
 * @throws IndexOutOfBoundsException if the ampm is out of bounds.
 * @return Localized version of "AM" or "PM".
 * @deprecated Use {@link java.text.SimpleDateFormat} instead.
 */
====>[PUBLIC]<android.text.format.DateUtils: String getAMPMString(int)>    ---->    java.text.SimpleDateFormat
<android.os.Environment: File getExternalStoragePublicDirectory(String)>
/**
 * Get a top-level shared/external storage directory for placing files of a
 * particular type. This is where the user will typically place and manage
 * their own files, so you should be careful about what you put here to
 * ensure you don't erase their files or get in the way of their own
 * organization.
 * <p>
 * On devices with multiple users (as described by {@link UserManager}),
 * each user has their own isolated shared storage. Applications only have
 * access to the shared storage for the user they're running as.
 * </p>
 * <p>
 * Here is an example of typical code to manipulate a picture on the public
 * shared storage:
 * </p>
 * {@sample development/samples/ApiDemos/src/com/example/android/apis/content/ExternalStorage.java
 * public_picture}
 *
 * @param type The type of storage directory to return. Should be one of
 * {@link #DIRECTORY_MUSIC}, {@link #DIRECTORY_PODCASTS},
 * {@link #DIRECTORY_RINGTONES}, {@link #DIRECTORY_ALARMS},
 * {@link #DIRECTORY_NOTIFICATIONS}, {@link #DIRECTORY_PICTURES},
 * {@link #DIRECTORY_MOVIES}, {@link #DIRECTORY_DOWNLOADS},
 * {@link #DIRECTORY_DCIM}, or {@link #DIRECTORY_DOCUMENTS}. May not be null.
 * @return Returns the File path for the directory. Note that this directory
 * may not yet exist, so you must make sure it exists before using
 * it such as with {@link File#mkdirs File.mkdirs()}.
 * @deprecated To improve user privacy, direct access to shared/external
 * storage devices is deprecated. When an app targets
 * {@link android.os.Build.VERSION_CODES#Q}, the path returned
 * from this method is no longer directly accessible to apps.
 * Apps can continue to access content stored on shared/external
 * storage by migrating to alternatives such as
 * {@link Context#getExternalFilesDir(String)},
 * {@link MediaStore}, or {@link Intent#ACTION_OPEN_DOCUMENT}.
 */
====>[PUBLIC]<android.os.Environment: File getExternalStoragePublicDirectory(String)>    ---->    
Inconsistency (Non-Documentation):<android.provider.MediaStore.InternalThumbnails: Bitmap getThumbnail(ContentResolver,Uri,int,Options)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/provider/MediaStore.java
<android.provider.MediaStore.InternalThumbnails: Bitmap getThumbnail(ContentResolver,Uri,int,Options)>
/**
 * Make a blocking request to obtain the given thumbnail, generating it
 * if needed.
 *
 * @see #cancelThumbnail(ContentResolver, Uri)
 */
====>[PUBLIC]<android.provider.MediaStore.InternalThumbnails: Bitmap getThumbnail(ContentResolver,Uri,int,Options)>    ---->    
Inconsistency (Non-Documentation):<android.test.mock.MockCursor: boolean requery()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//test-mock/src/android/test/mock/MockCursor.java
<android.test.mock.MockCursor: boolean requery()>

====>[PUBLIC]<android.test.mock.MockCursor: boolean requery()>    ---->    
<android.provider.Contacts.People: Uri createPersonInMyContactsGroup(ContentResolver,ContentValues)>
/**
 * Creates a new contacts and adds it to the "My Contacts" group.
 *
 * @param resolver the ContentResolver to use
 * @param values the values to use when creating the contact
 * @return the URI of the contact, or null if the operation fails
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.People: Uri createPersonInMyContactsGroup(ContentResolver,ContentValues)>    ---->    android.provider.ContactsContract
<android.net.ConnectivityManager: boolean isNetworkTypeMobile(int)>
/**
 * Checks if a given type uses the cellular data connection.
 * This should be replaced in the future by a network property.
 * @param networkType the type to check
 * @return a boolean - {@code true} if uses cellular network, else {@code false}
 * @deprecated Types are deprecated. Use {@link NetworkCapabilities} instead.
 * {@hide}
 */
====>[HIDDEN]<android.net.ConnectivityManager: boolean isNetworkTypeMobile(int)>    ---->    NetworkCapabilities
<android.renderscript.RenderScriptGL: void bindProgramFragment(ProgramFragment)>
/**
 * @deprecated in API 16
 * Set the default ProgramFragment object seen as the parent state by the
 * root rendering script.
 *
 * @param p
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL: void bindProgramFragment(ProgramFragment)>    ---->    
<android.webkit.WebStorage: void setQuotaForOrigin(String,long)>
/**
 * Sets the storage quota for the Web SQL Database API for the given origin.
 * The quota is specified in bytes and the origin is specified using its string
 * representation. Note that a quota is not enforced on a per-origin basis
 * for the Application Cache API.
 * @deprecated Controlling quota per-origin will not be supported in future.
 */
====>[PUBLIC]<android.webkit.WebStorage: void setQuotaForOrigin(String,long)>    ---->    
<android.app.admin.DeviceAdminReceiver: void onReadyForUserInitialization(Context,Intent)>
/**
 * Called during provisioning of a managed device to allow the device initializer to perform
 * user setup steps.
 *
 * @param context The running context as per {@link #onReceive}.
 * @param intent The received intent as per {@link #onReceive}.
 * @deprecated Do not use
 */
====>[PUBLIC]<android.app.admin.DeviceAdminReceiver: void onReadyForUserInitialization(Context,Intent)>    ---->    
<android.database.AbstractWindowedCursor: boolean isString(int)>
/**
 * @deprecated Use {@link #getType}
 */
====>[PUBLIC]<android.database.AbstractWindowedCursor: boolean isString(int)>    ---->    #getType
<android.text.style.SuggestionSpan: String getNotificationTargetClassName()>
/**
 * @return {@code null}.
 *
 * @hide
 * @deprecated Do not use. Always returns {@code null}.
 */
====>[HIDDEN]<android.text.style.SuggestionSpan: String getNotificationTargetClassName()>    ---->    
<android.webkit.WebView: void setVerticalScrollbarOverlay(boolean)>
/**
 * Specifies whether the vertical scrollbar has overlay style.
 *
 * @deprecated This method has no effect.
 * @param overlay {@code true} if vertical scrollbar should have overlay style
 */
====>[PUBLIC]<android.webkit.WebView: void setVerticalScrollbarOverlay(boolean)>    ---->    
<android.webkit.WebSettings: boolean getNavDump()>
/**
 * Gets whether dumping the navigation cache is enabled.
 *
 * @return whether dumping the navigation cache is enabled
 * @see #setNavDump
 * @deprecated This method is now obsolete.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebSettings: boolean getNavDump()>    ---->    
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: WearableExtender setGravity(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.WearableExtender: WearableExtender setGravity(int)>
/**
 * Set the gravity that this notification should have within the available viewport space.
 * Supported values include {@link android.view.Gravity#TOP},
 * {@link android.view.Gravity#CENTER_VERTICAL} and {@link android.view.Gravity#BOTTOM}.
 * The default value is {@link android.view.Gravity#BOTTOM}.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: WearableExtender setGravity(int)>    ---->    
<android.app.Activity: void onVisibleBehindCanceled()>
/**
 * Called when a translucent activity over this activity is becoming opaque or another
 * activity is being launched. Activities that override this method must call
 * <code>super.onVisibleBehindCanceled()</code> or a SuperNotCalledException will be thrown.
 *
 * <p>When this method is called the activity has 500 msec to release any resources it may be
 * using while visible in the background.
 * If the activity has not returned from this method in 500 msec the system will destroy
 * the activity and kill the process in order to recover the resources for another
 * process. Otherwise {@link #onStop()} will be called following return.
 *
 * @see #requestVisibleBehind(boolean)
 *
 * @deprecated This method's functionality is no longer supported as of
 * {@link android.os.Build.VERSION_CODES#O} and will be removed in a future release.
 */
====>[PUBLIC]<android.app.Activity: void onVisibleBehindCanceled()>    ---->    
<android.hardware.location.ContextHubManager: int[] findNanoAppOnHub(int,NanoAppFilter)>
/**
 * Find a specified nano app on the system
 *
 * @param hubHandle handle of hub to search for nano app
 * @param filter filter specifying the search criteria for app
 *
 * @see NanoAppFilter
 *
 * @return int[] Array of handles to any found nano apps
 *
 * @deprecated Use {@link #queryNanoApps(ContextHubInfo)} instead to explicitly query the hub
 * for loaded nanoapps.
 */
====>[PUBLIC]<android.hardware.location.ContextHubManager: int[] findNanoAppOnHub(int,NanoAppFilter)>    ---->    #queryNanoApps(ContextHubInfo)
<android.content.Context: Drawable peekWallpaper()>
/**
 * @deprecated Use {@link android.app.WallpaperManager#peekDrawable
 * WallpaperManager.peek()} instead.
 */
====>[PUBLIC]<android.content.Context: Drawable peekWallpaper()>    ---->    android.app.WallpaperManager#peekDrawable  WallpaperManager.peek()
<android.os.WorkSource: WorkSource[] setReturningDiffs(WorkSource)>
/**
 * Legacy API, DO NOT USE: Only deals with flat UIDs and tags. No chains are transferred, and no
 * differences in chains are returned. This will be removed once its callers have been
 * rewritten.
 *
 * NOTE: This is currently only used in GnssLocationProvider.
 *
 * @hide
 * @deprecated for internal use only. WorkSources are opaque and no external callers should need
 * to be aware of internal differences.
 */
====>[HIDDEN]<android.os.WorkSource: WorkSource[] setReturningDiffs(WorkSource)>    ---->    
<android.view.ViewGroup: void invalidateChild(View,Rect)>
/**
 * Don't call or override this method. It is used for the implementation of
 * the view hierarchy.
 *
 * @deprecated Use {@link #onDescendantInvalidated(View, View)} instead to observe updates to
 * draw state in descendants.
 */
====>[PUBLIC]<android.view.ViewGroup: void invalidateChild(View,Rect)>    ---->    #onDescendantInvalidated(View, View)
<android.net.wifi.WifiManager: String getCurrentNetworkWpsNfcConfigurationToken()>
/**
 * WPS has been deprecated from Client mode operation.
 *
 * @return null
 * @hide
 * @deprecated This API is deprecated
 */
====>[HIDDEN]<android.net.wifi.WifiManager: String getCurrentNetworkWpsNfcConfigurationToken()>    ---->    
<android.app.Instrumentation: void stopAllocCounting()>

====>[PUBLIC]<android.app.Instrumentation: void stopAllocCounting()>    ---->    
<android.text.Html: Spanned fromHtml(String)>
/**
 * Returns displayable styled text from the provided HTML string with the legacy flags
 * {@link #FROM_HTML_MODE_LEGACY}.
 *
 * @deprecated use {@link #fromHtml(String, int)} instead.
 */
====>[PUBLIC]<android.text.Html: Spanned fromHtml(String)>    ---->    #fromHtml(String, int)
<android.renderscript.RSTextureView: boolean onSurfaceTextureDestroyed(SurfaceTexture)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.RSTextureView: boolean onSurfaceTextureDestroyed(SurfaceTexture)>    ---->    
<android.provider.MediaStore.Video.Thumbnails: Bitmap getThumbnail(ContentResolver,long,int,Options)>
/**
 * Return thumbnail representing a specific video item. If a
 * thumbnail doesn't exist, this method will block until it's
 * generated. Callers are responsible for their own in-memory
 * caching of returned values.
 *
 * @param videoId the video item to obtain a thumbnail for.
 * @param kind optimal thumbnail size desired.
 * @return decoded thumbnail, or {@code null} if problem was
 * encountered.
 * @deprecated Callers should migrate to using
 * {@link ContentResolver#loadThumbnail}, since it
 * offers richer control over requested thumbnail sizes
 * and cancellation behavior.
 */
====>[PUBLIC]<android.provider.MediaStore.Video.Thumbnails: Bitmap getThumbnail(ContentResolver,long,int,Options)>    ---->    
<android.app.job.JobInfo: int getNetworkType()>
/**
 * Return the basic description of the kind of network this job requires.
 *
 * @deprecated This method attempts to map {@link #getRequiredNetwork()}
 * into the set of simple constants, which results in a loss of
 * fidelity. Callers should move to using
 * {@link #getRequiredNetwork()} directly.
 * @see Builder#setRequiredNetworkType(int)
 */
====>[PUBLIC]<android.app.job.JobInfo: int getNetworkType()>    ---->    Builder#setRequiredNetworkType(int)
Inconsistency (Non-Documentation):<com.android.internal.widget.LockPatternUtils: void setLegacyLockPatternEnabled(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/com/android/internal/widget/LockPatternUtils.java
<com.android.internal.widget.LockPatternUtils: void setLegacyLockPatternEnabled(int)>

====>[PUBLIC]<com.android.internal.widget.LockPatternUtils: void setLegacyLockPatternEnabled(int)>    ---->    
<android.webkit.WebView: String findAddress(String)>
/**
 * Gets the first substring which appears to be the address of a physical
 * location. Only addresses in the United States can be detected, which
 * must consist of:
 * <ul>
 * <li>a house number</li>
 * <li>a street name</li>
 * <li>a street type (Road, Circle, etc), either spelled out or
 * abbreviated</li>
 * <li>a city name</li>
 * <li>a state or territory, either spelled out or two-letter abbr</li>
 * <li>an optional 5 digit or 9 digit zip code</li>
 * </ul>
 * All names must be correctly capitalized, and the zip code, if present,
 * must be valid for the state. The street type must be a standard USPS
 * spelling or abbreviation. The state or territory must also be spelled
 * or abbreviated using USPS standards. The house number may not exceed
 * five digits.
 *
 * <p class="note"><b>Note:</b> This function is deprecated and should be
 * avoided on all API levels, as it cannot detect addresses outside of the
 * United States and has a high rate of false positives. On API level
 * {@link android.os.Build.VERSION_CODES#O_MR1} and earlier, it also causes
 * the entire WebView implementation to be loaded and initialized, which
 * can throw {@link android.util.AndroidRuntimeException} or other exceptions
 * if the WebView implementation is currently being updated.
 *
 * @param addr the string to search for addresses
 * @return the address, or if no address is found, {@code null}
 * @deprecated This method is superseded by {@link TextClassifier#generateLinks(
 * android.view.textclassifier.TextLinks.Request)}. Avoid using this method even when targeting
 * API levels where no alternative is available.
 */
====>[PUBLIC]<android.webkit.WebView: String findAddress(String)>    ---->    TextClassifier#generateLinks(  android.view.textclassifier.TextLinks.Request)
<android.util.proto.ProtoOutputStream: void writeInt32(long,int)>
/**
 * Write a single proto "int32" type field value.
 *
 * Note that these are stored in memory as signed values and written as unsigned
 * varints, which if negative, are 10 bytes long. If you know the data is likely
 * to be negative, use "sint32".
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeInt32(long,int)>    ---->    #write
<android.content.pm.PackageInstaller: void addSessionCallback(SessionCallback)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.content.pm.PackageInstaller: void addSessionCallback(SessionCallback)>    ---->    
Inconsistency (Non-Documentation):<android.app.ContextImpl: void sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/ContextImpl.java
<android.app.ContextImpl: void sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)>

====>[PUBLIC]<android.app.ContextImpl: void sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)>    ---->    
<android.webkit.Plugin: String getFileName()>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin: String getFileName()>    ---->    
<com.android.server.location.AbstractLocationProvider: int getStatus(Bundle)>
/**
 * Retrieves the current status of the provider.
 *
 * @deprecated Will be removed in a future release.
 */
====>[PUBLIC]<com.android.server.location.AbstractLocationProvider: int getStatus(Bundle)>    ---->    
<android.telecom.InCallService: AudioState getAudioState()>
/**
 * Obtains the current phone call audio state.
 *
 * @return An object encapsulating the audio state. Returns null if the service is not
 * fully initialized.
 * @deprecated Use {@link #getCallAudioState()} instead.
 * @hide
 */
====>[HIDDEN]<android.telecom.InCallService: AudioState getAudioState()>    ---->    #getCallAudioState()
<com.android.internal.logging.MetricsLogger: void visible(Context,int)>
/**
 * @deprecated because untestable; use {@link #visible(int)}
 */
====>[PUBLIC]<com.android.internal.logging.MetricsLogger: void visible(Context,int)>    ---->    #visible(int)
<android.util.proto.ProtoOutputStream: void writePackedFixed64(long,long[])>
/**
 * Write a list of packed proto "fixed64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedFixed64(long,long[])>    ---->    #write
<android.webkit.WebSettings: void setSavePassword(boolean)>
/**
 * Sets whether the WebView should save passwords. The default is {@code true}.
 * @deprecated Saving passwords in WebView will not be supported in future versions.
 */
====>[PUBLIC]<android.webkit.WebSettings: void setSavePassword(boolean)>    ---->    
<android.app.Activity: void showDialog(int)>
/**
 * Simple version of {@link #showDialog(int, Bundle)} that does not
 * take any arguments.  Simply calls {@link #showDialog(int, Bundle)}
 * with null arguments.
 *
 * @deprecated Use the new {@link DialogFragment} class with
 * {@link FragmentManager} instead; this is also
 * available on older platforms through the Android compatibility package.
 */
====>[PUBLIC]<android.app.Activity: void showDialog(int)>    ---->    DialogFragment
<com.android.location.provider.LocationProviderBase: void onDump(FileDescriptor,PrintWriter,String[])>
/**
 * @deprecated This callback will never be invoked on Android Q and above. This method may be
 * removed in the future. Prefer to dump provider state via the containing service instead.
 */
====>[PUBLIC]<com.android.location.provider.LocationProviderBase: void onDump(FileDescriptor,PrintWriter,String[])>    ---->    lback will never be invoked on Android Q and above. This method may be  removed in the future. Prefer to dump provider state via the containing service
<android.view.WindowInsets: Rect getSystemWindowInsetsAsRect()>
/**
 * Used to provide a safe copy of the system window insets to pass through
 * to the existing fitSystemWindows method and other similar internals.
 * @hide
 *
 * @deprecated use {@link #getSystemWindowInsets()} instead.
 */
====>[HIDDEN]<android.view.WindowInsets: Rect getSystemWindowInsetsAsRect()>    ---->    #getSystemWindowInsets()
<android.webkit.WebView: void setCertificate(SslCertificate)>
/**
 * Sets the SSL certificate for the main top-level page.
 *
 * @deprecated Calling this function has no useful effect, and will be
 * ignored in future releases.
 */
====>[PUBLIC]<android.webkit.WebView: void setCertificate(SslCertificate)>    ---->    
<android.app.Activity: Dialog onCreateDialog(int)>
/**
 * @deprecated Old no-arguments version of {@link #onCreateDialog(int, Bundle)}.
 */
====>[PUBLIC]<android.app.Activity: Dialog onCreateDialog(int)>    ---->    #onCreateDialog(int, Bundle)
<android.telephony.TelephonyManager: void setVoicemailVibrationEnabled(PhoneAccountHandle,boolean)>
/**
 * Sets the per-account preference whether vibration is enabled for voicemail notifications.
 *
 * <p>Requires that the calling app is the default dialer, or has carrier privileges (see
 * {@link #hasCarrierPrivileges}, or has permission
 * {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}.
 *
 * @param phoneAccountHandle The handle for the {@link PhoneAccount} for which to set the
 * voicemail vibration setting.
 * @param enabled Whether to enable or disable vibration for voicemail notifications from a
 * specific PhoneAccount.
 *
 * @deprecated Use {@link android.provider.Settings#ACTION_CHANNEL_NOTIFICATION_SETTINGS}
 * instead.
 */
====>[PUBLIC]<android.telephony.TelephonyManager: void setVoicemailVibrationEnabled(PhoneAccountHandle,boolean)>    ---->    android.provider.Settings#ACTION_CHANNEL_NOTIFICATION_SETTINGS
<android.app.Activity: void removeDialog(int)>
/**
 * Removes any internal references to a dialog managed by this Activity.
 * If the dialog is showing, it will dismiss it as part of the clean up.
 *
 * <p>This can be useful if you know that you will never show a dialog again and
 * want to avoid the overhead of saving and restoring it in the future.
 *
 * <p>As of {@link android.os.Build.VERSION_CODES#GINGERBREAD}, this function
 * will not throw an exception if you try to remove an ID that does not
 * currently have an associated dialog.</p>
 *
 * @param id The id of the managed dialog.
 *
 * @see #onCreateDialog(int, Bundle)
 * @see #onPrepareDialog(int, Dialog, Bundle)
 * @see #showDialog(int)
 * @see #dismissDialog(int)
 *
 * @deprecated Use the new {@link DialogFragment} class with
 * {@link FragmentManager} instead; this is also
 * available on older platforms through the Android compatibility package.
 */
====>[PUBLIC]<android.app.Activity: void removeDialog(int)>    ---->    DialogFragment
<android.media.tv.TvInputInfo: TvInputInfo createTvInputInfo(Context,ResolveInfo,HdmiDeviceInfo,String,int,Icon)>
/**
 * Create a new instance of the TvInputInfo class, instantiating it from the given Context,
 * ResolveInfo, and HdmiDeviceInfo.
 *
 * @param service The ResolveInfo returned from the package manager about this TV input service.
 * @param hdmiDeviceInfo The HdmiDeviceInfo for a HDMI CEC logical device.
 * @param parentId The ID of this TV input's parent input. {@code null} if none exists.
 * @param labelRes The label resource ID of this TvInputInfo. If it is {@code 0},
 * {@code service} label will be loaded.
 * @param icon The {@link android.graphics.drawable.Icon} to load the icon image. If it is
 * {@code null}, the application icon of {@code service} will be loaded.
 * @hide
 * @deprecated Use {@link Builder} instead.
 */
====>[HIDDEN]<android.media.tv.TvInputInfo: TvInputInfo createTvInputInfo(Context,ResolveInfo,HdmiDeviceInfo,String,int,Icon)>    ---->    Builder
<android.media.MediaDrm: void releaseAllSecureStops()>
/**
 * Remove all secure stops without requiring a secure stop release message from
 * the license server.
 *
 * @deprecated Remove all secure stops using {@link #removeAllSecureStops} instead.
 */
====>[PUBLIC]<android.media.MediaDrm: void releaseAllSecureStops()>    ---->    #removeAllSecureStops
<android.provider.Contacts.Presence: int getPresenceIconResourceId(int)>
/**
 * Gets the resource ID for the proper presence icon.
 *
 * @param status the status to get the icon for
 * @return the resource ID for the proper presence icon
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.Presence: int getPresenceIconResourceId(int)>    ---->    android.provider.ContactsContract
<android.telephony.PhoneNumberUtils: boolean isEmergencyNumber(String)>
/**
 * Checks a given number against the list of
 * emergency numbers provided by the RIL and SIM card.
 *
 * @param number the number to look up.
 * @return true if the number is in the list of emergency numbers
 * listed in the RIL / SIM, otherwise return false.
 *
 * @deprecated Please use {@link TelephonyManager#isEmergencyNumber(String)} instead.
 */
====>[PUBLIC]<android.telephony.PhoneNumberUtils: boolean isEmergencyNumber(String)>    ---->    TelephonyManager#isEmergencyNumber(String)
Inconsistency (Non-Documentation):<android.util.RecurrenceRule: boolean isMonthly()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/util/RecurrenceRule.java
<android.util.RecurrenceRule: boolean isMonthly()>

====>[PUBLIC]<android.util.RecurrenceRule: boolean isMonthly()>    ---->    
<android.util.TypedValue: float complexToDimensionNoisy(int,DisplayMetrics)>
/**
 * @hide Was accidentally exposed in API level 1 for debugging purposes.
 * Kept for compatibility just in case although the debugging code has been removed.
 */
====>[HIDDEN]<android.util.TypedValue: float complexToDimensionNoisy(int,DisplayMetrics)>    ---->    
<android.text.style.SuggestionSpan: String getLocale()>
/**
 * @deprecated use {@link #getLocaleObject()} instead.
 * @return the locale of the suggestions. An empty string is returned if no locale is specified.
 */
====>[PUBLIC]<android.text.style.SuggestionSpan: String getLocale()>    ---->    #getLocaleObject()
<android.webkit.CacheManager: CacheResult getCacheFile(String,Map<String, String>)>
/**
 * Gets the cache entry for the specified URL, or {@code null} if none is found.
 * If a non-null value is provided for the HTTP headers map, and the cache
 * entry needs validation, appropriate headers will be added to the map.
 * The input stream of the CacheEntry object should be closed by the caller
 * when access to the underlying file is no longer required.
 *
 * @param url the URL for which a cache entry is requested
 * @param headers a map from HTTP header name to value, to be populated
 * for the returned cache entry
 * @return the cache entry for the specified URL
 * @deprecated This method no longer has any effect and always returns {@code null}.
 */
====>[PUBLIC]<android.webkit.CacheManager: CacheResult getCacheFile(String,Map<String, String>)>    ---->    
Inconsistency (Non-Documentation):<androidx.media.filterfw.CameraStreamer.CameraRunnable: Camera getCamera()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//tests/Camera2Tests/SmartCamera/SimpleCamera/src/androidx/media/filterfw/CameraStreamer.java
<androidx.media.filterfw.CameraStreamer.CameraRunnable: Camera getCamera()>

====>[PUBLIC]<androidx.media.filterfw.CameraStreamer.CameraRunnable: Camera getCamera()>    ---->    
<android.net.ConnectivityManager: NetworkQuotaInfo getActiveNetworkQuotaInfo()>
/**
 * {@hide}
 */
====>[HIDDEN]<android.net.ConnectivityManager: NetworkQuotaInfo getActiveNetworkQuotaInfo()>    ---->    
Inconsistency (Non-Documentation):<android.content.ContextWrapper: void clearWallpaper()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/content/ContextWrapper.java
<android.content.ContextWrapper: void clearWallpaper()>

====>[PUBLIC]<android.content.ContextWrapper: void clearWallpaper()>    ---->    
<android.webkit.Plugin: String toString()>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin: String toString()>    ---->    
<android.telephony.PhoneNumberUtils: void ttsSpanAsPhoneNumber(Spannable,int,int)>
/**
 * Attach a {@link TtsSpan} to the supplied {@code Spannable} at the indicated location,
 * annotating that location as containing a phone number.
 *
 * @param s A {@code Spannable} to annotate.
 * @param start The starting character position of the phone number in {@code s}.
 * @param end The ending character position of the phone number in {@code s}.
 *
 * @deprecated Renamed {@link #addTtsSpan}.
 *
 * @hide
 */
====>[HIDDEN]<android.telephony.PhoneNumberUtils: void ttsSpanAsPhoneNumber(Spannable,int,int)>    ---->    #addTtsSpan
<android.app.Notification.InboxStyle: void <init>(Builder)>
/**
 * @deprecated use {@code InboxStyle()}.
 */
====>[PUBLIC]<android.app.Notification.InboxStyle: void <init>(Builder)>    ---->    
<android.net.shared.LinkPropertiesParcelableUtil: ProxyInfo toStableParcelable(ProxyInfo)>
/**
 * @deprecated conversion to stable parcelable is no longer necessary.
 */
====>[PUBLIC]<android.net.shared.LinkPropertiesParcelableUtil: ProxyInfo toStableParcelable(ProxyInfo)>    ---->    
<android.database.sqlite.SQLiteCursor: void <init>(SQLiteDatabase,SQLiteCursorDriver,String,SQLiteQuery)>
/**
 * Execute a query and provide access to its result set through a Cursor
 * interface. For a query such as: {@code SELECT name, birth, phone FROM
 * myTable WHERE ... LIMIT 1,20 ORDER BY...} the column names (name, birth,
 * phone) would be in the projection argument and everything from
 * {@code FROM} onward would be in the params argument.
 *
 * @param db a reference to a Database object that is already constructed
 * and opened. This param is not used any longer
 * @param editTable the name of the table used for this query
 * @param query the rest of the query terms
 * cursor is finalized
 * @deprecated use {@link #SQLiteCursor(SQLiteCursorDriver, String, SQLiteQuery)} instead
 */
====>[PUBLIC]<android.database.sqlite.SQLiteCursor: void <init>(SQLiteDatabase,SQLiteCursorDriver,String,SQLiteQuery)>    ---->    #SQLiteCursor(SQLiteCursorDriver, String, SQLiteQuery)
<android.app.ActionBar: void setNavigationMode(int)>
/**
 * Set the current navigation mode.
 *
 * @param mode The new mode to set.
 * @see #NAVIGATION_MODE_STANDARD
 * @see #NAVIGATION_MODE_LIST
 * @see #NAVIGATION_MODE_TABS
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: void setNavigationMode(int)>    ---->    
<android.os.Debug: int getGlobalClassInitTime()>
/**
 * Returns the time spent successfully initializing classes between a
 * {@link #startAllocCounting() start} and {@link #stopAllocCounting() stop}.
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: int getGlobalClassInitTime()>    ---->    
<android.app.admin.DevicePolicyManager: String getCertInstallerPackage(ComponentName)>
/**
 * Called by a profile owner or device owner to retrieve the certificate installer for the user,
 * or {@code null} if none is set. If there are multiple delegates this function will return one
 * of them.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @return The package name of the current delegated certificate installer, or {@code null} if
 * none is set.
 * @throws SecurityException if {@code admin} is not a device or a profile owner.
 *
 * @deprecated From {@link android.os.Build.VERSION_CODES#O}. Use {@link #getDelegatePackages}
 * with the {@link #DELEGATION_CERT_INSTALL} scope instead.
 */
====>[PUBLIC]<android.app.admin.DevicePolicyManager: String getCertInstallerPackage(ComponentName)>    ---->    #getDelegatePackages
<com.android.internal.app.SimpleIconFactory: void <init>(Context,int,int,int)>
/**
 * @deprecated Do not use, functionality will be replaced by iconloader lib eventually.
 */
====>[PUBLIC]<com.android.internal.app.SimpleIconFactory: void <init>(Context,int,int,int)>    ---->    
<junit.runner.BaseTestRunner: boolean inVAJava()>
/**
 * @deprecated not present in JUnit4.10
 */
====>[PUBLIC]<junit.runner.BaseTestRunner: boolean inVAJava()>    ---->    
<android.app.usage.StorageStatsManager: boolean isQuotaSupported(String)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.usage.StorageStatsManager: boolean isQuotaSupported(String)>    ---->    
<android.app.PendingIntent: String getTargetPackage()>
/**
 * @deprecated Renamed to {@link #getCreatorPackage()}.
 */
====>[PUBLIC]<android.app.PendingIntent: String getTargetPackage()>    ---->    #getCreatorPackage()
<android.app.StatsManager: byte[] getData(long)>
/**
 * @deprecated Use {@link #getReports(long)}
 */
====>[PUBLIC]<android.app.StatsManager: byte[] getData(long)>    ---->    #getReports(long)
<android.view.inputmethod.InputMethodManager: void setInputMethodAndSubtype(IBinder,String,InputMethodSubtype)>
/**
 * Force switch to a new input method and subtype. This can only be called
 * from an application or a service which has a token of the currently active input method.
 *
 * <p>On Android {@link Build.VERSION_CODES#Q} and later devices, {@code token} cannot be
 * {@code null} even with {@link android.Manifest.permission#WRITE_SECURE_SETTINGS}. Instead,
 * update {@link android.provider.Settings.Secure#DEFAULT_INPUT_METHOD} and
 * {@link android.provider.Settings.Secure#SELECTED_INPUT_METHOD_SUBTYPE} directly.</p>
 *
 * @param token Supplies the identifying token given to an input method
 * when it was started, which allows it to perform this operation on
 * itself.
 * @param id The unique identifier for the new input method to be switched to.
 * @param subtype The new subtype of the new input method to be switched to.
 * @deprecated Use
 * {@link InputMethodService#switchInputMethod(String, InputMethodSubtype)}
 * instead. This method was intended for IME developers who should be accessing APIs through
 * the service. APIs in this class are intended for app developers interacting with the IME.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodManager: void setInputMethodAndSubtype(IBinder,String,InputMethodSubtype)>    ---->    InputMethodService#switchInputMethod(String, InputMethodSubtype)
<com.android.internal.widget.RecyclerView: int getChildPosition(View)>
/**
 * @deprecated use {@link #getChildAdapterPosition(View)} or
 * {@link #getChildLayoutPosition(View)}.
 */
====>[PUBLIC]<com.android.internal.widget.RecyclerView: int getChildPosition(View)>    ---->    #getChildAdapterPosition(View)
<android.telephony.TelephonyManager: boolean getDataEnabled()>
/**
 * @deprecated use {@link #isDataEnabled()} instead.
 * @hide
 */
====>[HIDDEN]<android.telephony.TelephonyManager: boolean getDataEnabled()>    ---->    #isDataEnabled()
<android.preference.PreferenceActivity: void addPreferencesFromIntent(Intent)>
/**
 * Adds preferences from activities that match the given {@link Intent}.
 *
 * @param intent The {@link Intent} to query activities.
 *
 * @deprecated This function is not relevant for a modern fragment-based
 * PreferenceActivity.
 */
====>[PUBLIC]<android.preference.PreferenceActivity: void addPreferencesFromIntent(Intent)>    ---->    
<android.app.Notification.WearableExtender: boolean getHintAmbientBigPicture()>
/**
 * Get a hint that this notification's {@link BigPictureStyle} (if present) should be
 * converted to low-bit and displayed in ambient mode, especially useful for barcodes and
 * qr codes, as well as other simple black-and-white tickets.
 * @return {@code true} if it should be displayed in ambient, false otherwise
 * otherwise. The default value is {@code false} if this was never set.
 * @deprecated This feature is no longer supported.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: boolean getHintAmbientBigPicture()>    ---->    
<com.android.server.testutils.OffsettableClock: long getAsLong()>
/**
 * @deprecated Only present for {@link LongSupplier} contract
 */
====>[PUBLIC]<com.android.server.testutils.OffsettableClock: long getAsLong()>    ---->    LongSupplier
<com.android.server.am.ActivityManagerService: void removeContentProviderExternal(String,IBinder)>
/**
 * @deprecated - Use {@link #removeContentProviderExternalAsUser} which takes a user ID.
 */
====>[PUBLIC]<com.android.server.am.ActivityManagerService: void removeContentProviderExternal(String,IBinder)>    ---->    #removeContentProviderExternalAsUser
<android.app.backup.BackupManager: String selectBackupTransport(String)>
/**
 * Specify the current backup transport.
 *
 * @param transport The name of the transport to select.  This should be one
 * of the names returned by {@link #listAllTransports()}. This is the String returned by
 * {@link BackupTransport#name()} for the particular transport.
 * @return The name of the previously selected transport.  If the given transport
 * name is not one of the currently available transports, no change is made to
 * the current transport setting and the method returns null.
 *
 * @hide
 */
====>[HIDDEN]<android.app.backup.BackupManager: String selectBackupTransport(String)>    ---->    
<android.drm.DrmSupportInfo: String getDescriprition()>
/**
 * Retrieves the DRM plug-in (agent) description.
 *
 * @return The plug-in description.
 * @deprecated The method name is mis-spelled, and it is replaced by
 * {@link #getDescription()}.
 */
====>[PUBLIC]<android.drm.DrmSupportInfo: String getDescriprition()>    ---->    #getDescription()
<android.telecom.Phone.Listener: void onAudioStateChanged(Phone,AudioState)>
/**
 * Called when the audio state changes.
 *
 * @param phone The {@code Phone} calling this method.
 * @param audioState The new {@link AudioState}.
 *
 * @deprecated Use {@link #onCallAudioStateChanged(Phone, CallAudioState)} instead.
 */
====>[PUBLIC]<android.telecom.Phone.Listener: void onAudioStateChanged(Phone,AudioState)>    ---->    #onCallAudioStateChanged(Phone, CallAudioState)
<com.android.internal.app.SimpleIconFactory: SimpleIconFactory obtain(Context)>
/**
 * Obtain a SimpleIconFactory from a pool objects.
 *
 * @deprecated Do not use, functionality will be replaced by iconloader lib eventually.
 */
====>[PUBLIC]<com.android.internal.app.SimpleIconFactory: SimpleIconFactory obtain(Context)>    ---->    
<android.renderscript.ProgramFragmentFixedFunction.InternalBuilder: void <init>(RenderScript)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.ProgramFragmentFixedFunction.InternalBuilder: void <init>(RenderScript)>    ---->    
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)>
/**
 * Enable or disable Wi-Fi.
 * <p>
 * Applications must have the {@link android.Manifest.permission#CHANGE_WIFI_STATE}
 * permission to toggle wifi.
 *
 * @param enabled {@code true} to enable, {@code false} to disable.
 * @return {@code false} if the request cannot be satisfied; {@code true} indicates that wifi is
 * either already in the requested state, or in progress toward the requested state.
 * @throws  {@link java.lang.SecurityException} if the caller is missing required permissions.
 *
 * @deprecated Starting with Build.VERSION_CODES#Q, applications are not allowed to
 * enable/disable Wi-Fi.
 * <b>Compatibility Note:</b> For applications targeting
 * {@link android.os.Build.VERSION_CODES#Q} or above, this API will always return {@code false}
 * and will have no effect. If apps are targeting an older SDK (
 * {@link android.os.Build.VERSION_CODES#P} or below), they can continue to use this API.
 */
====>[PUBLIC]<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)>    ---->    
<android.content.Context: void setWallpaper(InputStream)>
/**
 * @deprecated Use {@link android.app.WallpaperManager#setStream(InputStream)
 * WallpaperManager.set()} instead.
 * <p>This method requires the caller to hold the permission
 * {@link android.Manifest.permission#SET_WALLPAPER}.
 */
====>[PUBLIC]<android.content.Context: void setWallpaper(InputStream)>    ---->    android.app.WallpaperManager#setStream(InputStream)  WallpaperManager.set()
<android.webkit.WebSettings: void setPluginState(PluginState)>
/**
 * Tells the WebView to enable, disable, or have plugins on demand. On
 * demand mode means that if a plugin exists that can handle the embedded
 * content, a placeholder icon will be shown instead of the plugin. When
 * the placeholder is clicked, the plugin will be enabled. The default is
 * {@link PluginState#OFF}.
 *
 * @param state a PluginState value
 * @deprecated Plugins are not supported in API level
 * {@link android.os.Build.VERSION_CODES#KITKAT} or later;
 * enabling plugins is a no-op.
 */
====>[PUBLIC]<android.webkit.WebSettings: void setPluginState(PluginState)>    ---->    
<android.app.PictureInPictureArgs: void setAspectRatio(float)>
/**
 * @hide
 */
====>[HIDDEN]<android.app.PictureInPictureArgs: void setAspectRatio(float)>    ---->    
<android.net.wifi.WifiManager.WpsCallback: void onStarted(String)>
/**
 * WPS start succeeded
 * @deprecated This API is deprecated
 */
====>[PUBLIC]<android.net.wifi.WifiManager.WpsCallback: void onStarted(String)>    ---->    
<android.telephony.SignalStrength: int getEvdoSnr()>
/**
 * Get the signal to noise ratio. Valid values are 0-8. 8 is the highest.
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthCdma#getEvdoSnr}.
 *
 * @see android.telephony#CellSignalStrengthCdma
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 */
====>[PUBLIC]<android.telephony.SignalStrength: int getEvdoSnr()>    ---->    android.telephony#CellSignalStrengthCdma
<android.preference.PreferenceActivity: void addPreferencesFromResource(int)>
/**
 * Inflates the given XML resource and adds the preference hierarchy to the current
 * preference hierarchy.
 *
 * @param preferencesResId The XML resource ID to inflate.
 *
 * @deprecated This function is not relevant for a modern fragment-based
 * PreferenceActivity.
 */
====>[PUBLIC]<android.preference.PreferenceActivity: void addPreferencesFromResource(int)>    ---->    
<android.os.UserManager: int getUserRestrictionSource(String,UserHandle)>
/**
 * @hide
 *
 * Returns who set a user restriction on a user.
 * @param restrictionKey the string key representing the restriction
 * @param userHandle the UserHandle of the user for whom to retrieve the restrictions.
 * @return The source of user restriction. Any combination of {@link #RESTRICTION_NOT_SET},
 * {@link #RESTRICTION_SOURCE_SYSTEM}, {@link #RESTRICTION_SOURCE_DEVICE_OWNER}
 * and {@link #RESTRICTION_SOURCE_PROFILE_OWNER}
 * @deprecated use {@link #getUserRestrictionSources(String, int)} instead.
 */
====>[HIDDEN]<android.os.UserManager: int getUserRestrictionSource(String,UserHandle)>    ---->    #getUserRestrictionSources(String, int)
<android.view.WindowInsets: WindowInsets replaceSystemWindowInsets(Rect)>
/**
 * Returns a copy of this WindowInsets with selected system window insets replaced
 * with new values.
 *
 * <p>Note: If the system window insets are already consumed, this method will return them
 * unchanged on {@link android.os.Build.VERSION_CODES#Q Q} and later. Prior to
 * {@link android.os.Build.VERSION_CODES#Q Q}, the new values were applied regardless of
 * whether they were consumed, and this method returns invalid non-zero consumed insets.
 *
 * @param systemWindowInsets New system window insets. Each field is the inset in pixels
 * for that edge
 * @return A modified copy of this WindowInsets
 * @deprecated use {@code Builder#Builder(WindowInsets)} with
 * {@link Builder#setSystemWindowInsets(Insets)} instead.
 */
====>[PUBLIC]<android.view.WindowInsets: WindowInsets replaceSystemWindowInsets(Rect)>    ---->    Builder#setSystemWindowInsets(Insets)
<android.webkit.WebView: boolean restorePicture(Bundle,File)>
/**
 * Restores the display data that was saved in {@link #savePicture}. Used in
 * conjunction with {@link #restoreState}. Note that this will not work if
 * this WebView is hardware accelerated.
 *
 * @param b a Bundle containing the saved display data
 * @param src the file where the picture data was stored
 * @return {@code true} if the picture was successfully restored
 * @deprecated This method is now obsolete.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebView: boolean restorePicture(Bundle,File)>    ---->    
<android.content.res.ColorStateList: ColorStateList createFromXml(Resources,XmlPullParser)>
/**
 * Creates a ColorStateList from an XML document.
 *
 * @param r Resources against which the ColorStateList should be inflated.
 * @param parser Parser for the XML document defining the ColorStateList.
 * @return A new color state list.
 *
 * @deprecated Use #createFromXml(Resources, XmlPullParser parser, Theme)
 */
====>[PUBLIC]<android.content.res.ColorStateList: ColorStateList createFromXml(Resources,XmlPullParser)>    ---->    
<android.view.ViewParent: void invalidateChild(View,Rect)>
/**
 * All or part of a child is dirty and needs to be redrawn.
 *
 * @param child The child which is dirty
 * @param r The area within the child that is invalid
 *
 * @deprecated Use {@link #onDescendantInvalidated(View, View)} instead.
 */
====>[PUBLIC]<android.view.ViewParent: void invalidateChild(View,Rect)>    ---->    #onDescendantInvalidated(View, View)
<android.hardware.radio.RadioTuner.Callback: void onError(int)>
/**
 * onError() is called when an error occured while performing an asynchronous
 * operation of when the hardware or system service experiences a problem.
 * status is one of {@link #ERROR_HARDWARE_FAILURE}, {@link #ERROR_SERVER_DIED},
 * {@link #ERROR_CANCELLED}, {@link #ERROR_SCAN_TIMEOUT},
 * {@link #ERROR_CONFIG}
 *
 * @deprecated Use {@link onTuneFailed} for tune, scan and step;
 * other use cases (configuration, background scan) are already deprecated.
 */
====>[PUBLIC]<android.hardware.radio.RadioTuner.Callback: void onError(int)>    ---->    onTuneFailed
<android.drm.DrmStore.Playback: void <init>()>
/**
 * @deprecated This class should have been an interface instead.
 * The default constuctor should have not been exposed.
 */
====>[PUBLIC]<android.drm.DrmStore.Playback: void <init>()>    ---->    
Inconsistency (Non-Documentation):<android.app.ContextImpl: Drawable getWallpaper()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/ContextImpl.java
<android.app.ContextImpl: Drawable getWallpaper()>

====>[PUBLIC]<android.app.ContextImpl: Drawable getWallpaper()>    ---->    
<android.database.sqlite.SQLiteDatabase: boolean yieldIfContended()>
/**
 * Temporarily end the transaction to let other threads run. The transaction is assumed to be
 * successful so far. Do not call setTransactionSuccessful before calling this. When this
 * returns a new transaction will have been created but not marked as successful.
 * @return true if the transaction was yielded
 * @deprecated if the db is locked more than once (because of nested transactions) then the lock
 * will not be yielded. Use yieldIfContendedSafely instead.
 */
====>[PUBLIC]<android.database.sqlite.SQLiteDatabase: boolean yieldIfContended()>    ---->    of nested transactions) then the lock  will not be yielded. Use yieldIfContendedSafely
Inconsistency (Non-Documentation):<com.android.internal.util.XmlUtils: void writeBitmapAttribute(XmlSerializer,String,Bitmap)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/com/android/internal/util/XmlUtils.java
<com.android.internal.util.XmlUtils: void writeBitmapAttribute(XmlSerializer,String,Bitmap)>

====>[PUBLIC]<com.android.internal.util.XmlUtils: void writeBitmapAttribute(XmlSerializer,String,Bitmap)>    ---->    
<android.graphics.ColorFilter: void <init>()>
/**
 * @deprecated Use subclass constructors directly instead.
 */
====>[PUBLIC]<android.graphics.ColorFilter: void <init>()>    ---->    subclass constructors directly
<android.app.Activity: void onPictureInPictureModeChanged(boolean)>
/**
 * Called by the system when the activity changes to and from picture-in-picture mode.
 *
 * @see android.R.attr#supportsPictureInPicture
 *
 * @param isInPictureInPictureMode True if the activity is in picture-in-picture mode.
 *
 * @deprecated Use {@link #onPictureInPictureModeChanged(boolean, Configuration)} instead.
 */
====>[PUBLIC]<android.app.Activity: void onPictureInPictureModeChanged(boolean)>    ---->    #onPictureInPictureModeChanged(boolean, Configuration)
<android.renderscript.ProgramRaster.Builder: Builder setCullMode(CullMode)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.ProgramRaster.Builder: Builder setCullMode(CullMode)>    ---->    
<android.renderscript.RSSurfaceView: void surfaceCreated(SurfaceHolder)>
/**
 * @deprecated in API 16
 * This method is part of the SurfaceHolder.Callback interface, and is
 * not normally called or subclassed by clients of RSSurfaceView.
 */
====>[PUBLIC]<android.renderscript.RSSurfaceView: void surfaceCreated(SurfaceHolder)>    ---->    
<android.telephony.TelephonyManager: void setVisualVoicemailEnabled(PhoneAccountHandle,boolean)>
/**
 * Enables or disables the visual voicemail client for a phone account.
 *
 * <p>Requires that the calling app is the default dialer, or has carrier privileges (see
 * {@link #hasCarrierPrivileges}), or has permission
 * {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}.
 *
 * @param phoneAccountHandle the phone account to change the client state
 * @param enabled the new state of the client
 * @hide
 * @deprecated Visual voicemail no longer in telephony. {@link VisualVoicemailService} should
 * be implemented instead.
 */
====>[HIDDEN]<android.telephony.TelephonyManager: void setVisualVoicemailEnabled(PhoneAccountHandle,boolean)>    ---->    VisualVoicemailService
<android.app.Activity: void startManagingCursor(Cursor)>
/**
 * This method allows the activity to take care of managing the given
 * {@link Cursor}'s lifecycle for you based on the activity's lifecycle.
 * That is, when the activity is stopped it will automatically call
 * {@link Cursor#deactivate} on the given Cursor, and when it is later restarted
 * it will call {@link Cursor#requery} for you.  When the activity is
 * destroyed, all managed Cursors will be closed automatically.
 *
 * <em>If you are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}
 * or later, consider instead using {@link LoaderManager} instead, available
 * via {@link #getLoaderManager()}.</em>
 *
 * <p><strong>Warning:</strong> Do not call {@link Cursor#close()} on cursor obtained from
 * {@link #managedQuery}, because the activity will do that for you at the appropriate time.
 * However, if you call {@link #stopManagingCursor} on a cursor from a managed query, the system
 * <em>will not</em> automatically close the cursor and, in that case, you must call
 * {@link Cursor#close()}.</p>
 *
 * @param c The Cursor to be managed.
 *
 * @see #managedQuery(android.net.Uri , String[], String, String[], String)
 * @see #stopManagingCursor
 *
 * @deprecated Use the new {@link android.content.CursorLoader} class with
 * {@link LoaderManager} instead; this is also
 * available on older platforms through the Android compatibility package.
 */
====>[PUBLIC]<android.app.Activity: void startManagingCursor(Cursor)>    ---->    android.content.CursorLoader
<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder setTexture(float,float)>
/**
 * @deprecated in API 16
 * Sets the texture coordinate for the vertices that are added after this method call.
 *
 * @param s texture coordinate s
 * @param t texture coordinate t
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder setTexture(float,float)>    ---->    
<android.content.pm.PackageManager: String[] setPackagesSuspended(String[],boolean,PersistableBundle,PersistableBundle,String)>
/**
 * Puts the package in a suspended state, where attempts at starting activities are denied.
 *
 * <p>It doesn't remove the data or the actual package file. The application's notifications
 * will be hidden, any of its started activities will be stopped and it will not be able to
 * show toasts or system alert windows or ring the device.
 *
 * <p>When the user tries to launch a suspended app, a system dialog with the given
 * {@code dialogMessage} will be shown instead. Since the message is supplied to the system as
 * a {@link String}, the caller needs to take care of localization as needed.
 * The dialog message can optionally contain a placeholder for the name of the suspended app.
 * The system uses {@link String#format(Locale, String, Object...) String.format} to insert the
 * app name into the message, so an example format string could be {@code "The app %1$s is
 * currently suspended"}. This makes it easier for callers to provide a single message which
 * works for all the packages being suspended in a single call.
 *
 * <p>The package must already be installed. If the package is uninstalled while suspended
 * the package will no longer be suspended. </p>
 *
 * <p>Optionally, the suspending app can provide extra information in the form of
 * {@link PersistableBundle} objects to be shared with the apps being suspended and the
 * launcher to support customization that they might need to handle the suspended state.
 *
 * <p>The caller must hold {@link Manifest.permission#SUSPEND_APPS} to use this API.
 *
 * @param packageNames The names of the packages to set the suspended status.
 * @param suspended If set to {@code true}, the packages will be suspended, if set to
 * {@code false}, the packages will be unsuspended.
 * @param appExtras An optional {@link PersistableBundle} that the suspending app can provide
 * which will be shared with the apps being suspended. Ignored if
 * {@code suspended} is false.
 * @param launcherExtras An optional {@link PersistableBundle} that the suspending app can
 * provide which will be shared with the launcher. Ignored if
 * {@code suspended} is false.
 * @param dialogMessage The message to be displayed to the user, when they try to launch a
 * suspended app.
 *
 * @return an array of package names for which the suspended status could not be set as
 * requested in this method. Returns {@code null} if {@code packageNames} was {@code null}.
 *
 * @deprecated use {@link #setPackagesSuspended(String[], boolean, PersistableBundle,
 * PersistableBundle, android.content.pm.SuspendDialogInfo)} instead.
 *
 * @hide
 */
====>[HIDDEN]<android.content.pm.PackageManager: String[] setPackagesSuspended(String[],boolean,PersistableBundle,PersistableBundle,String)>    ---->    #setPackagesSuspended(String[], boolean, PersistableBundle,  PersistableBundle, android.content.pm.SuspendDialogInfo)
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: String importKey(String,byte[])>
/**
 * Imports a 256-bit AES-GCM key named {@code alias}. The key is stored in system service
 * keystore namespace.
 *
 * @param alias the alias provided by caller as a reference to the key.
 * @param keyBytes the raw bytes of the 256-bit AES key.
 * @return grant alias, which caller can use to access the key.
 * @throws RemoteException if the given key is invalid or some internal errors occur.
 *
 * @deprecated Use {{@link #importKeyWithMetadata(String, byte[], byte[])}} instead.
 *
 * @hide
 */
====>[HIDDEN]<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: String importKey(String,byte[])>    ---->    #importKeyWithMetadata(String, byte[], byte[])
<android.app.Fragment: void onPictureInPictureModeChanged(boolean)>
/**
 * Called by the system when the activity changes to and from picture-in-picture mode. This is
 * generally tied to {@link Activity#onPictureInPictureModeChanged} of the containing Activity.
 *
 * @param isInPictureInPictureMode True if the activity is in picture-in-picture mode.
 *
 * @deprecated Use {@link #onPictureInPictureModeChanged(boolean, Configuration)} instead.
 */
====>[PUBLIC]<android.app.Fragment: void onPictureInPictureModeChanged(boolean)>    ---->    #onPictureInPictureModeChanged(boolean, Configuration)
<android.webkit.WebView: void disablePlatformNotifications()>
/**
 * Disables platform notifications of data state and proxy changes.
 * Notifications are enabled by default.
 *
 * @deprecated This method is now obsolete.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebView: void disablePlatformNotifications()>    ---->    
Inconsistency (Non-Documentation):<android.app.Fragment: void performPictureInPictureModeChanged(boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Fragment.java
<android.app.Fragment: void performPictureInPictureModeChanged(boolean)>

====>[PUBLIC]<android.app.Fragment: void performPictureInPictureModeChanged(boolean)>    ---->    
<android.database.CursorWindow: boolean isNull(int,int)>
/**
 * Returns true if the field at the specified row and column index
 * has type {@link Cursor#FIELD_TYPE_NULL}.
 *
 * @param row The zero-based row index.
 * @param column The zero-based column index.
 * @return True if the field has type {@link Cursor#FIELD_TYPE_NULL}.
 * @deprecated Use {@link #getType(int, int)} instead.
 */
====>[PUBLIC]<android.database.CursorWindow: boolean isNull(int,int)>    ---->    #getType(int, int)
<android.os.UserManager: boolean setRestrictionsChallenge(String)>
/**
 * Sets a new challenge PIN for restrictions. This is only for use by pre-installed
 * apps and requires the MANAGE_USERS permission.
 * @param newPin the PIN to use for challenge dialogs.
 * @return Returns true if the challenge PIN was set successfully.
 * @deprecated The restrictions PIN functionality is no longer provided by the system.
 * This method is preserved for backwards compatibility reasons and always returns false.
 */
====>[PUBLIC]<android.os.UserManager: boolean setRestrictionsChallenge(String)>    ---->    
<android.telephony.SignalStrength: void fillInNotifierBundle(Bundle)>
/**
 * Set intent notifier Bundle based on SignalStrength
 *
 * @param m intent notifier Bundle
 *
 * @deprecated this method relies on non-stable implementation details, and full access to
 * internal storage is available via {@link getCellSignalStrengths()}.
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: void fillInNotifierBundle(Bundle)>    ---->    getCellSignalStrengths()
<android.renderscript.FileA3D: FileA3D createFromFile(RenderScript,File)>
/**
 * @deprecated in API 16
 * Creates a FileA3D object from a file stored on disk
 *
 * @param rs Context to which the object will belong.
 * @param path location of the file to load
 *
 * @return a3d file containing renderscript objects
 */
====>[PUBLIC]<android.renderscript.FileA3D: FileA3D createFromFile(RenderScript,File)>    ---->    
<android.content.pm.PermissionGroupInfo: void <init>()>
/**
 * @deprecated Should only be created by the system.
 */
====>[PUBLIC]<android.content.pm.PermissionGroupInfo: void <init>()>    ---->    
<android.net.NetworkUtils: boolean bindProcessToNetworkForHostResolution(int)>
/**
 * Binds host resolutions performed by this process to the network designated by {@code netId}.
 * {@link #bindProcessToNetwork} takes precedence over this setting.  Passing NETID_UNSET clears
 * the binding.
 *
 * @deprecated This is strictly for legacy usage to support startUsingNetworkFeature().
 */
====>[PUBLIC]<android.net.NetworkUtils: boolean bindProcessToNetworkForHostResolution(int)>    ---->    
<android.os.Debug: void stopAllocCounting()>
/**
 * Stop counting the number and aggregate size of memory allocations.
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void stopAllocCounting()>    ---->    
<android.util.proto.ProtoOutputStream: void writePackedInt64(long,long[])>
/**
 * Write a list of packed proto "int64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedInt64(long,long[])>    ---->    #write
<android.hardware.location.ContextHubManager: ContextHubInfo getContextHubInfo(int)>
/**
 * Get more information about a specific hub.
 *
 * @param hubHandle Handle (system-wide unique identifier) of a context hub.
 * @return ContextHubInfo Information about the requested context hub.
 *
 * @see ContextHubInfo
 *
 * @deprecated Use {@link #getContextHubs()} instead. The use of handles are deprecated in the
 * new APIs.
 */
====>[PUBLIC]<android.hardware.location.ContextHubManager: ContextHubInfo getContextHubInfo(int)>    ---->    #getContextHubs()
Inconsistency (Non-Documentation):<android.net.wifi.WifiScanner: void stopTrackingBssids(BssidListener)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//wifi/java/android/net/wifi/WifiScanner.java
<android.net.wifi.WifiScanner: void stopTrackingBssids(BssidListener)>
/**
 * remove tracking of interesting access points
 * @param listener same object provided in {@link #startTrackingBssids}
 */
====>[PUBLIC]<android.net.wifi.WifiScanner: void stopTrackingBssids(BssidListener)>    ---->    
<android.view.Display: int getOrientation()>
/**
 * @deprecated use {@link #getRotation}
 * @return orientation of this display.
 */
====>[PUBLIC]<android.view.Display: int getOrientation()>    ---->    #getRotation
Inconsistency (Non-Documentation):<com.android.server.net.NetworkStatsCollection: void readLegacyNetwork(File)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//services/core/java/com/android/server/net/NetworkStatsCollection.java
<com.android.server.net.NetworkStatsCollection: void readLegacyNetwork(File)>

====>[PUBLIC]<com.android.server.net.NetworkStatsCollection: void readLegacyNetwork(File)>    ---->    
<android.media.SoundPool: void <init>(int,int,int)>
/**
 * Constructor. Constructs a SoundPool object with the following
 * characteristics:
 *
 * @param maxStreams the maximum number of simultaneous streams for this
 * SoundPool object
 * @param streamType the audio stream type as described in AudioManager
 * For example, game applications will normally use
 * {@link AudioManager#STREAM_MUSIC}.
 * @param srcQuality the sample-rate converter quality. Currently has no
 * effect. Use 0 for the default.
 * @return a SoundPool object, or null if creation failed
 * @deprecated use {@link SoundPool.Builder} instead to create and configure a
 * SoundPool instance
 */
====>[PUBLIC]<android.media.SoundPool: void <init>(int,int,int)>    ---->    SoundPool.Builder
<android.location.GnssMeasurement: void resetCarrierPhase()>
/**
 * Resets the RF phase detected by the receiver.
 *
 * @deprecated use {@link #setAccumulatedDeltaRangeMeters(double)}
 * and {@link #setAccumulatedDeltaRangeState(int)} instead.
 *
 * @hide
 */
====>[HIDDEN]<android.location.GnssMeasurement: void resetCarrierPhase()>    ---->    #setAccumulatedDeltaRangeMeters(double)
Inconsistency (Non-Documentation):<android.app.Notification.Action.WearableExtender: WearableExtender setConfirmLabel(CharSequence)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.Action.WearableExtender: WearableExtender setConfirmLabel(CharSequence)>
/**
 * Set a label to display to confirm that the action should be executed.
 * This is usually an imperative verb like "Send".
 *
 * @param label the label to confirm the action should be executed
 * @return this object for method chaining
 */
====>[PUBLIC]<android.app.Notification.Action.WearableExtender: WearableExtender setConfirmLabel(CharSequence)>    ---->    
<android.media.MediaRecorder: void setAuxiliaryOutputFile(FileDescriptor)>
/**
 * Currently not implemented. It does nothing.
 * @deprecated Time lapse mode video recording using camera still image capture
 * is not desirable, and will not be supported.
 * @hide
 */
====>[HIDDEN]<android.media.MediaRecorder: void setAuxiliaryOutputFile(FileDescriptor)>    ---->    
<android.telephony.ims.ImsSsInfo: String getIcbNum()>
/**
 * @deprecated Use {@link #getIncomingCommunicationBarringNumber()} instead.
 */
====>[PUBLIC]<android.telephony.ims.ImsSsInfo: String getIcbNum()>    ---->    #getIncomingCommunicationBarringNumber()
<android.renderscript.FileA3D.IndexEntry: Mesh getMesh()>
/**
 * @deprecated in API 16
 * Used to load the mesh described by the index entry, object
 * described by the index entry must be a renderscript mesh
 *
 * @return renderscript mesh object described by the entry
 */
====>[PUBLIC]<android.renderscript.FileA3D.IndexEntry: Mesh getMesh()>    ---->    
Inconsistency (Non-Documentation):<com.android.settingslib.NetworkPolicyEditor: void setPolicyCycleDay(NetworkTemplate,int,String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//packages/SettingsLib/src/com/android/settingslib/NetworkPolicyEditor.java
<com.android.settingslib.NetworkPolicyEditor: void setPolicyCycleDay(NetworkTemplate,int,String)>

====>[PUBLIC]<com.android.settingslib.NetworkPolicyEditor: void setPolicyCycleDay(NetworkTemplate,int,String)>    ---->    
<android.content.res.Resources: Drawable getDrawableForDensity(int,int)>
/**
 * Return a drawable object associated with a particular resource ID for the
 * given screen density in DPI. This will set the drawable's density to be
 * the device's density multiplied by the ratio of actual drawable density
 * to requested density. This allows the drawable to be scaled up to the
 * correct size if needed. Various types of objects will be returned
 * depending on the underlying resource -- for example, a solid color, PNG
 * image, scalable image, etc. The Drawable API hides these implementation
 * details.
 *
 * <p class="note"><strong>Note:</strong> To obtain a themed drawable, use
 * {@link android.content.Context#getDrawable(int) Context.getDrawable(int)}
 * or {@link #getDrawableForDensity(int, int, Theme)} passing the desired
 * theme.</p>
 *
 * @param id The desired resource identifier, as generated by the aapt tool.
 * This integer encodes the package, type, and resource entry.
 * The value 0 is an invalid identifier.
 * @param density the desired screen density indicated by the resource as
 * found in {@link DisplayMetrics}. A value of 0 means to use the
 * density returned from {@link #getConfiguration()}.
 * This is equivalent to calling {@link #getDrawable(int)}.
 * @return Drawable An object that can be used to draw this resource.
 * @throws NotFoundException Throws NotFoundException if the given ID does
 * not exist.
 * @see #getDrawableForDensity(int, int, Theme)
 * @deprecated Use {@link #getDrawableForDensity(int, int, Theme)} instead.
 */
====>[PUBLIC]<android.content.res.Resources: Drawable getDrawableForDensity(int,int)>    ---->    #getDrawableForDensity(int, int, Theme)
<android.renderscript.ProgramFragment.Builder: void <init>(RenderScript)>
/**
 * @deprecated in API 16
 * Create a builder object.
 *
 * @param rs Context to which the program will belong.
 */
====>[PUBLIC]<android.renderscript.ProgramFragment.Builder: void <init>(RenderScript)>    ---->    
<android.os.Debug: int getThreadExternalAllocSize()>
/**
 * This method exists for compatibility and has no effect.
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: int getThreadExternalAllocSize()>    ---->    
<android.content.ContentProviderClient: boolean release()>
/**
 * @deprecated replaced by {@link #close()}.
 */
====>[PUBLIC]<android.content.ContentProviderClient: boolean release()>    ---->    #close()
<android.provider.Settings.System: void setShowGTalkServiceStatusForUser(ContentResolver,boolean,int)>
/**
 * @hide
 * @deprecated - Do not use
 */
====>[HIDDEN]<android.provider.Settings.System: void setShowGTalkServiceStatusForUser(ContentResolver,boolean,int)>    ---->    
<android.content.pm.PackageInstaller.Session: void setProgress(float)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.content.pm.PackageInstaller.Session: void setProgress(float)>    ---->    
<android.app.admin.DeviceAdminReceiver: void onPasswordFailed(Context,Intent)>
/**
 * Called after the user has failed at entering their device or profile challenge password,
 * as a result of receiving {@link #ACTION_PASSWORD_FAILED}.  At this point you can use
 * {@link DevicePolicyManager#getCurrentFailedPasswordAttempts()} to retrieve the number of
 * failed password attempts.
 * @param context The running context as per {@link #onReceive}.
 * @param intent The received intent as per {@link #onReceive}.
 *
 * @deprecated From {@link android.os.Build.VERSION_CODES#O}, use
 * {@link #onPasswordFailed(Context, Intent, UserHandle)} instead.
 */
====>[PUBLIC]<android.app.admin.DeviceAdminReceiver: void onPasswordFailed(Context,Intent)>    ---->    #onPasswordFailed(Context, Intent, UserHandle)
<android.app.AlertDialog: void setButton(CharSequence,Message)>
/**
 * @deprecated Use {@link #setButton(int, CharSequence, Message)} with
 * {@link DialogInterface#BUTTON_POSITIVE}.
 */
====>[PUBLIC]<android.app.AlertDialog: void setButton(CharSequence,Message)>    ---->    #setButton(int, CharSequence, Message)
<android.content.ContentValues: void putStringArrayList(String,ArrayList<String>)>
/**
 * Unsupported, here until we get proper bulk insert APIs.
 * {@hide}
 */
====>[HIDDEN]<android.content.ContentValues: void putStringArrayList(String,ArrayList<String>)>    ---->    
<android.content.ContentValues: void <init>(HashMap<String, Object>)>
/**
 * @hide
 * @deprecated kept around for lame people doing reflection
 */
====>[HIDDEN]<android.content.ContentValues: void <init>(HashMap<String, Object>)>    ---->    
<android.text.format.Formatter: String formatIpAddress(int)>
/**
 * Returns a string in the canonical IPv4 format ###.###.###.### from a packed integer
 * containing the IP address. The IPv4 address is expected to be in little-endian
 * format (LSB first). That is, 0x01020304 will return "4.3.2.1".
 *
 * @deprecated Use {@link java.net.InetAddress#getHostAddress()}, which supports both IPv4 and
 * IPv6 addresses. This method does not support IPv6 addresses.
 */
====>[PUBLIC]<android.text.format.Formatter: String formatIpAddress(int)>    ---->    java.net.InetAddress#getHostAddress()
<android.app.usage.StorageStatsManager: long getFreeBytes(String)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.usage.StorageStatsManager: long getFreeBytes(String)>    ---->    
<android.webkit.Plugin: String getName()>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin: String getName()>    ---->    
<android.telephony.SignalStrength: int getGsmDbm()>
/**
 * Get Gsm signal strength as dBm
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthGsm#getDbm}.
 *
 * @see android.telephony#CellSignalStrengthGsm
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getGsmDbm()>    ---->    android.telephony#CellSignalStrengthGsm
<android.telephony.PhoneNumberUtils: String calledPartyBCDToString(byte[],int,int)>
/**
 * 3GPP TS 24.008 10.5.4.7
 * Called Party BCD Number
 *
 * See Also TS 51.011 10.5.1 "dialing number/ssc string"
 * and TS 11.11 "10.3.1 EF adn (Abbreviated dialing numbers)"
 *
 * @param bytes the data buffer
 * @param offset should point to the TOA (aka. TON/NPI) octet after the length byte
 * @param length is the number of bytes including TOA byte
 * and must be at least 2
 *
 * @return partial string on invalid decode
 *
 * @deprecated use {@link #calledPartyBCDToString(byte[], int, int, int)} instead. Calling this
 * method is equivalent to calling {@link #calledPartyBCDToString(byte[], int, int)} with
 * {@link #BCD_EXTENDED_TYPE_EF_ADN} as the extended type.
 */
====>[PUBLIC]<android.telephony.PhoneNumberUtils: String calledPartyBCDToString(byte[],int,int)>    ---->    #calledPartyBCDToString(byte[], int, int, int)
<android.text.StaticLayout: void <init>(CharSequence,int,int,TextPaint,int,Alignment,float,float,boolean)>
/**
 * @deprecated Use {@link Builder} instead.
 */
====>[PUBLIC]<android.text.StaticLayout: void <init>(CharSequence,int,int,TextPaint,int,Alignment,float,float,boolean)>    ---->    Builder
<android.test.mock.MockPackageManager: boolean setDefaultBrowserPackageName(String,int)>
/**
 * {@removed}
 */
====>[HIDDEN]<android.test.mock.MockPackageManager: boolean setDefaultBrowserPackageName(String,int)>    ---->    
<android.app.ActivityManagerNative: boolean isSystemReady()>
/**
 * Convenience for checking whether the system is ready.  For internal use only.
 *
 * @deprecated use ActivityManagerInternal.isSystemReady instead.
 */
====>[PUBLIC]<android.app.ActivityManagerNative: boolean isSystemReady()>    ---->    ActivityManagerInternal.isSystemReady
<android.webkit.Plugin: String getPath()>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin: String getPath()>    ---->    
<android.view.WindowInsets: WindowInsets replaceSystemWindowInsets(int,int,int,int)>
/**
 * Returns a copy of this WindowInsets with selected system window insets replaced
 * with new values.
 *
 * <p>Note: If the system window insets are already consumed, this method will return them
 * unchanged on {@link android.os.Build.VERSION_CODES#Q Q} and later. Prior to
 * {@link android.os.Build.VERSION_CODES#Q Q}, the new values were applied regardless of
 * whether they were consumed, and this method returns invalid non-zero consumed insets.
 *
 * @param left New left inset in pixels
 * @param top New top inset in pixels
 * @param right New right inset in pixels
 * @param bottom New bottom inset in pixels
 * @return A modified copy of this WindowInsets
 * @deprecated use {@code Builder#Builder(WindowInsets)} with
 * {@link Builder#setSystemWindowInsets(Insets)} instead.
 */
====>[PUBLIC]<android.view.WindowInsets: WindowInsets replaceSystemWindowInsets(int,int,int,int)>    ---->    Builder#setSystemWindowInsets(Insets)
<com.android.internal.logging.MetricsLogger: void action(LogMaker)>
/**
 * @deprecated because untestable; use {@link #write(LogMaker)}
 */
====>[PUBLIC]<com.android.internal.logging.MetricsLogger: void action(LogMaker)>    ---->    #write(LogMaker)
<android.hardware.location.ContextHubManager: int sendMessage(int,int,ContextHubMessage)>
/**
 * Send a message to a specific nano app instance on a context hub.
 *
 * Note that the return value of this method only speaks of success
 * up to the point of sending this to the Context Hub.  It is not
 * an assurance that the Context Hub successfully sent this message
 * on to the nanoapp.  If assurance is desired, a protocol should be
 * established between your code and the nanoapp, with the nanoapp
 * sending a confirmation message (which will be reported via
 * Callback.onMessageReceipt).
 *
 * @param hubHandle handle of the hub to send the message to
 * @param nanoAppHandle  handle of the nano app to send to
 * @param message Message to be sent
 *
 * @see ContextHubMessage
 *
 * @return int 0 on success, -1 otherwise
 *
 * @deprecated Use {@link android.hardware.location.ContextHubClient#sendMessageToNanoApp(
 * NanoAppMessage)} instead, after creating a
 * {@link android.hardware.location.ContextHubClient} with
 * {@link #createClient(ContextHubInfo, ContextHubClientCallback, Executor)}
 * or {@link #createClient(ContextHubInfo, ContextHubClientCallback)}.
 */
====>[PUBLIC]<android.hardware.location.ContextHubManager: int sendMessage(int,int,ContextHubMessage)>    ---->    android.hardware.location.ContextHubClient#sendMessageToNanoApp(  NanoAppMessage)
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onScreenTurnedOn()>
/**
 * Called when the screen has been turned on.
 *
 * @deprecated use {@link com.android.systemui.keyguard.ScreenLifecycle}.
 */
====>[PUBLIC]<com.android.keyguard.KeyguardUpdateMonitorCallback: void onScreenTurnedOn()>    ---->    com.android.systemui.keyguard.ScreenLifecycle
<android.view.accessibility.AccessibilityNodeInfo: void removeAction(int)>
/**
 * Removes an action that can be performed on the node. If the action was
 * not already added to the node, calling this method has no effect.
 * <p>
 * <strong>Note:</strong> Cannot be called from an
 * {@link android.accessibilityservice.AccessibilityService}.
 * This class is made immutable before being delivered to an AccessibilityService.
 * </p>
 *
 * @param action The action to be removed.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 * @deprecated Use {@link #removeAction(AccessibilityAction)}
 */
====>[PUBLIC]<android.view.accessibility.AccessibilityNodeInfo: void removeAction(int)>    ---->    #removeAction(AccessibilityAction)
<android.net.ConnectivityManager: boolean getMobileDataEnabled()>
/**
 * @hide
 * @deprecated Talk to TelephonyManager directly
 */
====>[HIDDEN]<android.net.ConnectivityManager: boolean getMobileDataEnabled()>    ---->    
<android.location.GnssMeasurement: boolean hasCarrierPhase()>
/**
 * Returns {@code true} if {@link #getCarrierPhase()} is available, {@code false} otherwise.
 *
 * @deprecated use {@link #getAccumulatedDeltaRangeState()} instead.
 */
====>[PUBLIC]<android.location.GnssMeasurement: boolean hasCarrierPhase()>    ---->    #getAccumulatedDeltaRangeState()
<android.widget.espresso.DragHandleUtils: void assertNoSelectionHandles()>
/**
 * @deprecated Negative assertions are taking too long to timeout in Espresso.
 */
====>[PUBLIC]<android.widget.espresso.DragHandleUtils: void assertNoSelectionHandles()>    ---->    
<android.renderscript.RenderScriptGL: void <init>(Context,SurfaceConfig)>
/**
 * @deprecated in API 16
 * Construct a new RenderScriptGL context.
 *
 * @param ctx The context.
 * @param sc The desired format of the primary rendering surface.
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL: void <init>(Context,SurfaceConfig)>    ---->    
Inconsistency (Non-Documentation):<com.android.systemui.plugins.qs.QSTile: void clearState()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//packages/SystemUI/plugin/src/com/android/systemui/plugins/qs/QSTile.java
<com.android.systemui.plugins.qs.QSTile: void clearState()>

====>[PUBLIC]<com.android.systemui.plugins.qs.QSTile: void clearState()>    ---->    
<com.android.systemui.Dependency: T get(Class<T>)>
/**
 * @deprecated see docs/dagger.md
 */
====>[PUBLIC]<com.android.systemui.Dependency: T get(Class<T>)>    ---->    
<android.bluetooth.BluetoothHealthAppConfiguration: int getRole()>
/**
 * Return the role associated with this application configuration.
 *
 * @return One of {@link BluetoothHealth#SOURCE_ROLE} or {@link BluetoothHealth#SINK_ROLE}
 *
 * @deprecated Health Device Profile (HDP) and MCAP protocol are no longer used. New
 * apps should use Bluetooth Low Energy based solutions such as {@link BluetoothGatt},
 * {@link BluetoothAdapter#listenUsingL2capChannel()(int)}, or
 * {@link BluetoothDevice#createL2capChannel(int)}
 */
====>[PUBLIC]<android.bluetooth.BluetoothHealthAppConfiguration: int getRole()>    ---->    BluetoothGatt
<android.app.Service: void onStart(Intent,int)>
/**
 * @deprecated Implement {@link #onStartCommand(Intent, int, int)} instead.
 */
====>[PUBLIC]<android.app.Service: void onStart(Intent,int)>    ---->    #onStartCommand(Intent, int, int)
<android.os.MemoryFile: boolean isPurgingAllowed()>
/**
 * Is memory file purging enabled?
 *
 * @return true if the file may be purged.
 *
 * @deprecated Purgable is considered generally fragile and hard to use safely. Applications
 * are recommend to instead use {@link android.content.ComponentCallbacks2#onTrimMemory(int)}
 * to react to memory events and release shared memory regions as appropriate.
 */
====>[PUBLIC]<android.os.MemoryFile: boolean isPurgingAllowed()>    ---->    safely. Applications  are recommend to
<android.media.Ringtone: void setStreamType(int)>
/**
 * Sets the stream type where this ringtone will be played.
 *
 * @param streamType The stream, see {@link AudioManager}.
 * @deprecated use {@link #setAudioAttributes(AudioAttributes)}
 */
====>[PUBLIC]<android.media.Ringtone: void setStreamType(int)>    ---->    #setAudioAttributes(AudioAttributes)
<android.printservice.recommendation.RecommendationInfo: void <init>(CharSequence,CharSequence,int,boolean)>
/**
 * Create a new recommendation.
 *
 * @param packageName                  Package name of the print service
 * @param name                         Display name of the print service
 * @param numDiscoveredPrinters        Number of printers the print service would discover if
 * installed
 * @param recommendsMultiVendorService If the service detects printer from multiple vendor
 *
 * @deprecated Use {@link RecommendationInfo(String, String, List<InetAddress>, boolean)}
 * instead
 */
====>[PUBLIC]<android.printservice.recommendation.RecommendationInfo: void <init>(CharSequence,CharSequence,int,boolean)>    ---->    RecommendationInfo(String, String, List<InetAddress>, boolean)
<android.app.ActionBar: void addTab(Tab)>
/**
 * Add a tab for use in tabbed navigation mode. The tab will be added at the end of the list.
 * If this is the first tab to be added it will become the selected tab.
 *
 * @param tab Tab to add
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: void addTab(Tab)>    ---->    
<android.location.LocationListener: void onStatusChanged(String,int,Bundle)>
/**
 * This callback will never be invoked and providers can be considers as always in the
 * {@link LocationProvider#AVAILABLE} state.
 *
 * @deprecated This callback will never be invoked.
 */
====>[PUBLIC]<android.location.LocationListener: void onStatusChanged(String,int,Bundle)>    ---->    
Inconsistency (Non-Documentation):<com.android.server.net.NetworkStatsCollection: void readLegacyUid(File,boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//services/core/java/com/android/server/net/NetworkStatsCollection.java
<com.android.server.net.NetworkStatsCollection: void readLegacyUid(File,boolean)>

====>[PUBLIC]<com.android.server.net.NetworkStatsCollection: void readLegacyUid(File,boolean)>    ---->    
<android.os.FileUtils: int getUid(String)>
/**
 * @deprecated use {@link Os#stat(String)} instead.
 * @hide
 */
====>[HIDDEN]<android.os.FileUtils: int getUid(String)>    ---->    Os#stat(String)
<android.telephony.PhoneNumberUtils: boolean isEmergencyNumber(String,String)>
/**
 * Checks if a given number is an emergency number for a specific country.
 *
 * @param number the number to look up.
 * @param defaultCountryIso the specific country which the number should be checked against
 * @return if the number is an emergency number for the specific country, then return true,
 * otherwise false
 *
 * @deprecated Please use {@link TelephonyManager#isEmergencyNumber(String)}
 * instead.
 *
 * @hide
 */
====>[HIDDEN]<android.telephony.PhoneNumberUtils: boolean isEmergencyNumber(String,String)>    ---->    TelephonyManager#isEmergencyNumber(String)
<android.view.textclassifier.TextClassification.Builder: Builder setIntent(Intent)>
/**
 * Sets the intent for the <i>primary</i> action that may be fired to act on the classified
 * text.
 *
 * <p><strong>NOTE: </strong>This field is not parcelled.
 *
 * @deprecated Use {@link #addAction(RemoteAction)} instead.
 */
====>[PUBLIC]<android.view.textclassifier.TextClassification.Builder: Builder setIntent(Intent)>    ---->    #addAction(RemoteAction)
<android.app.ActivityManager: void restartPackage(String)>
/**
 * @deprecated This is now just a wrapper for
 * {@link #killBackgroundProcesses(String)}; the previous behavior here
 * is no longer available to applications because it allows them to
 * break other applications by removing their alarms, stopping their
 * services, etc.
 */
====>[PUBLIC]<android.app.ActivityManager: void restartPackage(String)>    ---->    #killBackgroundProcesses(String)
<com.android.systemui.statusbar.phone.UserAvatarView: void setBitmap(Bitmap)>
/**
 * @deprecated use {@link #setAvatar(Bitmap)} instead.
 */
====>[PUBLIC]<com.android.systemui.statusbar.phone.UserAvatarView: void setBitmap(Bitmap)>    ---->    #setAvatar(Bitmap)
<android.graphics.Picture: void writeToStream(OutputStream)>
/**
 * Write the picture contents to a stream. The data can be used to recreate
 * the picture in this or another process by calling createFromStream(...)
 * The resulting stream is NOT to be persisted across device restarts as
 * there is no guarantee that the Picture can be successfully reconstructed.
 *
 * @see #createFromStream(java.io.InputStream)
 * @removed
 * @deprecated The recommended alternative is to draw the picture into a
 * Bitmap from which you can persist it as raw or compressed pixels.
 */
====>[HIDDEN]<android.graphics.Picture: void writeToStream(OutputStream)>    ---->    
<android.app.usage.StorageStats: long getCodeBytes()>
/**
 * @removed
 */
====>[HIDDEN]<android.app.usage.StorageStats: long getCodeBytes()>    ---->    
<android.util.proto.ProtoOutputStream: void writeFixed64(long,long)>
/**
 * Write a single proto "fixed64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeFixed64(long,long)>    ---->    #write
<android.telecom.TelecomManager: boolean endCall()>
/**
 * Ends the foreground call on the device.
 * <p>
 * If there is a ringing call, calling this method rejects the ringing call.  Otherwise the
 * foreground call is ended.
 * <p>
 * Requires permission {@link android.Manifest.permission#ANSWER_PHONE_CALLS}.
 * <p>
 * Note: this method CANNOT be used to end ongoing emergency calls and will return {@code false}
 * if an attempt is made to end an emergency call.
 *
 * @return {@code true} if there is a call which will be rejected or terminated, {@code false}
 * otherwise.
 * @deprecated Companion apps for wearable devices should use the {@link InCallService} API
 * instead.  Apps performing call screening should use the {@link CallScreeningService} API
 * instead.
 */
====>[PUBLIC]<android.telecom.TelecomManager: boolean endCall()>    ---->    InCallService
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: WearableExtender setContentIcon(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.WearableExtender: WearableExtender setContentIcon(int)>
/**
 * Set an icon that goes with the content of this notification.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: WearableExtender setContentIcon(int)>    ---->    
Inconsistency (Non-Documentation):<android.app.ContextImpl: void setWallpaper(Bitmap)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/ContextImpl.java
<android.app.ContextImpl: void setWallpaper(Bitmap)>

====>[PUBLIC]<android.app.ContextImpl: void setWallpaper(Bitmap)>    ---->    
<android.widget.CursorAdapter: void init(Context,Cursor,boolean)>
/**
 * @deprecated Don't use this, use the normal constructor.  This will
 * be removed in the future.
 */
====>[PUBLIC]<android.widget.CursorAdapter: void init(Context,Cursor,boolean)>    ---->    
<android.widget.DatePicker: boolean getSpinnersShown()>
/**
 * Returns whether the spinners are shown.
 * <p>
 * <strong>Note:</strong> his method returns {@code false} when the
 * {@link android.R.styleable#DatePicker_datePickerMode} attribute is set
 * to {@code calendar}.
 *
 * @return {@code true} if the spinners are shown
 * @deprecated Not supported by Material-style {@code calendar} mode
 */
====>[PUBLIC]<android.widget.DatePicker: boolean getSpinnersShown()>    ---->    
<android.view.View: void setWillNotCacheDrawing(boolean)>
/**
 * When a View's drawing cache is enabled, drawing is redirected to an
 * offscreen bitmap. Some views, like an ImageView, must be able to
 * bypass this mechanism if they already draw a single bitmap, to avoid
 * unnecessary usage of the memory.
 *
 * @param willNotCacheDrawing true if this view does not cache its
 * drawing, false otherwise
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: void setWillNotCacheDrawing(boolean)>    ---->    #setLayerType(int, Paint)
Inconsistency (Non-Documentation):<com.android.server.net.NetworkPolicyManagerService: NetworkQuotaInfo getNetworkQuotaInfo(NetworkState)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//services/core/java/com/android/server/net/NetworkPolicyManagerService.java
<com.android.server.net.NetworkPolicyManagerService: NetworkQuotaInfo getNetworkQuotaInfo(NetworkState)>

====>[PUBLIC]<com.android.server.net.NetworkPolicyManagerService: NetworkQuotaInfo getNetworkQuotaInfo(NetworkState)>    ---->    
<android.net.ConnectivityManager: ConnectivityManager getInstanceOrNull()>
/**
 * @deprecated - use getSystemService. This is a kludge to support static access in certain
 * situations where a Context pointer is unavailable.
 * @hide
 */
====>[HIDDEN]<android.net.ConnectivityManager: ConnectivityManager getInstanceOrNull()>    ---->    
<android.media.AudioManager: void registerMediaButtonEventReceiver(ComponentName)>
/**
 * Register a component to be the sole receiver of MEDIA_BUTTON intents.
 * @param eventReceiver identifier of a {@link android.content.BroadcastReceiver}
 * that will receive the media button intent. This broadcast receiver must be declared
 * in the application manifest. The package of the component must match that of
 * the context you're registering from.
 * @deprecated Use {@link MediaSession#setMediaButtonReceiver(PendingIntent)} instead.
 */
====>[PUBLIC]<android.media.AudioManager: void registerMediaButtonEventReceiver(ComponentName)>    ---->    MediaSession#setMediaButtonReceiver(PendingIntent)
<android.view.View: boolean isDrawingCacheEnabled()>
/**
 * <p>Indicates whether the drawing cache is enabled for this view.</p>
 *
 * @return true if the drawing cache is enabled
 *
 * @see #setDrawingCacheEnabled(boolean)
 * @see #getDrawingCache()
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: boolean isDrawingCacheEnabled()>    ---->    #setLayerType(int, Paint)
<android.net.http.SslCertificate: void <init>(String,String,String,String)>
/**
 * Creates a new SSL certificate object
 * @param issuedTo The entity this certificate is issued to
 * @param issuedBy The entity that issued this certificate
 * @param validNotBefore The not-before date from the certificate
 * validity period in ISO 8601 format
 * @param validNotAfter The not-after date from the certificate
 * validity period in ISO 8601 format
 * @deprecated Use {@link #SslCertificate(X509Certificate)}
 */
====>[PUBLIC]<android.net.http.SslCertificate: void <init>(String,String,String,String)>    ---->    #SslCertificate(X509Certificate)
<android.app.AppOpsManager: List<PackageOps> getOpsForPackage(int,String,int[])>
/**
 * Retrieve current operation state for one application.
 *
 * The mode of the ops returned are set for the package but may not reflect their effective
 * state due to UID policy or because it's controlled by a different master op.
 *
 * Use {@link #unsafeCheckOp(String, int, String)}} or {@link #noteOp(String, int, String)}
 * if the effective mode is needed.
 *
 * @param uid The uid of the application of interest.
 * @param packageName The name of the application of interest.
 * @param ops The set of operations you are interested in, or null if you want all of them.
 *
 * @deprecated The int op codes are not stable and you should use the string based op
 * names which are stable and namespaced. Use
 * {@link #getOpsForPackage(int, String, String...)})}.
 *
 * @hide
 * @removed
 */
====>[HIDDEN]<android.app.AppOpsManager: List<PackageOps> getOpsForPackage(int,String,int[])>    ---->    #getOpsForPackage(int, String, String...)
<android.content.pm.PackageManager: List<PackageInfo> getPreferredPackages(int)>
/**
 * Retrieve the list of all currently configured preferred packages. The
 * first package on the list is the most preferred, the last is the least
 * preferred.
 *
 * @param flags Additional option flags to modify the data returned.
 * @return A List of PackageInfo objects, one for each preferred
 * application, in order of preference.
 *
 * @deprecated This function no longer does anything. It is the platform's
 * responsibility to assign preferred activities and this cannot be modified
 * directly. To determine the activities resolved by the platform, use
 * {@link #resolveActivity} or {@link #queryIntentActivities}. To configure
 * an app to be responsible for a particular role and to check current role
 * holders, see {@link android.app.role.RoleManager}.
 */
====>[PUBLIC]<android.content.pm.PackageManager: List<PackageInfo> getPreferredPackages(int)>    ---->    #resolveActivity
<android.webkit.UrlInterceptHandler: CacheResult service(String,Map<String, String>)>
/**
 * Given an URL, returns the CacheResult which contains the
 * surrogate response for the request, or {@code null} if the handler is
 * not interested.
 *
 * @param url URL string.
 * @param headers The headers associated with the request.
 * @return The CacheResult containing the surrogate response.
 *
 * @hide
 * @deprecated Do not use, this interface is deprecated.
 */
====>[HIDDEN]<android.webkit.UrlInterceptHandler: CacheResult service(String,Map<String, String>)>    ---->    
<android.renderscript.RenderScriptGL: void bindProgramRaster(ProgramRaster)>
/**
 * @deprecated in API 16
 * Set the default ProgramRaster object seen as the parent state by the
 * root rendering script.
 *
 * @param p
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL: void bindProgramRaster(ProgramRaster)>    ---->    
<android.app.Notification.WearableExtender: WearableExtender addPage(Notification)>
/**
 * Add an additional page of content to display with this notification. The current
 * notification forms the first page, and pages added using this function form
 * subsequent pages. This field can be used to separate a notification into multiple
 * sections.
 *
 * @param page the notification to add as another page
 * @return this object for method chaining
 * @see android.app.Notification.WearableExtender#getPages
 * @deprecated Multiple content pages are no longer supported.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: WearableExtender addPage(Notification)>    ---->    
<android.drm.DrmStore.Action: void <init>()>
/**
 * @deprecated This class should have been an interface instead.
 * The default constuctor should have not been exposed.
 */
====>[PUBLIC]<android.drm.DrmStore.Action: void <init>()>    ---->    
<android.content.pm.PackageManager: List<ResolveInfo> queryBroadcastReceivers(Intent,int,int)>
/**
 * @deprecated @hide
 */
====>[HIDDEN]<android.content.pm.PackageManager: List<ResolveInfo> queryBroadcastReceivers(Intent,int,int)>    ---->    
<android.os.MemoryFile: boolean allowPurging(boolean)>
/**
 * Enables or disables purging of the memory file.
 *
 * @param allowPurging true if the operating system can purge the contents
 * of the file in low memory situations
 * @return previous value of allowPurging
 *
 * @deprecated Purgable is considered generally fragile and hard to use safely. Applications
 * are recommend to instead use {@link android.content.ComponentCallbacks2#onTrimMemory(int)}
 * to react to memory events and release shared memory regions as appropriate.
 */
====>[PUBLIC]<android.os.MemoryFile: boolean allowPurging(boolean)>    ---->    safely. Applications  are recommend to
<android.telephony.CellIdentityWcdma: int getMnc()>
/**
 * @return 2 or 3-digit Mobile Network Code, 0..999,
 * {@link android.telephony.CellInfo#UNAVAILABLE UNAVAILABLE} if unavailable.
 * @deprecated Use {@link #getMncString} instead.
 */
====>[PUBLIC]<android.telephony.CellIdentityWcdma: int getMnc()>    ---->    #getMncString
<android.hardware.usb.UsbManager: boolean isFunctionEnabled(String)>
/**
 * Returns true if the specified USB function is currently enabled when in device mode.
 * <p>
 * USB functions represent interfaces which are published to the host to access
 * services offered by the device.
 * </p>
 *
 * @deprecated use getCurrentFunctions() instead.
 * @param function name of the USB function
 * @return true if the USB function is enabled
 *
 * {@hide}
 */
====>[HIDDEN]<android.hardware.usb.UsbManager: boolean isFunctionEnabled(String)>    ---->    getCurrentFunctions()
Inconsistency (Non-Documentation):<android.app.ContextImpl: void sendStickyBroadcastAsUser(Intent,UserHandle,Bundle)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/ContextImpl.java
<android.app.ContextImpl: void sendStickyBroadcastAsUser(Intent,UserHandle,Bundle)>

====>[PUBLIC]<android.app.ContextImpl: void sendStickyBroadcastAsUser(Intent,UserHandle,Bundle)>    ---->    
<android.webkit.Plugin: void setClickHandler(PreferencesClickHandler)>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin: void setClickHandler(PreferencesClickHandler)>    ---->    
<android.view.ViewTreeObserver: void removeGlobalOnLayoutListener(OnGlobalLayoutListener)>
/**
 * Remove a previously installed global layout callback
 *
 * @param victim The callback to remove
 *
 * @throws IllegalStateException If {@link #isAlive()} returns false
 *
 * @deprecated Use #removeOnGlobalLayoutListener instead
 *
 * @see #addOnGlobalLayoutListener(OnGlobalLayoutListener)
 */
====>[PUBLIC]<android.view.ViewTreeObserver: void removeGlobalOnLayoutListener(OnGlobalLayoutListener)>    ---->    #removeOnGlobalLayoutListener
<android.app.ActivityManagerNative: IActivityManager asInterface(IBinder)>
/**
 * Cast a Binder object into an activity manager interface, generating
 * a proxy if needed.
 *
 * @deprecated use IActivityManager.Stub.asInterface instead.
 */
====>[PUBLIC]<android.app.ActivityManagerNative: IActivityManager asInterface(IBinder)>    ---->    IActivityManager.Stub.asInterface
<android.opengl.EGLObjectHandle: void <init>(int)>
/**
 * @deprecated Use {@link #EGLObjectHandle(long)} instead. Handles
 * on 64 bit platforms will be wider than java ints.
 */
====>[PUBLIC]<android.opengl.EGLObjectHandle: void <init>(int)>    ---->    #EGLObjectHandle(long)
Inconsistency (Non-Documentation):<android.net.wifi.WifiScanner: void stopTrackingWifiChange(WifiChangeListener)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//wifi/java/android/net/wifi/WifiScanner.java
<android.net.wifi.WifiScanner: void stopTrackingWifiChange(WifiChangeListener)>
/**
 * stop tracking changes in wifi environment
 * @param listener object that was provided to report events on {@link
 * #stopTrackingWifiChange}
 */
====>[PUBLIC]<android.net.wifi.WifiScanner: void stopTrackingWifiChange(WifiChangeListener)>    ---->    
<android.text.method.DateKeyListener: void <init>()>
/**
 * @deprecated Use {@link #DateKeyListener(Locale)} instead.
 */
====>[PUBLIC]<android.text.method.DateKeyListener: void <init>()>    ---->    #DateKeyListener(Locale)
<android.inputmethodservice.InputMethodService: int getInputMethodWindowRecommendedHeight()>
/**
 * Aimed to return the previous input method's {@link Insets#contentTopInsets}, but its actual
 * semantics has never been well defined.
 *
 * <p>Note that the previous document clearly mentioned that this method could return {@code 0}
 * at any time for whatever reason.  Now this method is just always returning {@code 0}.</p>
 *
 * @return on Android {@link android.os.Build.VERSION_CODES#Q} and later devices this method
 * always returns {@code 0}
 * @deprecated the actual behavior of this method has never been well defined.  You cannot use
 * this method in a reliable and predictable way
 */
====>[PUBLIC]<android.inputmethodservice.InputMethodService: int getInputMethodWindowRecommendedHeight()>    ---->    
<android.net.NetworkInfo: boolean isConnected()>
/**
 * Indicates whether network connectivity exists and it is possible to establish
 * connections and pass data.
 * <p>Always call this before attempting to perform data transactions.
 * @return {@code true} if network connectivity exists, {@code false} otherwise.
 * @deprecated Apps should instead use the
 * {@link android.net.ConnectivityManager.NetworkCallback} API to
 * learn about connectivity changes. See
 * {@link ConnectivityManager#registerDefaultNetworkCallback} and
 * {@link ConnectivityManager#registerNetworkCallback}. These will
 * give a more accurate picture of the connectivity state of
 * the device and let apps react more easily and quickly to changes.
 */
====>[PUBLIC]<android.net.NetworkInfo: boolean isConnected()>    ---->    android.net.ConnectivityManager.NetworkCallback
<android.app.StatsManager: byte[] getMetadata()>
/**
 * @deprecated Use {@link #getStatsMetadata()}
 */
====>[PUBLIC]<android.app.StatsManager: byte[] getMetadata()>    ---->    #getStatsMetadata()
<android.os.Debug: int getGlobalFreedSize()>
/**
 * Returns the global size, in bytes, of objects freed by the runtime between a
 * {@link #startAllocCounting() start} and {@link #stopAllocCounting() stop}.
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: int getGlobalFreedSize()>    ---->    
Inconsistency (Non-Documentation):<com.android.server.net.NetworkPolicyManagerService: long getTotalBytes(NetworkTemplate,long,long)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//services/core/java/com/android/server/net/NetworkPolicyManagerService.java
<com.android.server.net.NetworkPolicyManagerService: long getTotalBytes(NetworkTemplate,long,long)>

====>[PUBLIC]<com.android.server.net.NetworkPolicyManagerService: long getTotalBytes(NetworkTemplate,long,long)>    ---->    
<android.telephony.TelephonyManager: NetworkScan requestNetworkScan(NetworkScanRequest,NetworkScanCallback)>
/**
 * @deprecated
 * Use {@link
 * #requestNetworkScan(NetworkScanRequest, Executor, TelephonyScanManager.NetworkScanCallback)}
 * @removed
 */
====>[HIDDEN]<android.telephony.TelephonyManager: NetworkScan requestNetworkScan(NetworkScanRequest,NetworkScanCallback)>    ---->    #requestNetworkScan(NetworkScanRequest, Executor, TelephonyScanManager.NetworkScanCallback)
<com.android.server.am.ActivityManagerService: void requestTelephonyBugReport(String,String)>
/**
 * @deprecated This method is only used by a few internal components and it will soon be
 * replaced by a proper bug report API (which will be restricted to a few, pre-defined apps).
 * No new code should be calling it.
 */
====>[PUBLIC]<com.android.server.am.ActivityManagerService: void requestTelephonyBugReport(String,String)>    ---->    
<android.view.textclassifier.TextClassification: OnClickListener getOnClickListener()>
/**
 * Returns the OnClickListener that may be triggered to act on the classified text.
 *
 * <p><strong>NOTE: </strong>This field is not parcelable and only represents the first
 * {@link RemoteAction} (if one exists) when this object is read from a parcel.
 *
 * @deprecated Use {@link #getActions()} instead.
 */
====>[PUBLIC]<android.view.textclassifier.TextClassification: OnClickListener getOnClickListener()>    ---->    #getActions()
Inconsistency (Non-Documentation):<android.content.ContextWrapper: Drawable peekWallpaper()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/content/ContextWrapper.java
<android.content.ContextWrapper: Drawable peekWallpaper()>

====>[PUBLIC]<android.content.ContextWrapper: Drawable peekWallpaper()>    ---->    
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: int getHintScreenTimeout()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.WearableExtender: int getHintScreenTimeout()>
/**
 * Get the duration, in milliseconds, that the screen should remain on for
 * when this notification is displayed.
 * @return the duration in milliseconds if > 0, or either one of the sentinel values
 * {@link #SCREEN_TIMEOUT_SHORT} or {@link #SCREEN_TIMEOUT_LONG}.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: int getHintScreenTimeout()>    ---->    
<android.net.NetworkInfo: boolean isFailover()>
/**
 * Indicates whether the current attempt to connect to the network
 * resulted from the ConnectivityManager trying to fail over to this
 * network following a disconnect from another network.
 * @return {@code true} if this is a failover attempt, {@code false}
 * otherwise.
 * @deprecated This field is not populated in recent Android releases,
 * and does not make a lot of sense in a multi-network world.
 */
====>[PUBLIC]<android.net.NetworkInfo: boolean isFailover()>    ---->    
<android.test.TouchUtils: int dragViewToX(ActivityInstrumentationTestCase,View,int,int)>
/**
 * Simulate touching a view and dragging it to a specified location. Only moves horizontally.
 *
 * @param test The test case that is being run
 * @param v The view that should be dragged
 * @param gravity Which part of the view to use for the initial down event. A combination of
 * (TOP, CENTER_VERTICAL, BOTTOM) and (LEFT, CENTER_HORIZONTAL, RIGHT)
 * @param toX Final location of the view after dragging
 *
 * @return distance in pixels covered by the drag
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: int dragViewToX(ActivityInstrumentationTestCase,View,int,int)>    ---->    android.test.ActivityInstrumentationTestCase2
<android.renderscript.ProgramVertexFixedFunction.Constants: void <init>(RenderScript)>
/**
 * @deprecated in API 16
 * Creates a buffer to store fixed function emulation matrices
 *
 * @param rs Context to which the allocation will belong.
 */
====>[PUBLIC]<android.renderscript.ProgramVertexFixedFunction.Constants: void <init>(RenderScript)>    ---->    
<android.app.Notification.Builder: Builder setContentInfo(CharSequence)>
/**
 * A small piece of additional information pertaining to this notification.
 *
 * The platform template will draw this on the last line of the notification, at the far
 * right (to the right of a smallIcon if it has been placed there).
 *
 * @deprecated use {@link #setSubText(CharSequence)} instead to set a text in the header.
 * For legacy apps targeting a version below {@link android.os.Build.VERSION_CODES#N} this
 * field will still show up, but the subtext will take precedence.
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder setContentInfo(CharSequence)>    ---->    #setSubText(CharSequence)
<android.app.job.JobWorkItem: void <init>(Intent,long)>
/**
 * @deprecated replaced by {@link #JobWorkItem(Intent, long, long)}
 * @removed
 */
====>[HIDDEN]<android.app.job.JobWorkItem: void <init>(Intent,long)>    ---->    #JobWorkItem(Intent, long, long)
<android.telephony.SignalStrength: int getLteRsrp()>
/**
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthLte#getRsrp}.
 *
 * @see android.telephony#CellSignalStrengthLte
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getLteRsrp()>    ---->    android.telephony#CellSignalStrengthLte
<android.graphics.drawable.BitmapDrawable: void <init>(Bitmap)>
/**
 * Create drawable from a bitmap, not dealing with density.
 * @deprecated Use {@link #BitmapDrawable(Resources, Bitmap)} to ensure
 * that the drawable has correctly set its target density.
 */
====>[PUBLIC]<android.graphics.drawable.BitmapDrawable: void <init>(Bitmap)>    ---->    #BitmapDrawable(Resources, Bitmap)
<android.telephony.PhoneNumberUtils: void formatNumber(Editable,int)>
/**
 * Formats a phone number in-place. Currently {@link #FORMAT_JAPAN} and {@link #FORMAT_NANP}
 * is supported as a second argument.
 *
 * @param text The number to be formatted, will be modified with the formatting
 * @param defaultFormattingType The default formatting rules to apply if the number does
 * not begin with +[country_code]
 *
 * @deprecated Use link #formatNumber(String phoneNumber, String defaultCountryIso) instead
 */
====>[PUBLIC]<android.telephony.PhoneNumberUtils: void formatNumber(Editable,int)>    ---->    link #formatNumber(String phoneNumber, String defaultCountryIso)
Inconsistency (Non-Documentation):<android.content.ContextWrapper: void sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/content/ContextWrapper.java
<android.content.ContextWrapper: void sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)>

====>[PUBLIC]<android.content.ContextWrapper: void sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)>    ---->    
<android.telephony.SignalStrength: int getLteAsuLevel()>
/**
 * Get the LTE signal level as an asu value between 0..97, 99 is unknown
 * Asu is calculated based on 3GPP RSRP. Refer to 3GPP 27.007 (Ver 10.3.0) Sec 8.69
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthLte#getAsuLevel}.
 *
 * @see android.telephony#CellSignalStrengthLte
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getLteAsuLevel()>    ---->    android.telephony#CellSignalStrengthLte
<android.graphics.Picture: Picture createFromStream(InputStream)>
/**
 * Create a new picture (already recorded) from the data in the stream. This
 * data was generated by a previous call to writeToStream(). Pictures that
 * have been persisted across device restarts are not guaranteed to decode
 * properly and are highly discouraged.
 *
 * @see #writeToStream(java.io.OutputStream)
 * @removed
 * @deprecated The recommended alternative is to not use writeToStream and
 * instead draw the picture into a Bitmap from which you can persist it as
 * raw or compressed pixels.
 */
====>[HIDDEN]<android.graphics.Picture: Picture createFromStream(InputStream)>    ---->    writeToStream and
<android.content.pm.ShortcutInfo.Builder: Builder setId(String)>
/**
 * Used with the old style constructor, kept for unit tests.
 * @hide
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo.Builder: Builder setId(String)>    ---->    
<android.service.autofill.FillEventHistory: Bundle getClientState()>
/**
 * Returns the client state set in the previous {@link FillResponse}.
 *
 * <p><b>Note: </b>the state is associated with the app that was autofilled in the previous
 * {@link AutofillService#onFillRequest(FillRequest, android.os.CancellationSignal, FillCallback)}
 * , which is not necessary the same app being autofilled now.
 *
 * @deprecated use {@link #getEvents()} then {@link Event#getClientState()} instead.
 */
====>[PUBLIC]<android.service.autofill.FillEventHistory: Bundle getClientState()>    ---->    #getEvents()
<android.view.ViewConfiguration: int getMaximumDrawingCacheSize()>
/**
 * The maximum drawing cache size expressed in bytes.
 *
 * @return the maximum size of View's drawing cache expressed in bytes
 *
 * @deprecated Use {@link #getScaledMaximumDrawingCacheSize()} instead.
 */
====>[PUBLIC]<android.view.ViewConfiguration: int getMaximumDrawingCacheSize()>    ---->    #getScaledMaximumDrawingCacheSize()
<android.webkit.WebViewClient: void onTooManyRedirects(WebView,Message,Message)>
/**
 * Notify the host application that there have been an excessive number of
 * HTTP redirects. As the host application if it would like to continue
 * trying to load the resource. The default behavior is to send the cancel
 * message.
 *
 * @param view The WebView that is initiating the callback.
 * @param cancelMsg The message to send if the host wants to cancel
 * @param continueMsg The message to send if the host wants to continue
 * @deprecated This method is no longer called. When the WebView encounters
 * a redirect loop, it will cancel the load.
 */
====>[PUBLIC]<android.webkit.WebViewClient: void onTooManyRedirects(WebView,Message,Message)>    ---->    
<android.widget.Magnifier: void <init>(View)>
/**
 * Initializes a magnifier.
 *
 * @param view the view for which this magnifier is attached
 *
 * @deprecated Please use {@link Builder} instead
 */
====>[PUBLIC]<android.widget.Magnifier: void <init>(View)>    ---->    Builder
<android.graphics.Canvas: boolean clipRect(Rect,Op)>
/**
 * Modify the current clip with the specified rectangle, which is
 * expressed in local coordinates.
 *
 * @param rect The rectangle to intersect with the current clip.
 * @param op How the clip is modified
 * @return true if the resulting clip is non-empty
 *
 * @deprecated Region.Op values other than {@link Region.Op#INTERSECT} and
 * {@link Region.Op#DIFFERENCE} have the ability to expand the clip. The canvas clipping APIs
 * are intended to only expand the clip as a result of a restore operation. This enables a view
 * parent to clip a canvas to clearly define the maximal drawing area of its children. The
 * recommended alternative calls are {@link #clipRect(Rect)} and {@link #clipOutRect(Rect)};
 *
 * As of API Level API level {@value Build.VERSION_CODES#P} only {@link Region.Op#INTERSECT} and
 * {@link Region.Op#DIFFERENCE} are valid Region.Op parameters.
 */
====>[PUBLIC]<android.graphics.Canvas: boolean clipRect(Rect,Op)>    ---->    Region.Op#INTERSECT
<android.service.trust.TrustAgentService: void grantTrust(CharSequence,long,boolean)>
/**
 * Call to grant trust on the device.
 *
 * @param message describes why the device is trusted, e.g. "Trusted by location".
 * @param durationMs amount of time in milliseconds to keep the device in a trusted state.
 * Trust for this agent will automatically be revoked when the timeout expires unless
 * extended by a subsequent call to this function. The timeout is measured from the
 * invocation of this function as dictated by {@link SystemClock#elapsedRealtime())}.
 * For security reasons, the value should be no larger than necessary.
 * The value may be adjusted by the system as necessary to comply with a policy controlled
 * by the system or {@link DevicePolicyManager} restrictions. See {@link #onTrustTimeout()}
 * for determining when trust expires.
 * @param initiatedByUser this is a hint to the system that trust is being granted as the
 * direct result of user action - such as solving a security challenge. The hint is used
 * by the system to optimize the experience. Behavior may vary by device and release, so
 * one should only set this parameter if it meets the above criteria rather than relying on
 * the behavior of any particular device or release. Corresponds to
 * {@link #FLAG_GRANT_TRUST_INITIATED_BY_USER}.
 * @throws IllegalStateException if the agent is not currently managing trust.
 *
 * @deprecated use {@link #grantTrust(CharSequence, long, int)} instead.
 */
====>[PUBLIC]<android.service.trust.TrustAgentService: void grantTrust(CharSequence,long,boolean)>    ---->    #grantTrust(CharSequence, long, int)
<android.renderscript.ProgramFragmentFixedFunction.Builder: Builder setTexture(EnvMode,Format,int)>
/**
 * @deprecated in API 16
 * Adds a texture to be fetched as part of the fixed function
 * fragment program
 *
 * @param env specifies how the texture is combined with the
 * current color
 * @param fmt specifies the format of the texture and how its
 * components will be used to combine with the
 * current color
 * @param slot index of the texture to apply the operations on
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.ProgramFragmentFixedFunction.Builder: Builder setTexture(EnvMode,Format,int)>    ---->    
<android.telephony.PhoneNumberUtils: boolean isPotentialLocalEmergencyNumber(Context,String)>
/**
 * Checks if a given number might *potentially* result in a call to an
 * emergency service, for the country that the user is in. The current
 * country is determined using the CountryDetector.
 *
 * Specifically, this method will return true if the specified number
 * is an emergency number in the current country, *or* if the number
 * simply starts with the same digits as any emergency number for the
 * current country.
 *
 * This method is intended for internal use by the phone app when
 * deciding whether to allow ACTION_CALL intents from 3rd party apps
 * (where we're required to *not* allow emergency calls to be placed.)
 *
 * @param number the number to look up.
 * @param context the specific context which the number should be checked against
 * @return true if the specified number is an emergency number for a local country, based on the
 * CountryDetector.
 *
 * @see android.location.CountryDetector
 *
 * @deprecated Please use {@link TelephonyManager#isPotentialEmergencyNumber(String)}
 * instead.
 *
 * @hide
 */
====>[HIDDEN]<android.telephony.PhoneNumberUtils: boolean isPotentialLocalEmergencyNumber(Context,String)>    ---->    TelephonyManager#isPotentialEmergencyNumber(String)
<android.database.CursorWindow: void <init>(boolean)>
/**
 * Creates a new empty cursor window.
 * <p>
 * The cursor initially has no rows or columns.  Call {@link #setNumColumns(int)} to
 * set the number of columns before adding any rows to the cursor.
 * </p>
 *
 * @param localWindow True if this window will be used in this process only,
 * false if it might be sent to another processes.  This argument is ignored.
 *
 * @deprecated There is no longer a distinction between local and remote
 * cursor windows.  Use the {@link #CursorWindow(String)} constructor instead.
 */
====>[PUBLIC]<android.database.CursorWindow: void <init>(boolean)>    ---->    #CursorWindow(String)
<android.renderscript.Mesh.Builder: Mesh create()>
/**
 * @deprecated in API 16
 * Create a Mesh object from the current state of the builder
 */
====>[PUBLIC]<android.renderscript.Mesh.Builder: Mesh create()>    ---->    
Inconsistency (Non-Documentation):<android.app.ContextImpl: void sendStickyBroadcast(Intent)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/ContextImpl.java
<android.app.ContextImpl: void sendStickyBroadcast(Intent)>

====>[PUBLIC]<android.app.ContextImpl: void sendStickyBroadcast(Intent)>    ---->    
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: WearableExtender setHintScreenTimeout(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.WearableExtender: WearableExtender setHintScreenTimeout(int)>
/**
 * Set a hint that the screen should remain on for at least this duration when
 * this notification is displayed on the screen.
 * @param timeout The requested screen timeout in milliseconds. Can also be either
 * {@link #SCREEN_TIMEOUT_SHORT} or {@link #SCREEN_TIMEOUT_LONG}.
 * @return this object for method chaining
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: WearableExtender setHintScreenTimeout(int)>    ---->    
<android.text.method.TimeKeyListener: TimeKeyListener getInstance()>
/**
 * @deprecated Use {@link #getInstance(Locale)} instead.
 */
====>[PUBLIC]<android.text.method.TimeKeyListener: TimeKeyListener getInstance()>    ---->    #getInstance(Locale)
Inconsistency (Non-Documentation):<android.webkit.WebViewDatabase: void clearFormData()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/webkit/WebViewDatabase.java
<android.webkit.WebViewDatabase: void clearFormData()>
/**
 * Clears any saved data for web forms.
 *
 * @see #hasFormData
 */
====>[PUBLIC]<android.webkit.WebViewDatabase: void clearFormData()>    ---->    
<android.telephony.SubscriptionManager: SubscriptionManager from(Context)>
/**
 * @deprecated developers should always obtain references directly from
 * {@link Context#getSystemService(Class)}.
 */
====>[PUBLIC]<android.telephony.SubscriptionManager: SubscriptionManager from(Context)>    ---->    Context#getSystemService(Class)
<android.app.Notification.WearableExtender: WearableExtender addPages(List<Notification>)>
/**
 * Add additional pages of content to display with this notification. The current
 * notification forms the first page, and pages added using this function form
 * subsequent pages. This field can be used to separate a notification into multiple
 * sections.
 *
 * @param pages a list of notifications
 * @return this object for method chaining
 * @see android.app.Notification.WearableExtender#getPages
 * @deprecated Multiple content pages are no longer supported.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: WearableExtender addPages(List<Notification>)>    ---->    
<android.media.AudioRecord: void addOnRoutingChangedListener(OnRoutingChangedListener,Handler)>
/**
 * Adds an {@link OnRoutingChangedListener} to receive notifications of routing changes
 * on this AudioRecord.
 * @param listener The {@link OnRoutingChangedListener} interface to receive notifications
 * of rerouting events.
 * @param handler  Specifies the {@link Handler} object for the thread on which to execute
 * the callback. If <code>null</code>, the {@link Handler} associated with the main
 * {@link Looper} will be used.
 * @deprecated users should switch to the general purpose
 * {@link AudioRouting.OnRoutingChangedListener} class instead.
 */
====>[PUBLIC]<android.media.AudioRecord: void addOnRoutingChangedListener(OnRoutingChangedListener,Handler)>    ---->    AudioRouting.OnRoutingChangedListener
<android.app.Activity: void dismissDialog(int)>
/**
 * Dismiss a dialog that was previously shown via {@link #showDialog(int)}.
 *
 * @param id The id of the managed dialog.
 *
 * @throws IllegalArgumentException if the id was not previously shown via
 * {@link #showDialog(int)}.
 *
 * @see #onCreateDialog(int, Bundle)
 * @see #onPrepareDialog(int, Dialog, Bundle)
 * @see #showDialog(int)
 * @see #removeDialog(int)
 *
 * @deprecated Use the new {@link DialogFragment} class with
 * {@link FragmentManager} instead; this is also
 * available on older platforms through the Android compatibility package.
 */
====>[PUBLIC]<android.app.Activity: void dismissDialog(int)>    ---->    DialogFragment
Inconsistency (Non-Documentation):<com.android.systemui.shared.recents.model.Task: void copyFrom(Task)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//packages/SystemUI/shared/src/com/android/systemui/shared/recents/model/Task.java
<com.android.systemui.shared.recents.model.Task: void copyFrom(Task)>
/**
 * Copies the metadata from another task, but retains the current callbacks.
 */
====>[PUBLIC]<com.android.systemui.shared.recents.model.Task: void copyFrom(Task)>    ---->    
<android.app.Notification.MessagingStyle: CharSequence getUserDisplayName()>
/**
 * Returns the name to be displayed for any replies sent by the user
 *
 * @deprecated use {@link #getUser()} instead
 */
====>[PUBLIC]<android.app.Notification.MessagingStyle: CharSequence getUserDisplayName()>    ---->    #getUser()
<android.os.Debug: int getGlobalAllocSize()>
/**
 * Returns the global size, in bytes, of objects allocated by the runtime between a
 * {@link #startAllocCounting() start} and {@link #stopAllocCounting() stop}.
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: int getGlobalAllocSize()>    ---->    
<android.content.pm.ShortcutInfo.Builder: Builder setShortLabelResId(int)>
/**
 * @hide We don't support resource strings for dynamic shortcuts for now.  (But unit tests
 * use it.)
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo.Builder: Builder setShortLabelResId(int)>    ---->    
<android.telephony.TelephonyManager: int invokeOemRilRequestRaw(byte[],byte[])>
/**
 * Returns the result and response from RIL for oem request
 *
 * @param oemReq the data is sent to ril.
 * @param oemResp the respose data from RIL.
 * @return negative value request was not handled or get error
 * 0 request was handled succesfully, but no response data
 * positive value success, data length of response
 * @hide
 * @deprecated OEM needs a vendor-extension hal and their apps should use that instead
 */
====>[HIDDEN]<android.telephony.TelephonyManager: int invokeOemRilRequestRaw(byte[],byte[])>    ---->    that
<android.widget.OverScroller: void extendDuration(int)>
/**
 * Extend the scroll animation. This allows a running animation to scroll
 * further and longer, when used with {@link #setFinalX(int)} or {@link #setFinalY(int)}.
 *
 * @param extend Additional time to scroll in milliseconds.
 * @see #setFinalX(int)
 * @see #setFinalY(int)
 *
 * @hide Pending removal once nothing depends on it
 * @deprecated OverScrollers don't necessarily have a fixed duration.
 * Instead of setting a new final position and extending
 * the duration of an existing scroll, use startScroll
 * to begin a new animation.
 */
====>[HIDDEN]<android.widget.OverScroller: void extendDuration(int)>    ---->    
<com.android.uiautomator.testrunner.UiAutomatorTestCase: IAutomationSupport getAutomationSupport()>
/**
 * Provides support for running tests to report interim status
 *
 * @return IAutomationSupport
 * @since API Level 16
 * @deprecated Use {@link Instrumentation#sendStatus(int, Bundle)} instead
 */
====>[PUBLIC]<com.android.uiautomator.testrunner.UiAutomatorTestCase: IAutomationSupport getAutomationSupport()>    ---->    Instrumentation#sendStatus(int, Bundle)
<android.media.AudioManager: boolean isWiredHeadsetOn()>
/**
 * Checks whether a wired headset is connected or not.
 * <p>This is not a valid indication that audio playback is
 * actually over the wired headset as audio routing depends on other conditions.
 *
 * @return true if a wired headset is connected.
 * false if otherwise
 * @deprecated Use {@link AudioManager#getDevices(int)} instead to list available audio devices.
 */
====>[PUBLIC]<android.media.AudioManager: boolean isWiredHeadsetOn()>    ---->    AudioManager#getDevices(int)
<android.hardware.radio.RadioTuner: ProgramInfo> getProgramList(Map<String, String>)>
/**
 * Get the list of discovered radio stations.
 *
 * To get the full list, set filter to null or empty map.
 * Keys must be prefixed with unique vendor Java-style namespace,
 * eg. 'com.somecompany.parameter1'.
 *
 * @param vendorFilter vendor-specific selector for radio stations.
 * @return a list of radio stations.
 * @throws IllegalStateException if the scan is in progress or has not been started,
 * startBackgroundScan() call may fix it.
 * @throws IllegalArgumentException if the vendorFilter argument is not valid.
 * @deprecated Use {@link getDynamicProgramList} instead.
 */
====>[PUBLIC]<android.hardware.radio.RadioTuner: ProgramInfo> getProgramList(Map<String, String>)>    ---->    getDynamicProgramList
<android.hardware.HardwareBuffer: boolean isDestroyed()>
/**
 * @removed replaced by {@link #isClosed()}
 */
====>[HIDDEN]<android.hardware.HardwareBuffer: boolean isDestroyed()>    ---->    
<android.media.AudioTrack: void addOnRoutingChangedListener(OnRoutingChangedListener,Handler)>
/**
 * Adds an {@link OnRoutingChangedListener} to receive notifications of routing changes
 * on this AudioTrack.
 * @param listener The {@link OnRoutingChangedListener} interface to receive notifications
 * of rerouting events.
 * @param handler  Specifies the {@link Handler} object for the thread on which to execute
 * the callback. If <code>null</code>, the {@link Handler} associated with the main
 * {@link Looper} will be used.
 * @deprecated users should switch to the general purpose
 * {@link AudioRouting.OnRoutingChangedListener} class instead.
 */
====>[PUBLIC]<android.media.AudioTrack: void addOnRoutingChangedListener(OnRoutingChangedListener,Handler)>    ---->    AudioRouting.OnRoutingChangedListener
<android.telephony.PhoneNumberUtils: boolean isLocalEmergencyNumber(Context,int,String)>
/**
 * Checks if a given number is an emergency number for the country that the user is in.
 *
 * @param subId the subscription id of the SIM.
 * @param number the number to look up.
 * @param context the specific context which the number should be checked against
 * @return true if the specified number is an emergency number for the country the user
 * is currently in.
 *
 * @deprecated Please use {@link TelephonyManager#isEmergencyNumber(String)}
 * instead.
 *
 * @hide
 */
====>[HIDDEN]<android.telephony.PhoneNumberUtils: boolean isLocalEmergencyNumber(Context,int,String)>    ---->    TelephonyManager#isEmergencyNumber(String)
<android.graphics.Canvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,Paint)>
/**
 * Treat the specified array of colors as a bitmap, and draw it. This gives the same result as
 * first creating a bitmap from the array, and then drawing it, but this method avoids
 * explicitly creating a bitmap object which can be more efficient if the colors are changing
 * often.
 *
 * @param colors Array of colors representing the pixels of the bitmap
 * @param offset Offset into the array of colors for the first pixel
 * @param stride The number of colors in the array between rows (must be >= width or <= -width).
 * @param x The X coordinate for where to draw the bitmap
 * @param y The Y coordinate for where to draw the bitmap
 * @param width The width of the bitmap
 * @param height The height of the bitmap
 * @param hasAlpha True if the alpha channel of the colors contains valid values. If false, the
 * alpha byte is ignored (assumed to be 0xFF for every pixel).
 * @param paint May be null. The paint used to draw the bitmap
 * @deprecated Usage with a {@link #isHardwareAccelerated() hardware accelerated} canvas
 * requires an internal copy of color buffer contents every time this method is
 * called. Using a Bitmap avoids this copy, and allows the application to more
 * explicitly control the lifetime and copies of pixel data.
 */
====>[PUBLIC]<android.graphics.Canvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,Paint)>    ---->    #isHardwareAccelerated() hardware accelerated
<android.telephony.TelephonyManager: TelephonyManager getDefault()>
/**
 * @hide
 * /* @deprecated - use getSystemService as described above
 */
====>[HIDDEN]<android.telephony.TelephonyManager: TelephonyManager getDefault()>    ---->    
<android.telephony.SubscriptionPlan.Builder: Builder createRecurringMonthly(ZonedDateTime)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.telephony.SubscriptionPlan.Builder: Builder createRecurringMonthly(ZonedDateTime)>    ---->    
<android.renderscript.RSSurfaceView: void pause()>
/**
 * @deprecated in API 16
 * Inform the view that the activity is paused. The owner of this view must
 * call this method when the activity is paused. Calling this method will
 * pause the rendering thread.
 * Must not be called before a renderer has been set.
 */
====>[PUBLIC]<android.renderscript.RSSurfaceView: void pause()>    ---->    
<android.speech.tts.TextToSpeech: Set<String> getFeatures(Locale)>
/**
 * Queries the engine for the set of features it supports for a given locale.
 * Features can either be framework defined, e.g.
 * {@link TextToSpeech.Engine#KEY_FEATURE_NETWORK_SYNTHESIS} or engine specific.
 * Engine specific keys must be prefixed by the name of the engine they
 * are intended for. These keys can be used as parameters to
 * {@link TextToSpeech#speak(String, int, java.util.HashMap)} and
 * {@link TextToSpeech#synthesizeToFile(String, java.util.HashMap, String)}.
 *
 * Features values are strings and their values must meet restrictions described in their
 * documentation.
 *
 * @param locale The locale to query features for.
 * @return Set instance. May return {@code null} on error.
 * @deprecated As of API level 21, please use voices. In order to query features of the voice,
 * call {@link #getVoices()} to retrieve the list of available voices and
 * {@link Voice#getFeatures()} to retrieve the set of features.
 */
====>[PUBLIC]<android.speech.tts.TextToSpeech: Set<String> getFeatures(Locale)>    ---->    #getVoices()
<android.media.AudioManager: int getRouting(int)>
/**
 * Returns the current audio routing bit vector for a specified mode.
 *
 * @param mode audio mode to get route (e.g., MODE_RINGTONE)
 * @return an audio route bit vector that can be compared with ROUTE_xxx
 * bits
 * @deprecated   Do not query audio routing directly, use isSpeakerphoneOn(),
 * isBluetoothScoOn(), isBluetoothA2dpOn() and isWiredHeadsetOn() methods instead.
 */
====>[PUBLIC]<android.media.AudioManager: int getRouting(int)>    ---->    isSpeakerphoneOn(),  isBluetoothScoOn(), isBluetoothA2dpOn() and isWiredHeadsetOn() methods
<android.net.ConnectivityManager: boolean requestRouteToHostAddress(int,InetAddress)>
/**
 * Ensure that a network route exists to deliver traffic to the specified
 * host via the specified network interface. An attempt to add a route that
 * already exists is ignored, but treated as successful.
 *
 * <p>This method requires the caller to hold either the
 * {@link android.Manifest.permission#CHANGE_NETWORK_STATE} permission
 * or the ability to modify system settings as determined by
 * {@link android.provider.Settings.System#canWrite}.</p>
 *
 * @param networkType the type of the network over which traffic to the specified
 * host is to be routed
 * @param hostAddress the IP address of the host to which the route is desired
 * @return {@code true} on success, {@code false} on failure
 * @hide
 * @deprecated Deprecated in favor of the {@link #requestNetwork} and
 * {@link #bindProcessToNetwork} API.
 */
====>[HIDDEN]<android.net.ConnectivityManager: boolean requestRouteToHostAddress(int,InetAddress)>    ---->    #requestNetwork
<android.net.NetworkUtils: InetAddress intToInetAddress(int)>
/**
 * @see Inet4AddressUtils#intToInet4AddressHTL(int)
 * @deprecated Use either {@link Inet4AddressUtils#intToInet4AddressHTH(int)}
 * or {@link Inet4AddressUtils#intToInet4AddressHTL(int)}
 */
====>[PUBLIC]<android.net.NetworkUtils: InetAddress intToInetAddress(int)>    ---->    Inet4AddressUtils#intToInet4AddressHTH(int)
<android.app.AlertDialog: void setButton(CharSequence,OnClickListener)>
/**
 * Set a listener to be invoked when button 1 of the dialog is pressed.
 *
 * @param text The text to display in button 1.
 * @param listener The {@link DialogInterface.OnClickListener} to use.
 * @deprecated Use
 * {@link #setButton(int, CharSequence, android.content.DialogInterface.OnClickListener)}
 * with {@link DialogInterface#BUTTON_POSITIVE}
 */
====>[PUBLIC]<android.app.AlertDialog: void setButton(CharSequence,OnClickListener)>    ---->    #setButton(int, CharSequence, android.content.DialogInterface.OnClickListener)
<android.media.AudioManager: void unregisterMediaButtonEventReceiver(ComponentName)>
/**
 * Unregister the receiver of MEDIA_BUTTON intents.
 * @param eventReceiver identifier of a {@link android.content.BroadcastReceiver}
 * that was registered with {@link #registerMediaButtonEventReceiver(ComponentName)}.
 * @deprecated Use {@link MediaSession} instead.
 */
====>[PUBLIC]<android.media.AudioManager: void unregisterMediaButtonEventReceiver(ComponentName)>    ---->    MediaSession
<android.renderscript.RSTextureView: void resume()>
/**
 * @deprecated in API 16
 * Inform the view that the activity is resumed. The owner of this view must
 * call this method when the activity is resumed. Calling this method will
 * recreate the OpenGL display and resume the rendering
 * thread.
 * Must not be called before a renderer has been set.
 */
====>[PUBLIC]<android.renderscript.RSTextureView: void resume()>    ---->    
<android.hardware.radio.RadioTuner.Callback: void onMetadataChanged(RadioMetadata)>
/**
 * Called when metadata is updated for the current program.
 *
 * @deprecated Use {@link #onProgramInfoChanged(RadioManager.ProgramInfo)} instead.
 */
====>[PUBLIC]<android.hardware.radio.RadioTuner.Callback: void onMetadataChanged(RadioMetadata)>    ---->    #onProgramInfoChanged(RadioManager.ProgramInfo)
<android.os.PowerManager: boolean isScreenBrightnessBoosted()>
/**
 * Returns whether the screen brightness is currently boosted to maximum, caused by a call
 * to {@link #boostScreenBrightness(long)}.
 * @return {@code True} if the screen brightness is currently boosted. {@code False} otherwise.
 *
 * @deprecated This call is rarely used and will be phased out soon.
 * @hide
 * @removed
 */
====>[HIDDEN]<android.os.PowerManager: boolean isScreenBrightnessBoosted()>    ---->    
<android.app.AlertDialog: void setButton2(CharSequence,Message)>
/**
 * @deprecated Use {@link #setButton(int, CharSequence, Message)} with
 * {@link DialogInterface#BUTTON_NEGATIVE}.
 */
====>[PUBLIC]<android.app.AlertDialog: void setButton2(CharSequence,Message)>    ---->    #setButton(int, CharSequence, Message)
<android.content.Context: void removeStickyBroadcast(Intent)>
/**
 * <p>Remove the data previously sent with {@link #sendStickyBroadcast},
 * so that it is as if the sticky broadcast had never happened.
 *
 * @deprecated Sticky broadcasts should not be used.  They provide no security (anyone
 * can access them), no protection (anyone can modify them), and many other problems.
 * The recommended pattern is to use a non-sticky broadcast to report that <em>something</em>
 * has changed, with another mechanism for apps to retrieve the current value whenever
 * desired.
 *
 * @param intent The Intent that was previously broadcast.
 *
 * @see #sendStickyBroadcast
 */
====>[PUBLIC]<android.content.Context: void removeStickyBroadcast(Intent)>    ---->    #sendStickyBroadcast
<android.net.TrafficStats: long getUidTcpTxBytes(int)>
/**
 * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},
 * transport layer statistics are no longer available, and will
 * always return {@link #UNSUPPORTED}.
 * @see #getUidTxBytes(int)
 */
====>[PUBLIC]<android.net.TrafficStats: long getUidTcpTxBytes(int)>    ---->    #getUidTxBytes(int)
<android.util.proto.ProtoOutputStream: void writeRepeatedBytes(long,byte[])>
/**
 * Write a single repeated proto "bytes" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedBytes(long,byte[])>    ---->    #write
<android.security.keystore.recovery.RecoveryController: Key generateKey(String)>
/**
 * Generates a recoverable key with the given {@code alias}.
 *
 * @throws InternalRecoveryServiceException if an unexpected error occurred in the recovery
 * service.
 * @throws LockScreenRequiredException if the user does not have a lock screen set. A lock
 * screen is required to generate recoverable keys.
 *
 * @deprecated Use the method {@link #generateKey(String, byte[])} instead.
 */
====>[PUBLIC]<android.security.keystore.recovery.RecoveryController: Key generateKey(String)>    ---->    #generateKey(String, byte[])
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>
/**
 * Indicates whether network connectivity exists or is in the process
 * of being established. This is good for applications that need to
 * do anything related to the network other than read or write data.
 * For the latter, call {@link #isConnected()} instead, which guarantees
 * that the network is fully usable.
 * @return {@code true} if network connectivity exists or is in the process
 * of being established, {@code false} otherwise.
 * @deprecated Apps should instead use the
 * {@link android.net.ConnectivityManager.NetworkCallback} API to
 * learn about connectivity changes.
 * {@link ConnectivityManager#registerDefaultNetworkCallback} and
 * {@link ConnectivityManager#registerNetworkCallback}. These will
 * give a more accurate picture of the connectivity state of
 * the device and let apps react more easily and quickly to changes.
 */
====>[PUBLIC]<android.net.NetworkInfo: boolean isConnectedOrConnecting()>    ---->    android.net.ConnectivityManager.NetworkCallback
<android.database.ContentObservable: void notifyChange(boolean)>
/**
 * Invokes {@link ContentObserver#onChange} on each observer.
 *
 * @param selfChange True if this is a self-change notification.
 *
 * @deprecated Use {@link #dispatchChange} instead.
 */
====>[PUBLIC]<android.database.ContentObservable: void notifyChange(boolean)>    ---->    #dispatchChange
<android.app.job.JobInfo.Builder: Builder setEstimatedNetworkBytes(long)>
/**
 * @deprecated replaced by
 * {@link #setEstimatedNetworkBytes(long, long)}.
 * @removed
 */
====>[HIDDEN]<android.app.job.JobInfo.Builder: Builder setEstimatedNetworkBytes(long)>    ---->    #setEstimatedNetworkBytes(long, long)
<android.net.ConnectivityManager: boolean isNetworkSupported(int)>
/**
 * Returns true if the hardware supports the given network type
 * else it returns false.  This doesn't indicate we have coverage
 * or are authorized onto a network, just whether or not the
 * hardware supports it.  For example a GSM phone without a SIM
 * should still return {@code true} for mobile data, but a wifi only
 * tablet would return {@code false}.
 *
 * @param networkType The network type we'd like to check
 * @return {@code true} if supported, else {@code false}
 * @deprecated Types are deprecated. Use {@link NetworkCapabilities} instead.
 * @hide
 */
====>[HIDDEN]<android.net.ConnectivityManager: boolean isNetworkSupported(int)>    ---->    NetworkCapabilities
<android.app.AlertDialog.Builder: Builder setView(View,int,int,int,int)>
/**
 * Sets a custom view to be the contents of the alert dialog and
 * specifies additional padding around that view.
 * <p>
 * When using a pre-Holo theme, if the supplied view is an instance of
 * a {@link ListView} then the light background will be used.
 * <p>
 * <strong>Note:</strong> To ensure consistent styling, the custom view
 * should be inflated or constructed using the alert dialog's themed
 * context obtained via {@link #getContext()}.
 *
 * @param view the view to use as the contents of the alert dialog
 * @param viewSpacingLeft spacing between the left edge of the view and
 * the dialog frame
 * @param viewSpacingTop spacing between the top edge of the view and
 * the dialog frame
 * @param viewSpacingRight spacing between the right edge of the view
 * and the dialog frame
 * @param viewSpacingBottom spacing between the bottom edge of the view
 * and the dialog frame
 * @return this Builder object to allow for chaining of calls to set
 * methods
 *
 * @hide Remove once the framework usages have been replaced.
 * @deprecated Set the padding on the view itself.
 */
====>[HIDDEN]<android.app.AlertDialog.Builder: Builder setView(View,int,int,int,int)>    ---->    
<android.webkit.WebChromeClient: void onConsoleMessage(String,int,String)>
/**
 * Report a JavaScript error message to the host application. The ChromeClient
 * should override this to process the log message as they see fit.
 * @param message The error message to report.
 * @param lineNumber The line number of the error.
 * @param sourceID The name of the source file that caused the error.
 * @deprecated Use {@link #onConsoleMessage(ConsoleMessage) onConsoleMessage(ConsoleMessage)}
 * instead.
 */
====>[PUBLIC]<android.webkit.WebChromeClient: void onConsoleMessage(String,int,String)>    ---->    #onConsoleMessage(ConsoleMessage) onConsoleMessage(ConsoleMessage)
<android.graphics.Canvas: void drawPosText(char[],int,int,float[],Paint)>
/**
 * Draw the text in the array, with each character's origin specified by the pos array.
 *
 * @param text The text to be drawn
 * @param index The index of the first character to draw
 * @param count The number of characters to draw, starting from index.
 * @param pos Array of [x,y] positions, used to position each character
 * @param paint The paint used for the text (e.g. color, size, style)
 * @deprecated This method does not support glyph composition and decomposition and should
 * therefore not be used to render complex scripts. It also doesn't handle
 * supplementary characters (eg emoji).
 */
====>[PUBLIC]<android.graphics.Canvas: void drawPosText(char[],int,int,float[],Paint)>    ---->    
<android.app.InstantAppResolverService: void onGetInstantAppIntentFilter(int[],String,InstantAppResolutionCallback)>
/**
 * Called to retrieve intent filters for instant applications from potentially expensive
 * sources.
 *
 * @param digestPrefix The hash prefix of the instant app's domain.
 * @deprecated Should implement {@link #onGetInstantAppIntentFilter(Intent, int[], UserHandle,
 * String, InstantAppResolutionCallback)}.
 */
====>[PUBLIC]<android.app.InstantAppResolverService: void onGetInstantAppIntentFilter(int[],String,InstantAppResolutionCallback)>    ---->    #onGetInstantAppIntentFilter(Intent, int[], UserHandle,  String, InstantAppResolutionCallback)
<android.view.Display: int getPixelFormat()>
/**
 * Gets the pixel format of the display.
 * @return One of the constants defined in {@link android.graphics.PixelFormat}.
 *
 * @deprecated This method is no longer supported.
 * The result is always {@link PixelFormat#RGBA_8888}.
 */
====>[PUBLIC]<android.view.Display: int getPixelFormat()>    ---->    PixelFormat#RGBA_8888
<android.provider.Settings.Secure: void setLocationProviderEnabled(ContentResolver,String,boolean)>
/**
 * Thread-safe method for enabling or disabling a single location provider. This will have
 * no effect on Android Q and above.
 * @param cr the content resolver to use
 * @param provider the location provider to enable or disable
 * @param enabled true if the provider should be enabled
 * @deprecated This API is deprecated
 */
====>[PUBLIC]<android.provider.Settings.Secure: void setLocationProviderEnabled(ContentResolver,String,boolean)>    ---->    
<android.webkit.PluginList: void <init>()>
/**
 * Public constructor. Initializes the list of plugins.
 *
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.PluginList: void <init>()>    ---->    
<android.os.storage.StorageManager: String getVolumeState(String)>
/**
 * Gets the state of a volume via its mountpoint.
 * @hide
 */
====>[HIDDEN]<android.os.storage.StorageManager: String getVolumeState(String)>    ---->    
<android.util.AtomicFile: FileOutputStream openAppend()>
/**
 * @hide
 * @deprecated This is not safe.
 */
====>[HIDDEN]<android.util.AtomicFile: FileOutputStream openAppend()>    ---->    
<android.app.Notification.Builder: Builder addPerson(String)>
/**
 * Add a person that is relevant to this notification.
 *
 * <P>
 * Depending on user preferences, this annotation may allow the notification to pass
 * through interruption filters, if this notification is of category {@link #CATEGORY_CALL}
 * or {@link #CATEGORY_MESSAGE}. The addition of people may also cause this notification to
 * appear more prominently in the user interface.
 * </P>
 *
 * <P>
 * The person should be specified by the {@code String} representation of a
 * {@link android.provider.ContactsContract.Contacts#CONTENT_LOOKUP_URI}.
 * </P>
 *
 * <P>The system will also attempt to resolve {@code mailto:} and {@code tel:} schema
 * URIs.  The path part of these URIs must exist in the contacts database, in the
 * appropriate column, or the reference will be discarded as invalid. Telephone schema
 * URIs will be resolved by {@link android.provider.ContactsContract.PhoneLookup}.
 * It is also possible to provide a URI with the schema {@code name:} in order to uniquely
 * identify a person without an entry in the contacts database.
 * </P>
 *
 * @param uri A URI for the person.
 * @see Notification#EXTRA_PEOPLE
 * @deprecated use {@link #addPerson(Person)}
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder addPerson(String)>    ---->    #addPerson(Person)
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: WearableExtender setCustomSizePreset(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.WearableExtender: WearableExtender setCustomSizePreset(int)>
/**
 * Set the custom size preset for the display of this notification out of the available
 * presets found in {@link android.app.Notification.WearableExtender}, e.g.
 * {@link #SIZE_LARGE}.
 * <p>Some custom size presets are only applicable for custom display notifications created
 * using {@link android.app.Notification.WearableExtender#setDisplayIntent}. Check the
 * documentation for the preset in question. See also
 * {@link #setCustomContentHeight} and {@link #getCustomSizePreset}.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: WearableExtender setCustomSizePreset(int)>    ---->    
<android.drm.DrmManagerClient: void release()>
/**
 * @deprecated replaced by {@link #close()}.
 */
====>[PUBLIC]<android.drm.DrmManagerClient: void release()>    ---->    #close()
<android.hardware.radio.RadioMetadata: Bitmap getBitmap(String)>
/**
 * Returns a {@link Bitmap} for the given key or null if the key is not found in the meta data.
 *
 * @param key The key the value is stored under
 * @return a {@link Bitmap} or null
 * @deprecated Use getBitmapId(String) instead
 */
====>[PUBLIC]<android.hardware.radio.RadioMetadata: Bitmap getBitmap(String)>    ---->    getBitmapId(String)
<android.renderscript.RenderScriptGL: void bindRootScript(Script)>
/**
 * @deprecated in API 16
 * Set the script to handle calls to render the primary surface.
 *
 * @param s Graphics script to process rendering requests.
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL: void bindRootScript(Script)>    ---->    
<android.app.ActionBar: void addTab(Tab,int)>
/**
 * Add a tab for use in tabbed navigation mode. The tab will be inserted at
 * <code>position</code>. If this is the first tab to be added it will become
 * the selected tab.
 *
 * @param tab The tab to add
 * @param position The new position of the tab
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: void addTab(Tab,int)>    ---->    
<android.hardware.location.ContextHubManager: int registerCallback(Callback,Handler)>
/**
 * Set a callback to receive messages from the context hub
 *
 * @param callback Callback object
 * @param handler Handler object, if null uses the Handler of the main Looper
 *
 * @see Callback
 *
 * @return int 0 on success, -1 otherwise
 *
 * @deprecated Use {@link #createClient(ContextHubInfo, ContextHubClientCallback, Executor)}
 * or {@link #createClient(ContextHubInfo, ContextHubClientCallback)} instead to
 * register a {@link android.hardware.location.ContextHubClientCallback}.
 */
====>[PUBLIC]<android.hardware.location.ContextHubManager: int registerCallback(Callback,Handler)>    ---->    #createClient(ContextHubInfo, ContextHubClientCallback, Executor)
<android.util.proto.ProtoOutputStream: void writeSFixed64(long,long)>
/**
 * Write a single proto "sfixed64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeSFixed64(long,long)>    ---->    #write
<android.webkit.WebSettings: TextSize getTextSize()>
/**
 * Gets the text size of the page. If the text size was previously specified
 * in percent using {@link #setTextZoom}, this will return the closest
 * matching {@link TextSize}.
 *
 * @return the text size as a {@link TextSize} value
 * @see #setTextSize
 * @deprecated Use {@link #getTextZoom} instead.
 */
====>[PUBLIC]<android.webkit.WebSettings: TextSize getTextSize()>    ---->    #getTextZoom
Inconsistency (Non-Documentation):<android.app.Notification.Builder: Builder setContent(RemoteViews)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.Builder: Builder setContent(RemoteViews)>
/**
 * Supply a custom RemoteViews to use instead of the platform template.
 *
 * Use {@link #setCustomContentView(RemoteViews)} instead.
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder setContent(RemoteViews)>    ---->    
<android.os.FileObserver: void <init>(String,int)>
/**
 * Create a new file observer for a certain file or directory.
 * Monitoring does not start on creation!  You must call
 * {@link #startWatching()} before you will receive events.
 *
 * @param path The file or directory to monitor
 * @param mask The event or events (added together) to watch for
 *
 * @deprecated use {@link #FileObserver(File, int)} instead.
 */
====>[PUBLIC]<android.os.FileObserver: void <init>(String,int)>    ---->    #FileObserver(File, int)
<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>
/**
 * Adds an action that can be performed on the node.
 * <p>
 * <strong>Note:</strong> Cannot be called from an
 * {@link android.accessibilityservice.AccessibilityService}.
 * This class is made immutable before being delivered to an AccessibilityService.
 * </p>
 *
 * @param action The action.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 * @throws IllegalArgumentException If the argument is not one of the standard actions.
 *
 * @deprecated This has been deprecated for {@link #addAction(AccessibilityAction)}
 */
====>[PUBLIC]<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>    ---->    #addAction(AccessibilityAction)
<android.database.CursorWindow: boolean isFloat(int,int)>
/**
 * Returns true if the field at the specified row and column index
 * has type {@link Cursor#FIELD_TYPE_FLOAT}.
 *
 * @param row The zero-based row index.
 * @param column The zero-based column index.
 * @return True if the field has type {@link Cursor#FIELD_TYPE_FLOAT}.
 * @deprecated Use {@link #getType(int, int)} instead.
 */
====>[PUBLIC]<android.database.CursorWindow: boolean isFloat(int,int)>    ---->    #getType(int, int)
<android.telephony.SubscriptionPlan.Builder: Builder createRecurringDaily(ZonedDateTime)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.telephony.SubscriptionPlan.Builder: Builder createRecurringDaily(ZonedDateTime)>    ---->    
<android.net.TrafficStats: long getUidUdpRxBytes(int)>
/**
 * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},
 * transport layer statistics are no longer available, and will
 * always return {@link #UNSUPPORTED}.
 * @see #getUidRxBytes(int)
 */
====>[PUBLIC]<android.net.TrafficStats: long getUidUdpRxBytes(int)>    ---->    #getUidRxBytes(int)
<android.app.Fragment: void onInflate(Activity,AttributeSet,Bundle)>
/**
 * @deprecated Use {@link #onInflate(Context, AttributeSet, Bundle)} instead.
 */
====>[PUBLIC]<android.app.Fragment: void onInflate(Activity,AttributeSet,Bundle)>    ---->    #onInflate(Context, AttributeSet, Bundle)
<android.app.Notification.WearableExtender: List<Notification> getPages()>
/**
 * Get the array of additional pages of content for displaying this notification. The
 * current notification forms the first page, and elements within this array form
 * subsequent pages. This field can be used to separate a notification into multiple
 * sections.
 * @return the pages for this notification
 * @deprecated Multiple content pages are no longer supported.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: List<Notification> getPages()>    ---->    
<android.net.ConnectivityManager: boolean getBackgroundDataSetting()>
/**
 * Returns the value of the setting for background data usage. If false,
 * applications should not use the network if the application is not in the
 * foreground. Developers should respect this setting, and check the value
 * of this before performing any background data operations.
 * <p>
 * All applications that have background services that use the network
 * should listen to {@link #ACTION_BACKGROUND_DATA_SETTING_CHANGED}.
 * <p>
 * @deprecated As of {@link VERSION_CODES#ICE_CREAM_SANDWICH}, availability of
 * background data depends on several combined factors, and this method will
 * always return {@code true}. Instead, when background data is unavailable,
 * {@link #getActiveNetworkInfo()} will now appear disconnected.
 *
 * @return Whether background data usage is allowed.
 */
====>[PUBLIC]<android.net.ConnectivityManager: boolean getBackgroundDataSetting()>    ---->    VERSION_CODES#ICE_CREAM_SANDWICH
<android.renderscript.FileA3D: FileA3D createFromFile(RenderScript,String)>
/**
 * @deprecated in API 16
 * Creates a FileA3D object from a file stored on disk
 *
 * @param rs Context to which the object will belong.
 * @param path location of the file to load
 *
 * @return a3d file containing renderscript objects
 */
====>[PUBLIC]<android.renderscript.FileA3D: FileA3D createFromFile(RenderScript,String)>    ---->    
<android.widget.PopupWindow: void setWindowLayoutMode(int,int)>
/**
 * <p>Change the width and height measure specs that are given to the
 * window manager by the popup.  By default these are 0, meaning that
 * the current width or height is requested as an explicit size from
 * the window manager.  You can supply
 * {@link ViewGroup.LayoutParams#WRAP_CONTENT} or
 * {@link ViewGroup.LayoutParams#MATCH_PARENT} to have that measure
 * spec supplied instead, replacing the absolute width and height that
 * has been set in the popup.</p>
 *
 * <p>If the popup is showing, calling this method will take effect only
 * the next time the popup is shown.</p>
 *
 * @param widthSpec an explicit width measure spec mode, either
 * {@link ViewGroup.LayoutParams#WRAP_CONTENT},
 * {@link ViewGroup.LayoutParams#MATCH_PARENT}, or 0 to use the absolute
 * width.
 * @param heightSpec an explicit height measure spec mode, either
 * {@link ViewGroup.LayoutParams#WRAP_CONTENT},
 * {@link ViewGroup.LayoutParams#MATCH_PARENT}, or 0 to use the absolute
 * height.
 *
 * @deprecated Use {@link #setWidth(int)} and {@link #setHeight(int)}.
 */
====>[PUBLIC]<android.widget.PopupWindow: void setWindowLayoutMode(int,int)>    ---->    #setWidth(int)
<android.view.KeyEvent: boolean isDown()>
/**
 * Don't use in new code, instead explicitly check
 * {@link #getAction()}.
 *
 * @return If the action is ACTION_DOWN, returns true; else false.
 *
 * @deprecated
 * @hide
 */
====>[HIDDEN]<android.view.KeyEvent: boolean isDown()>    ---->    
<android.os.FileUtils: boolean copyFile(File,File)>
/**
 * @deprecated use {@link #copy(File, File)} instead.
 * @hide
 */
====>[HIDDEN]<android.os.FileUtils: boolean copyFile(File,File)>    ---->    #copy(File, File)
<android.media.AudioManager: void setVibrateSetting(int,int)>
/**
 * Sets the setting for when the vibrate type should vibrate.
 * <p>
 * This method should only be used by applications that replace the platform-wide
 * management of audio settings or the main telephony application.
 *
 * @param vibrateType The type of vibrate. One of
 * {@link #VIBRATE_TYPE_NOTIFICATION} or
 * {@link #VIBRATE_TYPE_RINGER}.
 * @param vibrateSetting The vibrate setting, one of
 * {@link #VIBRATE_SETTING_ON},
 * {@link #VIBRATE_SETTING_OFF}, or
 * {@link #VIBRATE_SETTING_ONLY_SILENT}.
 * @see #getVibrateSetting(int)
 * @see #shouldVibrate(int)
 * @deprecated Applications should maintain their own vibrate policy based on
 * current ringer mode that can be queried via {@link #getRingerMode()}.
 */
====>[PUBLIC]<android.media.AudioManager: void setVibrateSetting(int,int)>    ---->    #getRingerMode()
<android.net.wifi.WifiScanner: void configureWifiChange(WifiChangeSettings)>
/**
 * @hide
 */
====>[HIDDEN]<android.net.wifi.WifiScanner: void configureWifiChange(WifiChangeSettings)>    ---->    
<android.telephony.SignalStrength: int getLteRsrq()>
/**
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthLte#getRsrq}.
 *
 * @see android.telephony#CellSignalStrengthLte
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getLteRsrq()>    ---->    android.telephony#CellSignalStrengthLte
<android.webkit.WebView: void debugDump()>
/**
 * @deprecated This method is now obsolete.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebView: void debugDump()>    ---->    
<android.graphics.drawable.Drawable: Drawable createFromResourceStream(Resources,TypedValue,InputStream,String,Options)>
/**
 * Create a drawable from an inputstream, using the given resources and
 * value to determine density information.
 *
 * @deprecated Prefer the version without an Options object.
 */
====>[PUBLIC]<android.graphics.drawable.Drawable: Drawable createFromResourceStream(Resources,TypedValue,InputStream,String,Options)>    ---->    
<android.view.GestureDetector: void <init>(OnGestureListener,Handler)>
/**
 * Creates a GestureDetector with the supplied listener.
 * This variant of the constructor should be used from a non-UI thread
 * (as it allows specifying the Handler).
 *
 * @param listener the listener invoked for all the callbacks, this must
 * not be null.
 * @param handler the handler to use
 *
 * @throws NullPointerException if either {@code listener} or
 * {@code handler} is null.
 *
 * @deprecated Use {@link #GestureDetector(android.content.Context,
 * android.view.GestureDetector.OnGestureListener, android.os.Handler)} instead.
 */
====>[PUBLIC]<android.view.GestureDetector: void <init>(OnGestureListener,Handler)>    ---->    #GestureDetector(android.content.Context,  android.view.GestureDetector.OnGestureListener, android.os.Handler)
<android.renderscript.RSSurfaceView: void destroyRenderScriptGL()>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.RSSurfaceView: void destroyRenderScriptGL()>    ---->    
<android.app.ActionBar: void setSelectedNavigationItem(int)>
/**
 * Set the selected navigation item in list or tabbed navigation modes.
 *
 * @param position Position of the item to select.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: void setSelectedNavigationItem(int)>    ---->    
<android.app.prediction.AppTarget.Builder: void <init>(AppTargetId)>
/**
 * @deprecated Use the other Builder constructors.
 * @hide
 * @removed
 */
====>[HIDDEN]<android.app.prediction.AppTarget.Builder: void <init>(AppTargetId)>    ---->    
<android.media.AudioManager: int abandonAudioFocus(OnAudioFocusChangeListener)>
/**
 * Abandon audio focus. Causes the previous focus owner, if any, to receive focus.
 * @param l the listener with which focus was requested.
 * @return {@link #AUDIOFOCUS_REQUEST_FAILED} or {@link #AUDIOFOCUS_REQUEST_GRANTED}
 * @deprecated use {@link #abandonAudioFocusRequest(AudioFocusRequest)}
 */
====>[PUBLIC]<android.media.AudioManager: int abandonAudioFocus(OnAudioFocusChangeListener)>    ---->    #abandonAudioFocusRequest(AudioFocusRequest)
<android.graphics.Typeface: Typeface createFromFamilies(FontFamily[])>
/**
 * Create a new typeface from an array of font families.
 *
 * @param families array of font families
 * @deprecated
 */
====>[PUBLIC]<android.graphics.Typeface: Typeface createFromFamilies(FontFamily[])>    ---->    
<android.media.AudioManager: void setBluetoothA2dpOn(boolean)>
/**
 * @param on set <var>true</var> to route A2DP audio to/from Bluetooth
 * headset; <var>false</var> disable A2DP audio
 * @deprecated Do not use.
 */
====>[PUBLIC]<android.media.AudioManager: void setBluetoothA2dpOn(boolean)>    ---->    
<android.app.ActionBar: Tab getSelectedTab()>
/**
 * Returns the currently selected tab if in tabbed navigation mode and there is at least
 * one tab present.
 *
 * @return The currently selected tab or null
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: Tab getSelectedTab()>    ---->    
<android.app.Notification.WearableExtender: PendingIntent getDisplayIntent()>
/**
 * Get the intent to launch inside of an activity view when displaying this
 * notification. This {@code PendingIntent} should be for an activity.
 *
 * @deprecated Display intents are no longer supported.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: PendingIntent getDisplayIntent()>    ---->    
<android.webkit.PluginList: List getList()>
/**
 * Returns the list of plugins as a java.util.List.
 *
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.PluginList: List getList()>    ---->    
<com.android.systemui.bubbles.BubbleStackView: void stackDismissed(int)>
/**
 * Dismiss the stack of bubbles.
 * @deprecated
 */
====>[PUBLIC]<com.android.systemui.bubbles.BubbleStackView: void stackDismissed(int)>    ---->    
<android.util.proto.ProtoOutputStream: long startRepeatedObject(long)>
/**
 * Start a repeated child object.
 *
 * Returns a token which should be passed to endObject.  Calls to endObject must be
 * nested properly.
 *
 * @deprecated Use #start() instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: long startRepeatedObject(long)>    ---->    #start()
<android.renderscript.ProgramVertex.Builder: Builder addInput(Element)>
/**
 * @deprecated in API 16
 * Add varying inputs to the program
 *
 * @param e element describing the layout of the varying input
 * structure
 * @return  self
 */
====>[PUBLIC]<android.renderscript.ProgramVertex.Builder: Builder addInput(Element)>    ---->    
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: int getContentIcon()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.WearableExtender: int getContentIcon()>
/**
 * Get an icon that goes with the content of this notification.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: int getContentIcon()>    ---->    
<android.provider.Contacts.ContactMethods: Object decodeImProtocol(String)>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.ContactMethods: Object decodeImProtocol(String)>    ---->    android.provider.ContactsContract
<android.view.ViewConfiguration: void <init>()>
/**
 * @deprecated Use {@link android.view.ViewConfiguration#get(android.content.Context)} instead.
 */
====>[PUBLIC]<android.view.ViewConfiguration: void <init>()>    ---->    android.view.ViewConfiguration#get(android.content.Context)
<android.inputmethodservice.InputMethodService: boolean enableHardwareAcceleration()>
/**
 * You can call this to try to enable accelerated drawing for your IME. This must be set before
 * {@link #onCreate()}, so you will typically call it in your constructor.  It is not always
 * possible to use hardware accelerated drawing in an IME (for example on low-end devices that
 * do not have the resources to support this), so the call {@code true} if it succeeds otherwise
 * {@code false} if you will need to draw in software.  You must be able to handle either case.
 *
 * <p>In API 21 and later, system may automatically enable hardware accelerated drawing for your
 * IME on capable devices even if this method is not explicitly called. Make sure that your IME
 * is able to handle either case.</p>
 *
 * @return {@code true} if accelerated drawing is successfully enabled otherwise {@code false}.
 * On API 21 and later devices the return value is basically just a hint and your IME
 * does not need to change the behavior based on the it
 * @deprecated Starting in API 21, hardware acceleration is always enabled on capable devices
 */
====>[PUBLIC]<android.inputmethodservice.InputMethodService: boolean enableHardwareAcceleration()>    ---->    
<android.webkit.WebSettings: boolean getSavePassword()>
/**
 * Gets whether the WebView saves passwords.
 *
 * @return whether the WebView saves passwords
 * @see #setSavePassword
 * @deprecated Saving passwords in WebView will not be supported in future versions.
 */
====>[PUBLIC]<android.webkit.WebSettings: boolean getSavePassword()>    ---->    
<android.os.ParcelFileDescriptor: ParcelFileDescriptor fromData(byte[],String)>
/**
 * @hide Please use createPipe() or ContentProvider.openPipeHelper().
 * Gets a file descriptor for a read-only copy of the given data.
 *
 * @param data Data to copy.
 * @param name Name for the shared memory area that may back the file descriptor.
 * This is purely informative and may be {@code null}.
 * @return A ParcelFileDescriptor.
 * @throws IOException if there is an error while creating the shared memory area.
 */
====>[HIDDEN]<android.os.ParcelFileDescriptor: ParcelFileDescriptor fromData(byte[],String)>    ---->    
<android.provider.ContactsContract.RawContacts.StreamItems: void <init>()>
/**
 * No public constructor since this is a utility class
 *
 * @deprecated - Do not use. This will not be supported in the future. In the future,
 * cursors returned from related queries will be empty.
 */
====>[PUBLIC]<android.provider.ContactsContract.RawContacts.StreamItems: void <init>()>    ---->    
<android.location.GnssMeasurement: void resetCarrierPhaseUncertainty()>
/**
 * Resets the Carrier-phase's uncertainty (1-Sigma) in cycles.
 *
 * @deprecated use {@link #setAccumulatedDeltaRangeUncertaintyMeters(double)}
 * and {@link #setAccumulatedDeltaRangeState(int)} instead.
 *
 * @hide
 */
====>[HIDDEN]<android.location.GnssMeasurement: void resetCarrierPhaseUncertainty()>    ---->    #setAccumulatedDeltaRangeUncertaintyMeters(double)
<android.os.Process: boolean supportsProcesses()>
/**
 * Determine whether the current environment supports multiple processes.
 *
 * @return Returns true if the system can run in multiple processes, else
 * false if everything is running in a single process.
 *
 * @deprecated This method always returns true.  Do not use.
 */
====>[PUBLIC]<android.os.Process: boolean supportsProcesses()>    ---->    
<android.app.TaskStackListener: void onActivityLaunchOnSecondaryDisplayFailed()>
/**
 * @deprecated see {@link
 * #onActivityLaunchOnSecondaryDisplayFailed(ActivityManager.RunningTaskInfo, int)}
 */
====>[PUBLIC]<android.app.TaskStackListener: void onActivityLaunchOnSecondaryDisplayFailed()>    ---->    #onActivityLaunchOnSecondaryDisplayFailed(ActivityManager.RunningTaskInfo, int)
<com.android.internal.graphics.palette.Palette: AsyncTask<Bitmap, Void, Palette> generateAsync(Bitmap,PaletteAsyncListener)>
/**
 * @deprecated Use {@link Palette.Builder} to generate the Palette.
 */
====>[PUBLIC]<com.android.internal.graphics.palette.Palette: AsyncTask<Bitmap, Void, Palette> generateAsync(Bitmap,PaletteAsyncListener)>    ---->    Palette.Builder
<android.graphics.Canvas: void drawPosText(String,float[],Paint)>
/**
 * Draw the text in the array, with each character's origin specified by the pos array.
 *
 * @param text The text to be drawn
 * @param pos Array of [x,y] positions, used to position each character
 * @param paint The paint used for the text (e.g. color, size, style)
 * @deprecated This method does not support glyph composition and decomposition and should
 * therefore not be used to render complex scripts. It also doesn't handle
 * supplementary characters (eg emoji).
 */
====>[PUBLIC]<android.graphics.Canvas: void drawPosText(String,float[],Paint)>    ---->    
<android.provider.MediaStore.Images.Media: String insertImage(ContentResolver,String,String,String)>
/**
 * Insert an image and create a thumbnail for it.
 *
 * @param cr The content resolver to use
 * @param imagePath The path to the image to insert
 * @param name The name of the image
 * @param description The description of the image
 * @return The URL to the newly created image
 * @deprecated inserting of images should be performed using
 * {@link MediaColumns#IS_PENDING}, which offers richer
 * control over lifecycle.
 */
====>[PUBLIC]<android.provider.MediaStore.Images.Media: String insertImage(ContentResolver,String,String,String)>    ---->    MediaColumns#IS_PENDING
<android.provider.MediaStore.Images.Media: Bitmap getBitmap(ContentResolver,Uri)>
/**
 * Retrieves an image for the given url as a {@link Bitmap}.
 *
 * @param cr The content resolver to use
 * @param url The url of the image
 * @deprecated loading of images should be performed through
 * {@link ImageDecoder#createSource(ContentResolver, Uri)},
 * which offers modern features like
 * {@link PostProcessor}.
 */
====>[PUBLIC]<android.provider.MediaStore.Images.Media: Bitmap getBitmap(ContentResolver,Uri)>    ---->    ImageDecoder#createSource(ContentResolver, Uri)
<android.view.View: void invalidate(Rect)>
/**
 * Mark the area defined by dirty as needing to be drawn. If the view is
 * visible, {@link #onDraw(android.graphics.Canvas)} will be called at some
 * point in the future.
 * <p>
 * This must be called from a UI thread. To call from a non-UI thread, call
 * {@link #postInvalidate()}.
 * <p>
 * <b>WARNING:</b> In API 19 and below, this method may be destructive to
 * {@code dirty}.
 *
 * @param dirty the rectangle representing the bounds of the dirty region
 *
 * @deprecated The switch to hardware accelerated rendering in API 14 reduced
 * the importance of the dirty rectangle. In API 21 the given rectangle is
 * ignored entirely in favor of an internally-calculated area instead.
 * Because of this, clients are encouraged to just call {@link #invalidate()}.
 */
====>[PUBLIC]<android.view.View: void invalidate(Rect)>    ---->    #invalidate()
<android.text.DynamicLayout: void <init>(CharSequence,TextPaint,int,Alignment,float,float,boolean)>
/**
 * @deprecated Use {@link Builder} instead.
 */
====>[PUBLIC]<android.text.DynamicLayout: void <init>(CharSequence,TextPaint,int,Alignment,float,float,boolean)>    ---->    Builder
<android.telecom.TelecomManager: PhoneAccountHandle getSimCallManager(int)>
/**
 * Returns the current SIM call manager for the user-chosen default Telephony Subscription ID
 * (see {@link SubscriptionManager#getDefaultSubscriptionId()}) and the specified user. Apps
 * must be prepared for this method to return {@code null}, indicating that there currently
 * exists no SIM call manager {@link PhoneAccount} for the default voice subscription.
 *
 * @return The phone account handle of the current sim call manager.
 *
 * @hide
 * @deprecated Use {@link #getSimCallManager()}.
 */
====>[HIDDEN]<android.telecom.TelecomManager: PhoneAccountHandle getSimCallManager(int)>    ---->    #getSimCallManager()
<android.app.Notification.Builder: Builder setSound(Uri)>
/**
 * Set the sound to play.
 *
 * It will be played using the {@link #AUDIO_ATTRIBUTES_DEFAULT default audio attributes}
 * for notifications.
 *
 * @deprecated use {@link NotificationChannel#setSound(Uri, AudioAttributes)} instead.
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder setSound(Uri)>    ---->    NotificationChannel#setSound(Uri, AudioAttributes)
Inconsistency (Non-Documentation):<android.database.CursorWrapper: void deactivate()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/database/CursorWrapper.java
<android.database.CursorWrapper: void deactivate()>

====>[PUBLIC]<android.database.CursorWrapper: void deactivate()>    ---->    
<android.provider.ContactsContract.Contacts.StreamItems: void <init>()>
/**
 * no public constructor since this is a utility class
 *
 * @deprecated - Do not use. This will not be supported in the future. In the future,
 * cursors returned from related queries will be empty.
 */
====>[PUBLIC]<android.provider.ContactsContract.Contacts.StreamItems: void <init>()>    ---->    
<android.telephony.PhoneStateListener: void onSignalStrengthChanged(int)>
/**
 * Callback invoked when network signal strength changes on the registered subscription.
 * Note, the registration subId comes from {@link TelephonyManager} object which registers
 * PhoneStateListener by {@link TelephonyManager#listen(PhoneStateListener, int)}.
 * If this TelephonyManager object was created with
 * {@link TelephonyManager#createForSubscriptionId(int)}, then the callback applies to the
 * subId. Otherwise, this callback applies to
 * {@link SubscriptionManager#getDefaultSubscriptionId()}.
 *
 * @see ServiceState#STATE_EMERGENCY_ONLY
 * @see ServiceState#STATE_IN_SERVICE
 * @see ServiceState#STATE_OUT_OF_SERVICE
 * @see ServiceState#STATE_POWER_OFF
 * @deprecated Use {@link #onSignalStrengthsChanged(SignalStrength)}
 */
====>[PUBLIC]<android.telephony.PhoneStateListener: void onSignalStrengthChanged(int)>    ---->    #onSignalStrengthsChanged(SignalStrength)
<android.content.pm.LauncherApps: int getShortcutIconResId(ShortcutInfo)>
/**
 * @hide kept for testing.
 */
====>[HIDDEN]<android.content.pm.LauncherApps: int getShortcutIconResId(ShortcutInfo)>    ---->    
<android.net.NetworkUtils: int prefixLengthToNetmaskInt(int)>
/**
 * @see Inet4AddressUtils#prefixLengthToV4NetmaskIntHTL(int)
 * @deprecated Use either {@link Inet4AddressUtils#prefixLengthToV4NetmaskIntHTH(int)}
 * or {@link Inet4AddressUtils#prefixLengthToV4NetmaskIntHTL(int)}
 */
====>[PUBLIC]<android.net.NetworkUtils: int prefixLengthToNetmaskInt(int)>    ---->    Inet4AddressUtils#prefixLengthToV4NetmaskIntHTH(int)
Inconsistency (Non-Documentation):<com.android.settingslib.NetworkPolicyEditor: NetworkPolicy buildDefaultPolicy(NetworkTemplate)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//packages/SettingsLib/src/com/android/settingslib/NetworkPolicyEditor.java
<com.android.settingslib.NetworkPolicyEditor: NetworkPolicy buildDefaultPolicy(NetworkTemplate)>

====>[PUBLIC]<com.android.settingslib.NetworkPolicyEditor: NetworkPolicy buildDefaultPolicy(NetworkTemplate)>    ---->    
<android.util.proto.ProtoOutputStream: void writePackedSInt32(long,int[])>
/**
 * Write a list of packed proto "sint32" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedSInt32(long,int[])>    ---->    #write
<android.renderscript.Mesh: Allocation getIndexSetAllocation(int)>
/**
 * @deprecated in API 16
 * @param slot locaton within the list of index set allocation
 * @return allocation containing primtive index data or null if
 * the index data is not specified explicitly
 */
====>[PUBLIC]<android.renderscript.Mesh: Allocation getIndexSetAllocation(int)>    ---->    
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onStartedGoingToSleep(int)>
/**
 * Called when the device has started going to sleep.
 * @param why see {@link #onFinishedGoingToSleep(int)}
 *
 * @deprecated use {@link com.android.systemui.keyguard.WakefulnessLifecycle}.
 */
====>[PUBLIC]<com.android.keyguard.KeyguardUpdateMonitorCallback: void onStartedGoingToSleep(int)>    ---->    com.android.systemui.keyguard.WakefulnessLifecycle
<android.app.ActivityManagerNative: IActivityManager getDefault()>
/**
 * Retrieve the system's default/global activity manager.
 *
 * @deprecated use ActivityManager.getService instead.
 */
====>[PUBLIC]<android.app.ActivityManagerNative: IActivityManager getDefault()>    ---->    ActivityManager.getService
<android.renderscript.Mesh.AllocationBuilder: AllocationBuilder addVertexAllocation(Allocation)>
/**
 * @deprecated in API 16
 * Adds an allocation containing vertex buffer data to the
 * builder
 *
 * @param a vertex data allocation
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.AllocationBuilder: AllocationBuilder addVertexAllocation(Allocation)>    ---->    
<android.hardware.hdmi.HdmiControlManager: List<HdmiDeviceInfo> getConnectedDevicesList()>
/**
 * @removed
 * @hide
 * @deprecated Please use {@link #getConnectedDevices()} instead.
 */
====>[HIDDEN]<android.hardware.hdmi.HdmiControlManager: List<HdmiDeviceInfo> getConnectedDevicesList()>    ---->    #getConnectedDevices()
<android.webkit.WebSettings: void setUserAgent(int)>
/**
 * Sets the user-agent string using an integer code.
 * <ul>
 * <li>0 means the WebView should use an Android user-agent string</li>
 * <li>1 means the WebView should use a desktop user-agent string</li>
 * </ul>
 * Other values are ignored. The default is an Android user-agent string,
 * i.e. code value 0.
 *
 * @param ua the integer code for the user-agent string
 * @deprecated Please use {@link #setUserAgentString} instead.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebSettings: void setUserAgent(int)>    ---->    #setUserAgentString
<android.graphics.BaseRecordingCanvas: void drawPosText(String,float[],Paint)>
/**
 * @deprecated checkstyle
 */
====>[PUBLIC]<android.graphics.BaseRecordingCanvas: void drawPosText(String,float[],Paint)>    ---->    
Inconsistency (Non-Documentation):<android.net.wifi.WifiScanner: void startTrackingWifiChange(WifiChangeListener)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//wifi/java/android/net/wifi/WifiScanner.java
<android.net.wifi.WifiScanner: void startTrackingWifiChange(WifiChangeListener)>
/**
 * track changes in wifi environment
 * @param listener object to report events on; this object must be unique and must also be
 * provided on {@link #stopTrackingWifiChange}
 */
====>[PUBLIC]<android.net.wifi.WifiScanner: void startTrackingWifiChange(WifiChangeListener)>    ---->    
<android.content.Intent: Object getExtra(String,Object)>
/**
 * Retrieve extended data from the intent.
 *
 * @param name The name of the desired item.
 * @param defaultValue The default value to return in case no item is
 * associated with the key 'name'
 *
 * @return the value of an item previously added with putExtra(),
 * or defaultValue if none was found.
 *
 * @see #putExtra
 *
 * @deprecated
 * @hide
 */
====>[HIDDEN]<android.content.Intent: Object getExtra(String,Object)>    ---->    
<android.media.AudioManager: void setStreamSolo(int,boolean)>
/**
 * Solo or unsolo a particular stream.
 * <p>
 * Do not use. This method has been deprecated and is now a no-op.
 * {@link #requestAudioFocus} should be used for exclusive audio playback.
 *
 * @param streamType The stream to be soloed/unsoloed.
 * @param state The required solo state: true for solo ON, false for solo
 * OFF
 * @see #isVolumeFixed()
 * @deprecated Do not use. If you need exclusive audio playback use
 * {@link #requestAudioFocus}.
 */
====>[PUBLIC]<android.media.AudioManager: void setStreamSolo(int,boolean)>    ---->    #requestAudioFocus
<com.android.internal.logging.MetricsLogger: void action(Context,int)>
/**
 * @deprecated because untestable; use {@link #action(int)}
 */
====>[PUBLIC]<com.android.internal.logging.MetricsLogger: void action(Context,int)>    ---->    #action(int)
<android.widget.OverScroller: void <init>(Context,Interpolator,float,float,boolean)>
/**
 * Creates an OverScroller.
 * @param context The context of this application.
 * @param interpolator The scroll interpolator. If null, a default (viscous) interpolator will
 * be used.
 * @param bounceCoefficientX A value between 0 and 1 that will determine the proportion of the
 * velocity which is preserved in the bounce when the horizontal edge is reached. A null value
 * means no bounce. This behavior is no longer supported and this coefficient has no effect.
 * @param bounceCoefficientY Same as bounceCoefficientX but for the vertical direction. This
 * behavior is no longer supported and this coefficient has no effect.
 * @param flywheel If true, successive fling motions will keep on increasing scroll speed.
 * @deprecated Use {@link #OverScroller(Context, Interpolator)} instead.
 */
====>[PUBLIC]<android.widget.OverScroller: void <init>(Context,Interpolator,float,float,boolean)>    ---->    #OverScroller(Context, Interpolator)
<android.content.pm.PackageInstaller.SessionInfo: boolean isOpen()>
/**
 * {@hide}
 */
====>[HIDDEN]<android.content.pm.PackageInstaller.SessionInfo: boolean isOpen()>    ---->    
<android.app.admin.DevicePolicyManager: void clearDeviceOwnerApp(String)>
/**
 * Clears the current device owner. The caller must be the device owner. This function should be
 * used cautiously as once it is called it cannot be undone. The device owner can only be set as
 * a part of device setup, before it completes.
 * <p>
 * While some policies previously set by the device owner will be cleared by this method, it is
 * a best-effort process and some other policies will still remain in place after the device
 * owner is cleared.
 *
 * @param packageName The package name of the device owner.
 * @throws SecurityException if the caller is not in {@code packageName} or {@code packageName}
 * does not own the current device owner component.
 *
 * @deprecated This method is expected to be used for testing purposes only. The device owner
 * will lose control of the device and its data after calling it. In order to protect any
 * sensitive data that remains on the device, it is advised that the device owner factory resets
 * the device instead of calling this method. See {@link #wipeData(int)}.
 */
====>[PUBLIC]<android.app.admin.DevicePolicyManager: void clearDeviceOwnerApp(String)>    ---->    d for testing purposes only. The device owner  will lose control of the device and its data after calling it. In order to protect any  sensitive data that remains on the device, it is advised that the device owner factory resets  the device
<android.os.Environment: String getStorageState(File)>
/**
 * @deprecated use {@link #getExternalStorageState(File)}
 */
====>[PUBLIC]<android.os.Environment: String getStorageState(File)>    ---->    #getExternalStorageState(File)
<android.view.KeyEvent: boolean getKeyData(KeyData)>
/**
 * Get the character conversion data for a given key code.
 *
 * @param results A {@link KeyCharacterMap.KeyData} instance that will be
 * filled with the results.
 * @return True if the key was mapped.  If the key was not mapped, results is not modified.
 *
 * @deprecated instead use {@link #getDisplayLabel()},
 * {@link #getNumber()} or {@link #getUnicodeChar(int)}.
 */
====>[PUBLIC]<android.view.KeyEvent: boolean getKeyData(KeyData)>    ---->    #getDisplayLabel()
<android.net.NetworkUtils: InetAddress numericToInetAddress(String)>
/**
 * Create an InetAddress from a string where the string must be a standard
 * representation of a V4 or V6 address.  Avoids doing a DNS lookup on failure
 * but it will throw an IllegalArgumentException in that case.
 * @param addrString
 * @return the InetAddress
 * @hide
 * @deprecated Use {@link InetAddresses#parseNumericAddress(String)}, if possible.
 */
====>[HIDDEN]<android.net.NetworkUtils: InetAddress numericToInetAddress(String)>    ---->    InetAddresses#parseNumericAddress(String)
<android.provider.Browser: String[] getVisitedHistory(ContentResolver)>
/**
 * Returns all the URLs in the history.
 *
 * @param cr   The ContentResolver used to access the database.
 * @hide pending API council approval
 */
====>[HIDDEN]<android.provider.Browser: String[] getVisitedHistory(ContentResolver)>    ---->    
<android.app.PictureInPictureArgs: void setSourceRectHint(Rect)>
/**
 * @hide
 */
====>[HIDDEN]<android.app.PictureInPictureArgs: void setSourceRectHint(Rect)>    ---->    
<android.net.NetworkUtils: int inetAddressToInt(Inet4Address)>
/**
 * @see Inet4AddressUtils#inet4AddressToIntHTL(Inet4Address)
 * @deprecated Use either {@link Inet4AddressUtils#inet4AddressToIntHTH(Inet4Address)}
 * or {@link Inet4AddressUtils#inet4AddressToIntHTL(Inet4Address)}
 */
====>[PUBLIC]<android.net.NetworkUtils: int inetAddressToInt(Inet4Address)>    ---->    Inet4AddressUtils#inet4AddressToIntHTH(Inet4Address)
<android.telephony.SubscriptionPlan.Builder: Builder createRecurringWeekly(ZonedDateTime)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.telephony.SubscriptionPlan.Builder: Builder createRecurringWeekly(ZonedDateTime)>    ---->    
<android.speech.tts.TextToSpeech: Locale getDefaultLanguage()>
/**
 * Returns a Locale instance describing the language currently being used as the default
 * Text-to-speech language.
 *
 * The locale object returned by this method is NOT a valid one. It has identical form to the
 * one in {@link #getLanguage()}. Please refer to {@link #getLanguage()} for more information.
 *
 * @return language, country (if any) and variant (if any) used by the client stored in a
 * Locale instance, or {@code null} on error.
 * @deprecated As of API level 21, use <code>getDefaultVoice().getLocale()</code> ({@link
 * #getDefaultVoice()})
 */
====>[PUBLIC]<android.speech.tts.TextToSpeech: Locale getDefaultLanguage()>    ---->    #getDefaultVoice()
<android.renderscript.Mesh.Builder: Builder addVertexType(Type)>
/**
 * @deprecated in API 16
 * Adds a vertex data type to the builder object
 *
 * @param t type of the vertex data allocation to be created
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.Builder: Builder addVertexType(Type)>    ---->    
<android.app.ActivityManager: List<RunningServiceInfo> getRunningServices(int)>
/**
 * Return a list of the services that are currently running.
 *
 * <p><b>Note: this method is only intended for debugging or implementing
 * service management type user interfaces.</b></p>
 *
 * @deprecated As of {@link android.os.Build.VERSION_CODES#O}, this method
 * is no longer available to third party applications.  For backwards compatibility,
 * it will still return the caller's own services.
 *
 * @param maxNum The maximum number of entries to return in the list.  The
 * actual number returned may be smaller, depending on how many services
 * are running.
 *
 * @return Returns a list of RunningServiceInfo records describing each of
 * the running tasks.
 */
====>[PUBLIC]<android.app.ActivityManager: List<RunningServiceInfo> getRunningServices(int)>    ---->    
<android.telephony.ServiceState: void <init>(Parcel)>
/**
 * Construct a ServiceState object from the given parcel.
 *
 * @deprecated The constructor takes parcel should not be public at the beginning. Use
 * {@link #ServiceState()} instead.
 */
====>[PUBLIC]<android.telephony.ServiceState: void <init>(Parcel)>    ---->    #ServiceState()
<android.media.tv.TvInputInfo: TvInputInfo createTvInputInfo(Context,ResolveInfo,HdmiDeviceInfo,String,String,Uri)>
/**
 * Create a new instance of the TvInputInfo class, instantiating it from the given Context,
 * ResolveInfo, and HdmiDeviceInfo.
 *
 * @param service The ResolveInfo returned from the package manager about this TV input service.
 * @param hdmiDeviceInfo The HdmiDeviceInfo for a HDMI CEC logical device.
 * @param parentId The ID of this TV input's parent input. {@code null} if none exists.
 * @param label The label of this TvInputInfo. If it is {@code null} or empty, {@code service}
 * label will be loaded.
 * @param iconUri The {@link android.net.Uri} to load the icon image. See
 * {@link android.content.ContentResolver#openInputStream}. If it is {@code null},
 * the application icon of {@code service} will be loaded.
 * @hide
 * @deprecated Use {@link Builder} instead.
 */
====>[HIDDEN]<android.media.tv.TvInputInfo: TvInputInfo createTvInputInfo(Context,ResolveInfo,HdmiDeviceInfo,String,String,Uri)>    ---->    Builder
<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByOtherThreads()>
/**
 * Always returns false.
 * <p>
 * There is no longer the concept of a database lock, so this method always returns false.
 * </p>
 *
 * @return False.
 * @deprecated Always returns false.  Do not use this method.
 */
====>[PUBLIC]<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByOtherThreads()>    ---->    
<android.app.KeyguardManager: boolean inKeyguardRestrictedInputMode()>
/**
 * If keyguard screen is showing or in restricted key input mode (i.e. in
 * keyguard password emergency screen). When in such mode, certain keys,
 * such as the Home key and the right soft keys, don't work.
 *
 * @return true if in keyguard restricted input mode.
 * @deprecated Use {@link #isKeyguardLocked()} instead.
 */
====>[PUBLIC]<android.app.KeyguardManager: boolean inKeyguardRestrictedInputMode()>    ---->    #isKeyguardLocked()
<android.widget.CalendarView: int getShownWeekCount()>
/**
 * Gets the number of weeks to be shown.
 *
 * @return The shown week count.
 *
 * @attr ref android.R.styleable#CalendarView_shownWeekCount
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: int getShownWeekCount()>    ---->    
<android.net.ConnectivityManager: void setProvisioningNotificationVisible(boolean,int,String)>
/**
 * Set sign in error notification to visible or in visible
 *
 * {@hide}
 * @deprecated Doesn't properly deal with multiple connected networks of the same type.
 */
====>[HIDDEN]<android.net.ConnectivityManager: void setProvisioningNotificationVisible(boolean,int,String)>    ---->    
<android.net.wifi.RttManager: Capabilities getCapabilities()>
/**
 * @deprecated Use the new {@link android.net.wifi.RttManager#getRttCapabilities()} API.
 */
====>[PUBLIC]<android.net.wifi.RttManager: Capabilities getCapabilities()>    ---->    android.net.wifi.RttManager#getRttCapabilities()
<android.os.Debug: int setGlobalAllocationLimit(int)>
/**
 * Establish a global object allocation limit.  This feature was
 * never enabled in release builds.  The allocation limits feature
 * was removed in Honeycomb.  This method exists for compatibility
 * and always returns -1 and has no effect.
 *
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: int setGlobalAllocationLimit(int)>    ---->    
<android.renderscript.ScriptGroup: void setInput(KernelID,Allocation)>
/**
 * Sets an input of the ScriptGroup. This specifies an
 * Allocation to be used for kernels that require an input
 * Allocation provided from outside of the ScriptGroup.
 *
 * @deprecated Set arguments to {@link #execute(Object...)} instead.
 *
 * @param s The ID of the kernel where the allocation should be
 * connected.
 * @param a The allocation to connect.
 */
====>[PUBLIC]<android.renderscript.ScriptGroup: void setInput(KernelID,Allocation)>    ---->    #execute(Object...)
<android.util.proto.ProtoOutputStream: void writePackedUInt64(long,long[])>
/**
 * Write a single proto "uint64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedUInt64(long,long[])>    ---->    #write
<android.telephony.SubscriptionInfo: boolean canManageSubscription(Context,String)>
/**
 * Checks whether the given app is authorized to manage this subscription according to its
 * metadata. Only supported for embedded subscriptions (if {@link #isEmbedded} returns true).
 *
 * @param context Any context.
 * @param packageName Package name of the app to check.
 * @return whether the app is authorized to manage this subscription per its metadata.
 * @throws UnsupportedOperationException if this subscription is not embedded.
 * @hide
 * @deprecated - Do not use.
 */
====>[HIDDEN]<android.telephony.SubscriptionInfo: boolean canManageSubscription(Context,String)>    ---->    
<android.app.Instrumentation: void startAllocCounting()>

====>[PUBLIC]<android.app.Instrumentation: void startAllocCounting()>    ---->    
<android.net.ConnectivityManager: LinkProperties getLinkProperties(int)>
/**
 * Returns the IP information for a given network type.
 *
 * @param networkType the network type of interest.
 * @return a {@link LinkProperties} object describing the IP info
 * for the given networkType, or {@code null} if there is
 * no current default network.
 *
 * {@hide}
 * @deprecated This method does not support multiple connected networks
 * of the same type. Use {@link #getAllNetworks},
 * {@link #getNetworkInfo(android.net.Network)}, and
 * {@link #getLinkProperties(android.net.Network)} instead.
 */
====>[HIDDEN]<android.net.ConnectivityManager: LinkProperties getLinkProperties(int)>    ---->    #getAllNetworks
<android.test.TouchUtils: void longClickView(ActivityInstrumentationTestCase,View)>
/**
 * Simulate touching the center of a view, holding until it is a long press, and then releasing.
 *
 * @param test The test case that is being run
 * @param v The view that should be clicked
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: void longClickView(ActivityInstrumentationTestCase,View)>    ---->    android.test.ActivityInstrumentationTestCase2
<com.android.internal.logging.MetricsLogger: void action(Context,int,String)>
/**
 * @deprecated because untestable; use {@link #action(int, String)}
 */
====>[PUBLIC]<com.android.internal.logging.MetricsLogger: void action(Context,int,String)>    ---->    #action(int, String)
<android.database.sqlite.SQLiteDatabase.OpenParams.Builder: Builder setIdleConnectionTimeout(long)>
/**
 * Sets the maximum number of milliseconds that SQLite connection is allowed to be idle
 * before it is closed and removed from the pool.
 *
 * <p><b>DO NOT USE</b> this method.
 * This feature has negative side effects that are very hard to foresee.
 * <p>A connection timeout allows the system to internally close a connection to
 * a SQLite database after a given timeout, which is good for reducing app's memory
 * consumption.
 * <b>However</b> the side effect is it <b>will reset all of SQLite's per-connection
 * states</b>, which are typically modified with a {@code PRAGMA} statement, and
 * these states <b>will not be restored</b> when a connection is re-established
 * internally, and the system does not provide a callback for an app to reconfigure a
 * connection.
 * This feature may only be used if an app relies on none of such per-connection states.
 *
 * @param idleConnectionTimeoutMs timeout in milliseconds. Use {@link Long#MAX_VALUE}
 * to allow unlimited idle connections.
 *
 * @see SQLiteOpenHelper#setIdleConnectionTimeout(long)
 *
 * @deprecated DO NOT USE this method. See the javadoc for the details.
 */
====>[PUBLIC]<android.database.sqlite.SQLiteDatabase.OpenParams.Builder: Builder setIdleConnectionTimeout(long)>    ---->    
<android.net.wifi.aware.DiscoverySession: NetworkSpecifier createNetworkSpecifierPmk(PeerHandle,byte[])>
/**
 * Create a {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} for
 * an encrypted WiFi Aware connection (link) to the specified peer. The
 * {@link android.net.NetworkRequest.Builder#addTransportType(int)} should be set to
 * {@link android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE}.
 * <p>
 * This method should be used when setting up a connection with a peer discovered through Aware
 * discovery or communication (in such scenarios the MAC address of the peer is shielded by
 * an opaque peer ID handle). If an Aware connection is needed to a peer discovered using other
 * OOB (out-of-band) mechanism then use the alternative
 * {@link WifiAwareSession#createNetworkSpecifierPmk(int, byte[], byte[])} method - which uses
 * the peer's MAC address.
 * <p>
 * Note: per the Wi-Fi Aware specification the roles are fixed - a Subscriber is an INITIATOR
 * and a Publisher is a RESPONDER.
 * @deprecated Use the replacement {@link WifiAwareNetworkSpecifier.Builder}.
 *
 * @param peerHandle The peer's handle obtained through
 * {@link DiscoverySessionCallback#onServiceDiscovered(PeerHandle,
 * byte[], java.util.List)} or
 * {@link DiscoverySessionCallback#onMessageReceived(PeerHandle,
 * byte[])}. On a RESPONDER this value is used to gate the acceptance of a connection request
 * from only that peer.
 * @param pmk A PMK (pairwise master key, see IEEE 802.11i) specifying the key to use for
 * encrypting the data-path. Use the
 * {@link #createNetworkSpecifierPassphrase(PeerHandle, String)} to specify a
 * Passphrase or {@link #createNetworkSpecifierOpen(PeerHandle)} to specify an
 * open (unencrypted) link.
 *
 * @return A {@link NetworkSpecifier} to be used to construct
 * {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} to pass to
 * {@link android.net.ConnectivityManager#requestNetwork(android.net.NetworkRequest,
 * android.net.ConnectivityManager.NetworkCallback)}
 * [or other varieties of that API].
 *
 * @hide
 */
====>[HIDDEN]<android.net.wifi.aware.DiscoverySession: NetworkSpecifier createNetworkSpecifierPmk(PeerHandle,byte[])>    ---->    WifiAwareNetworkSpecifier.Builder
<android.media.AudioRecord: void removeOnRoutingChangedListener(OnRoutingChangedListener)>
/**
 * Removes an {@link OnRoutingChangedListener} which has been previously added
 * to receive rerouting notifications.
 * @param listener The previously added {@link OnRoutingChangedListener} interface to remove.
 * @deprecated users should switch to the general purpose
 * {@link AudioRouting.OnRoutingChangedListener} class instead.
 */
====>[PUBLIC]<android.media.AudioRecord: void removeOnRoutingChangedListener(OnRoutingChangedListener)>    ---->    AudioRouting.OnRoutingChangedListener
<android.telephony.PhoneNumberUtils: String calledPartyBCDFragmentToString(byte[],int,int)>
/**
 * Like calledPartyBCDToString, but field does not start with a
 * TOA byte. For example: SIM ADN extension fields
 *
 * @deprecated use {@link #calledPartyBCDFragmentToString(byte[], int, int, int)} instead.
 * Calling this method is equivalent to calling
 * {@link #calledPartyBCDFragmentToString(byte[], int, int, int)} with
 * {@link #BCD_EXTENDED_TYPE_EF_ADN} as the extended type.
 */
====>[PUBLIC]<android.telephony.PhoneNumberUtils: String calledPartyBCDFragmentToString(byte[],int,int)>    ---->    #calledPartyBCDFragmentToString(byte[], int, int, int)
<android.test.TouchUtils: void dragQuarterScreenUp(ActivityInstrumentationTestCase)>
/**
 * Simulate touching in the center of the screen and dragging one quarter of the way up
 * @param test The test case that is being run
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: void dragQuarterScreenUp(ActivityInstrumentationTestCase)>    ---->    android.test.ActivityInstrumentationTestCase2
<android.hardware.usb.UsbManager: void setCurrentFunction(String,boolean)>
/**
 * Sets the current USB functions when in device mode.
 *
 * @deprecated use setCurrentFunctions(long) instead.
 * @param functions the USB function(s) to set.
 * @param usbDataUnlocked unused
 *
 * {@hide}
 */
====>[HIDDEN]<android.hardware.usb.UsbManager: void setCurrentFunction(String,boolean)>    ---->    setCurrentFunctions(long)
<android.graphics.drawable.AnimatedImageDrawable: void setLoopCount(int)>
/**
 * @removed
 * @deprecated Replaced with setRepeatCount to match other APIs.
 */
====>[HIDDEN]<android.graphics.drawable.AnimatedImageDrawable: void setLoopCount(int)>    ---->    
<android.net.ConnectivityManager: NetworkInfo[] getAllNetworkInfo()>
/**
 * Returns connection status information about all network
 * types supported by the device.
 *
 * @return an array of {@link NetworkInfo} objects.  Check each
 * {@link NetworkInfo#getType} for which type each applies.
 *
 * @deprecated This method does not support multiple connected networks
 * of the same type. Use {@link #getAllNetworks} and
 * {@link #getNetworkInfo(android.net.Network)} instead.
 */
====>[PUBLIC]<android.net.ConnectivityManager: NetworkInfo[] getAllNetworkInfo()>    ---->    #getAllNetworks
<android.test.TouchUtils: void dragViewToBottom(ActivityInstrumentationTestCase,View)>
/**
 * Simulate touching the center of a view and dragging to the bottom of the screen.
 *
 * @param test The test case that is being run
 * @param v The view that should be dragged
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: void dragViewToBottom(ActivityInstrumentationTestCase,View)>    ---->    android.test.ActivityInstrumentationTestCase2
<android.webkit.WebSettings: boolean getUseWebViewBackgroundForOverscrollBackground()>
/**
 * Gets whether this WebView uses WebView's background instead of
 * internal pattern for over scroll background.
 *
 * @see #setUseWebViewBackgroundForOverscrollBackground
 * @deprecated This method is now obsolete.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebSettings: boolean getUseWebViewBackgroundForOverscrollBackground()>    ---->    
<android.app.backup.BackupTransport: String dataManagementLabel()>
/**
 * On demand, supply a short string that can be shown to the user as the label on an overflow
 * menu item used to invoke the data management UI.
 *
 * @return A string to be used as the label for the transport's data management affordance. If
 * the transport supplies a data management intent, this method must not return {@code
 * null}.
 * @deprecated Since Android Q, please use the variant {@link #dataManagementIntentLabel()}
 * instead.
 */
====>[PUBLIC]<android.app.backup.BackupTransport: String dataManagementLabel()>    ---->    #dataManagementIntentLabel()
<android.os.Debug: void resetGlobalExternalFreedSize()>
/**
 * This method exists for compatibility and has no effect.
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: void resetGlobalExternalFreedSize()>    ---->    
Inconsistency (Non-Documentation):<com.android.server.net.IpConfigStore: SparseArray<IpConfiguration> readIpAndProxyConfigurations(InputStream)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//services/core/java/com/android/server/net/IpConfigStore.java
<com.android.server.net.IpConfigStore: SparseArray<IpConfiguration> readIpAndProxyConfigurations(InputStream)>
/**
 * @Deprecated use {@link #readIpConfigurations(InputStream)}
 */
====>[PUBLIC]<com.android.server.net.IpConfigStore: SparseArray<IpConfiguration> readIpAndProxyConfigurations(InputStream)>    ---->    
<android.telecom.TelecomManager: void acceptRingingCall(int)>
/**
 * If there is a ringing incoming call, this method accepts the call on behalf of the user,
 * with the specified video state.
 *
 * Requires permission: {@link android.Manifest.permission#MODIFY_PHONE_STATE} or
 * {@link android.Manifest.permission#ANSWER_PHONE_CALLS}
 *
 * @param videoState The desired video state to answer the call with.
 * @deprecated Companion apps for wearable devices should use the {@link InCallService} API
 * instead.
 */
====>[PUBLIC]<android.telecom.TelecomManager: void acceptRingingCall(int)>    ---->    InCallService
<android.renderscript.RSSurfaceView: RenderScriptGL getRenderScriptGL()>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.RSSurfaceView: RenderScriptGL getRenderScriptGL()>    ---->    
<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInParent(Rect)>
/**
 * Gets the node bounds in the viewParent's coordinates.
 * {@link #getParent()} does not represent the source's viewParent.
 * Instead it represents the result of {@link View#getParentForAccessibility()},
 * which returns the closest ancestor where {@link View#isImportantForAccessibility()} is true.
 * So this method is not reliable.
 *
 * @param outBounds The output node bounds.
 * @deprecated Use {@link #getBoundsInScreen(Rect)} instead.
 */
====>[PUBLIC]<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInParent(Rect)>    ---->    #getBoundsInScreen(Rect)
<android.text.TextUtils: CharSequence getReverse(CharSequence,int,int)>
/**
 * This function only reverses individual {@code char}s and not their associated
 * spans. It doesn't support surrogate pairs (that correspond to non-BMP code points), combining
 * sequences or conjuncts either.
 * @deprecated Do not use.
 */
====>[PUBLIC]<android.text.TextUtils: CharSequence getReverse(CharSequence,int,int)>    ---->    
<android.database.sqlite.SQLiteClosable: void releaseReferenceFromContainer()>
/**
 * Releases a reference to the object that was owned by the container of the object,
 * closing the object if the last reference was released.
 *
 * @see #onAllReferencesReleasedFromContainer()
 * @deprecated Do not use.
 */
====>[PUBLIC]<android.database.sqlite.SQLiteClosable: void releaseReferenceFromContainer()>    ---->    
<android.content.pm.ShortcutInfo.Builder: Builder setText(CharSequence)>
/**
 * @hide -- old signature, the internal code still uses it.
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo.Builder: Builder setText(CharSequence)>    ---->    
<android.content.Context: void sendStickyBroadcast(Intent)>
/**
 * <p>Perform a {@link #sendBroadcast(Intent)} that is "sticky," meaning the
 * Intent you are sending stays around after the broadcast is complete,
 * so that others can quickly retrieve that data through the return
 * value of {@link #registerReceiver(BroadcastReceiver, IntentFilter)}.  In
 * all other ways, this behaves the same as
 * {@link #sendBroadcast(Intent)}.
 *
 * @deprecated Sticky broadcasts should not be used.  They provide no security (anyone
 * can access them), no protection (anyone can modify them), and many other problems.
 * The recommended pattern is to use a non-sticky broadcast to report that <em>something</em>
 * has changed, with another mechanism for apps to retrieve the current value whenever
 * desired.
 *
 * @param intent The Intent to broadcast; all receivers matching this
 * Intent will receive the broadcast, and the Intent will be held to
 * be re-broadcast to future receivers.
 *
 * @see #sendBroadcast(Intent)
 * @see #sendStickyOrderedBroadcast(Intent, BroadcastReceiver, Handler, int, String, Bundle)
 */
====>[PUBLIC]<android.content.Context: void sendStickyBroadcast(Intent)>    ---->    #sendBroadcast(Intent)
<android.media.MediaRecorder: void setCamera(Camera)>
/**
 * Sets a {@link android.hardware.Camera} to use for recording.
 *
 * <p>Use this function to switch quickly between preview and capture mode without a teardown of
 * the camera object. {@link android.hardware.Camera#unlock()} should be called before
 * this. Must call before {@link #prepare}.</p>
 *
 * @param c the Camera to use for recording
 * @deprecated Use {@link #getSurface} and the {@link android.hardware.camera2} API instead.
 */
====>[PUBLIC]<android.media.MediaRecorder: void setCamera(Camera)>    ---->    #getSurface
<android.content.ContentValues: ArrayList<String> getStringArrayList(String)>
/**
 * Unsupported, here until we get proper bulk insert APIs.
 * {@hide}
 */
====>[HIDDEN]<android.content.ContentValues: ArrayList<String> getStringArrayList(String)>    ---->    
<android.widget.DatePicker: CalendarView getCalendarView()>
/**
 * Returns the {@link CalendarView} used by this picker.
 * <p>
 * <strong>Note:</strong> This method throws an
 * {@link UnsupportedOperationException} when the
 * {@link android.R.styleable#DatePicker_datePickerMode} attribute is set
 * to {@code calendar}.
 *
 * @return the calendar view
 * @see #getCalendarViewShown()
 * @deprecated Not supported by Material-style {@code calendar} mode
 * @throws UnsupportedOperationException if called when the picker is
 * displayed in {@code calendar} mode
 */
====>[PUBLIC]<android.widget.DatePicker: CalendarView getCalendarView()>    ---->    
<android.bluetooth.BluetoothHealth: boolean registerSinkAppConfiguration(String,int,BluetoothHealthCallback)>
/**
 * Register an application configuration that acts as a Health SINK.
 * This is the configuration that will be used to communicate with health devices
 * which will act as the {@link #SOURCE_ROLE}. This is an asynchronous call and so
 * the callback is used to notify success or failure if the function returns true.
 *
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
 *
 * @param name The friendly name associated with the application or configuration.
 * @param dataType The dataType of the Source role of Health Profile to which the sink wants to
 * connect to.
 * @param callback A callback to indicate success or failure of the registration and all
 * operations done on this application configuration.
 * @return If true, callback will be called.
 *
 * @deprecated Health Device Profile (HDP) and MCAP protocol are no longer used. New
 * apps should use Bluetooth Low Energy based solutions such as {@link BluetoothGatt},
 * {@link BluetoothAdapter#listenUsingL2capChannel()(int)}, or
 * {@link BluetoothDevice#createL2capChannel(int)}
 */
====>[PUBLIC]<android.bluetooth.BluetoothHealth: boolean registerSinkAppConfiguration(String,int,BluetoothHealthCallback)>    ---->    BluetoothGatt
<com.android.internal.widget.RecyclerView.ItemDecoration: void onDrawOver(Canvas,RecyclerView)>
/**
 * @deprecated
 * Override {@link #onDrawOver(Canvas, RecyclerView, RecyclerView.State)}
 */
====>[PUBLIC]<com.android.internal.widget.RecyclerView.ItemDecoration: void onDrawOver(Canvas,RecyclerView)>    ---->    #onDrawOver(Canvas, RecyclerView, RecyclerView.State)
<android.net.http.SslCertificate: String getValidNotBefore()>
/**
 * @return Not-before date from the certificate validity period in
 * ISO 8601 format or "" if none has been set
 *
 * @deprecated Use {@link #getValidNotBeforeDate()}
 */
====>[PUBLIC]<android.net.http.SslCertificate: String getValidNotBefore()>    ---->    #getValidNotBeforeDate()
<android.hardware.SensorManager: void unregisterListener(SensorListener,int)>
/**
 * Unregisters a listener for the sensors with which it is registered.
 *
 * @deprecated This method is deprecated, use
 * {@link SensorManager#unregisterListener(SensorEventListener, Sensor)}
 * instead.
 *
 * @param listener
 * a SensorListener object
 *
 * @param sensors
 * a bit masks of the sensors to unregister from
 */
====>[PUBLIC]<android.hardware.SensorManager: void unregisterListener(SensorListener,int)>    ---->    SensorManager#unregisterListener(SensorEventListener, Sensor)
<android.provider.Contacts.People: InputStream openContactPhotoInputStream(ContentResolver,Uri)>
/**
 * Opens an InputStream for the person's photo and returns the photo as a Bitmap.
 * If the person's photo isn't present returns the placeholderImageResource instead.
 * @param person the person whose photo should be used
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.People: InputStream openContactPhotoInputStream(ContentResolver,Uri)>    ---->    android.provider.ContactsContract
<android.location.Location: void removeSpeedAccuracy()>
/**
 * Remove the speed accuracy from this location.
 *
 * <p>Following this call {@link #hasSpeedAccuracy} will return false, and
 * {@link #getSpeedAccuracyMetersPerSecond} will return 0.0.
 *
 * @deprecated use a new Location object for location updates.
 * @removed
 */
====>[HIDDEN]<android.location.Location: void removeSpeedAccuracy()>    ---->    
<android.location.GnssMeasurement: double getCarrierPhase()>
/**
 * Gets the RF phase detected by the receiver.
 *
 * <p>Range: [0.0, 1.0].
 *
 * <p>This is the fractional part of the complete carrier phase measurement.
 *
 * <p>The reference frequency is given by the value of {@link #getCarrierFrequencyHz()}.
 *
 * <p>The error estimate for this value is {@link #getCarrierPhaseUncertainty()}.
 *
 * <p>The value is only available if {@link #hasCarrierPhase()} is {@code true}.
 *
 * @deprecated use {@link #getAccumulatedDeltaRangeMeters()} instead.
 */
====>[PUBLIC]<android.location.GnssMeasurement: double getCarrierPhase()>    ---->    #getAccumulatedDeltaRangeMeters()
<android.app.Notification.Builder: Builder addAction(int,CharSequence,PendingIntent)>
/**
 * Add an action to this notification. Actions are typically displayed by
 * the system as a button adjacent to the notification content.
 * <p>
 * Every action must have an icon (32dp square and matching the
 * <a href="{@docRoot}design/style/iconography.html#action-bar">Holo
 * Dark action bar</a> visual style), a textual label, and a {@link PendingIntent}.
 * <p>
 * A notification in its expanded form can display up to 3 actions, from left to right in
 * the order they were added. Actions will not be displayed when the notification is
 * collapsed, however, so be sure that any essential functions may be accessed by the user
 * in some other way (for example, in the Activity pointed to by {@link #contentIntent}).
 *
 * @param icon Resource ID of a drawable that represents the action.
 * @param title Text describing the action.
 * @param intent PendingIntent to be fired when the action is invoked.
 *
 * @deprecated Use {@link #addAction(Action)} instead.
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder addAction(int,CharSequence,PendingIntent)>    ---->    #addAction(Action)
<android.service.autofill.ImageTransformation.Builder: void <init>(AutofillId,Pattern,int)>
/**
 * Creates a new builder for a autofill id and add a first option.
 *
 * @param id id of the screen field that will be used to evaluate whether the image should
 * be used.
 * @param regex regular expression defining what should be matched to use this image.
 * @param resId resource id of the image (in the autofill service's package). The
 * {@link RemoteViews presentation} must contain a {@link ImageView} child with that id.
 *
 * @deprecated use
 * {@link #ImageTransformation.Builder(AutofillId, Pattern, int, CharSequence)} instead.
 */
====>[PUBLIC]<android.service.autofill.ImageTransformation.Builder: void <init>(AutofillId,Pattern,int)>    ---->    #ImageTransformation.Builder(AutofillId, Pattern, int, CharSequence)
<android.graphics.Canvas: Matrix getMatrix()>
/**
 * Return a new matrix with a copy of the canvas' current transformation
 * matrix.
 *
 * @deprecated {@link #isHardwareAccelerated() Hardware accelerated} canvases may have any
 * matrix when passed to a View or Drawable, as it is implementation defined where in the
 * hierarchy such canvases are created. It is recommended in such cases to either draw contents
 * irrespective of the current matrix, or to track relevant transform state outside of the
 * canvas.
 */
====>[PUBLIC]<android.graphics.Canvas: Matrix getMatrix()>    ---->    #isHardwareAccelerated() Hardware accelerated
<android.os.Debug: void resetAllCounts()>
/**
 * Clears all the global and thread-local memory allocation counters.
 * @see #startAllocCounting()
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void resetAllCounts()>    ---->    
<android.telecom.Conference: long getConnectTimeMillis()>
/**
 * @hide
 * @deprecated Use {@link #getConnectionTime}.
 */
====>[HIDDEN]<android.telecom.Conference: long getConnectTimeMillis()>    ---->    #getConnectionTime
<android.net.wifi.WifiManager: List<WifiConfiguration> getConfiguredNetworks()>
/**
 * Return a list of all the networks configured for the current foreground
 * user.
 *
 * Not all fields of WifiConfiguration are returned. Only the following
 * fields are filled in:
 * <ul>
 * <li>networkId</li>
 * <li>SSID</li>
 * <li>BSSID</li>
 * <li>priority</li>
 * <li>allowedProtocols</li>
 * <li>allowedKeyManagement</li>
 * <li>allowedAuthAlgorithms</li>
 * <li>allowedPairwiseCiphers</li>
 * <li>allowedGroupCiphers</li>
 * </ul>
 * @return a list of network configurations in the form of a list
 * of {@link WifiConfiguration} objects.
 *
 * @deprecated
 * a) See {@link WifiNetworkSpecifier.Builder#build()} for new
 * mechanism to trigger connection to a Wi-Fi network.
 * b) See {@link #addNetworkSuggestions(List)},
 * {@link #removeNetworkSuggestions(List)} for new API to add Wi-Fi networks for consideration
 * when auto-connecting to wifi.
 * <b>Compatibility Note:</b> For applications targeting
 * {@link android.os.Build.VERSION_CODES#Q} or above, this API will return an empty list,
 * except for:
 * <ul>
 * <li>Device Owner (DO) & Profile Owner (PO) apps will have access to the full list.
 * <li>Callers with Carrier privilege will receive a restricted list only containing
 * configurations which they created.
 * </ul>
 */
====>[PUBLIC]<android.net.wifi.WifiManager: List<WifiConfiguration> getConfiguredNetworks()>    ---->    WifiNetworkSpecifier.Builder#build()
<android.renderscript.ProgramVertexFixedFunction.Constants: void setModelview(Matrix4f)>
/**
 * @deprecated in API 16
 * Sets the modelview matrix in the fixed function matrix buffer
 *
 * @param m modelview matrix
 */
====>[PUBLIC]<android.renderscript.ProgramVertexFixedFunction.Constants: void setModelview(Matrix4f)>    ---->    
<android.os.storage.StorageManager: boolean isUsbMassStorageConnected()>
/**
 * Query if a USB Mass Storage (UMS) host is connected.
 * @return true if UMS host is connected.
 *
 * @hide
 */
====>[HIDDEN]<android.os.storage.StorageManager: boolean isUsbMassStorageConnected()>    ---->    
<android.net.wifi.WifiManager: boolean reconnect()>
/**
 * Reconnect to the currently active access point, if we are currently
 * disconnected. This may result in the asynchronous delivery of state
 * change events.
 * @return {@code true} if the operation succeeded
 *
 * @deprecated
 * a) See {@link WifiNetworkSpecifier.Builder#build()} for new
 * mechanism to trigger connection to a Wi-Fi network.
 * b) See {@link #addNetworkSuggestions(List)},
 * {@link #removeNetworkSuggestions(List)} for new API to add Wi-Fi networks for consideration
 * when auto-connecting to wifi.
 * <b>Compatibility Note:</b> For applications targeting
 * {@link android.os.Build.VERSION_CODES#Q} or above, this API will always return false.
 */
====>[PUBLIC]<android.net.wifi.WifiManager: boolean reconnect()>    ---->    WifiNetworkSpecifier.Builder#build()
<android.telephony.CellIdentityGsm: int getMnc()>
/**
 * @return 2 or 3-digit Mobile Network Code, 0..999,
 * {@link android.telephony.CellInfo#UNAVAILABLE UNAVAILABLE} if unavailable.
 * @deprecated Use {@link #getMncString} instead.
 */
====>[PUBLIC]<android.telephony.CellIdentityGsm: int getMnc()>    ---->    #getMncString
<android.content.pm.LauncherApps: List<ShortcutInfo> getShortcutInfo(String,List<String>,UserHandle)>
/**
 * @hide // No longer used.  Use getShortcuts() instead.  Kept for unit tests.
 */
====>[HIDDEN]<android.content.pm.LauncherApps: List<ShortcutInfo> getShortcutInfo(String,List<String>,UserHandle)>    ---->    
<android.os.Debug: int getThreadAllocSize()>
/**
 * Returns the thread-local size of objects allocated by the runtime between a
 * {@link #startAllocCounting() start} and {@link #stopAllocCounting() stop}.
 * @return The allocated size in bytes.
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: int getThreadAllocSize()>    ---->    
<android.webkit.CacheManager: boolean startCacheTransaction()>
/**
 * Starts a cache transaction. Returns {@code true} if this is the only running
 * transaction. Otherwise, this transaction is nested inside currently
 * running transactions and {@code false} is returned.
 *
 * @return {@code true} if this is the only running transaction
 * @deprecated This method no longer has any effect and always returns {@code false}.
 */
====>[PUBLIC]<android.webkit.CacheManager: boolean startCacheTransaction()>    ---->    
<android.widget.SearchView: boolean isIconfiedByDefault()>
/**
 * Returns the default iconified state of the search field.
 * @return
 *
 * @deprecated use {@link #isIconifiedByDefault()}
 * @attr ref android.R.styleable#SearchView_iconifiedByDefault
 */
====>[PUBLIC]<android.widget.SearchView: boolean isIconfiedByDefault()>    ---->    #isIconifiedByDefault()
<android.hardware.location.ContextHubManager: int unregisterCallback(Callback)>
/**
 * Unregister a callback for receive messages from the context hub.
 *
 * @see Callback
 *
 * @param callback method to deregister
 *
 * @return int 0 on success, -1 otherwise
 *
 * @deprecated Use {@link android.hardware.location.ContextHubClient#close()} to unregister
 * a {@link android.hardware.location.ContextHubClientCallback}.
 */
====>[PUBLIC]<android.hardware.location.ContextHubManager: int unregisterCallback(Callback)>    ---->    android.hardware.location.ContextHubClient#close()
<android.renderscript.RenderScriptGL: int getHeight()>
/**
 * @deprecated in API 16
 * return the height of the last set surface.
 *
 * @return int
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL: int getHeight()>    ---->    
<android.service.notification.StatusBarNotification: int getUserId()>
/**
 * Returns a userid for whom this notification is intended.
 *
 * @deprecated Use {@link #getUser()} instead.
 */
====>[PUBLIC]<android.service.notification.StatusBarNotification: int getUserId()>    ---->    #getUser()
<android.os.StatFs: int getBlockSize()>
/**
 * @deprecated Use {@link #getBlockSizeLong()} instead.
 */
====>[PUBLIC]<android.os.StatFs: int getBlockSize()>    ---->    #getBlockSizeLong()
<android.content.Intent: Intent getIntent(String)>
/**
 * Call {@link #parseUri} with 0 flags.
 * @deprecated Use {@link #parseUri} instead.
 */
====>[PUBLIC]<android.content.Intent: Intent getIntent(String)>    ---->    #parseUri
<android.view.inputmethod.InputMethodManager: InputMethodManager getInstance()>
/**
 * Deprecated. Do not use.
 *
 * @return global {@link InputMethodManager} instance
 * @deprecated Use {@link Context#getSystemService(Class)} instead. This method cannot fully
 * support multi-display scenario.
 * @hide
 */
====>[HIDDEN]<android.view.inputmethod.InputMethodManager: InputMethodManager getInstance()>    ---->    Context#getSystemService(Class)
<android.provider.MediaStore.Images.Thumbnails: Cursor query(ContentResolver,Uri,String[])>
/**
 * @deprecated all queries should be performed through
 * {@link ContentResolver} directly, which offers modern
 * features like {@link CancellationSignal}.
 */
====>[PUBLIC]<android.provider.MediaStore.Images.Thumbnails: Cursor query(ContentResolver,Uri,String[])>    ---->    ContentResolver
<android.text.method.DateTimeKeyListener: void <init>()>
/**
 * @deprecated Use {@link #DateTimeKeyListener(Locale)} instead.
 */
====>[PUBLIC]<android.text.method.DateTimeKeyListener: void <init>()>    ---->    #DateTimeKeyListener(Locale)
<android.location.LocationManager: void clearTestProviderStatus(String)>
/**
 * This method has no effect as provider status has been deprecated and is no longer supported.
 *
 * @param provider the provider name
 * @throws SecurityException if {@link android.app.AppOpsManager#OPSTR_MOCK_LOCATION
 * mock location app op} is not set to {@link android.app.AppOpsManager#MODE_ALLOWED
 * allowed} for your app.
 * @throws IllegalArgumentException if no provider with the given name exists
 *
 * @deprecated This method has no effect.
 */
====>[PUBLIC]<android.location.LocationManager: void clearTestProviderStatus(String)>    ---->    
<com.android.internal.widget.PagerAdapter: Object instantiateItem(View,int)>
/**
 * Create the page for the given position.  The adapter is responsible
 * for adding the view to the container given here, although it only
 * must ensure this is done by the time it returns from
 * {@link #finishUpdate(android.view.ViewGroup)}.
 *
 * @param container The containing View in which the page will be shown.
 * @param position The page position to be instantiated.
 * @return Returns an Object representing the new page.  This does not
 * need to be a View, but can be some other container of the page.
 *
 * @deprecated Use {@link #instantiateItem(android.view.ViewGroup, int)}
 */
====>[PUBLIC]<com.android.internal.widget.PagerAdapter: Object instantiateItem(View,int)>    ---->    #instantiateItem(android.view.ViewGroup, int)
<android.database.AbstractWindowedCursor: boolean isLong(int)>
/**
 * @deprecated Use {@link #getType}
 */
====>[PUBLIC]<android.database.AbstractWindowedCursor: boolean isLong(int)>    ---->    #getType
<android.net.NetworkInfo: String getTypeName()>
/**
 * Return a human-readable name describe the type of the network,
 * for example "WIFI" or "MOBILE".
 * @return the name of the network type
 * @deprecated Callers should switch to checking {@link NetworkCapabilities#hasTransport}
 * instead with one of the NetworkCapabilities#TRANSPORT_* constants :
 * {@link #getType} and {@link #getTypeName} cannot account for networks using
 * multiple transports. Note that generally apps should not care about transport;
 * {@link NetworkCapabilities#NET_CAPABILITY_NOT_METERED} and
 * {@link NetworkCapabilities#getLinkDownstreamBandwidthKbps} are calls that
 * apps concerned with meteredness or bandwidth should be looking at, as they
 * offer this information with much better accuracy.
 */
====>[PUBLIC]<android.net.NetworkInfo: String getTypeName()>    ---->    NetworkCapabilities#hasTransport
<android.app.StatsManager: boolean setDataFetchOperation(long,PendingIntent)>
/**
 * @deprecated Use {@link #setFetchReportsOperation(PendingIntent, long)}
 */
====>[PUBLIC]<android.app.StatsManager: boolean setDataFetchOperation(long,PendingIntent)>    ---->    #setFetchReportsOperation(PendingIntent, long)
<android.webkit.CacheManager: boolean cacheDisabled()>
/**
 * Gets whether the HTTP cache is disabled.
 *
 * @return {@code true} if the HTTP cache is disabled
 * @deprecated This method no longer has any effect and always returns {@code false}.
 */
====>[PUBLIC]<android.webkit.CacheManager: boolean cacheDisabled()>    ---->    
<android.telephony.TelephonyManager: String getDeviceId()>
/**
 * Returns the unique device ID, for example, the IMEI for GSM and the MEID
 * or ESN for CDMA phones. Return null if device ID is not available.
 *
 * <p>Requires Permission: READ_PRIVILEGED_PHONE_STATE, for the calling app to be the device or
 * profile owner and have the READ_PHONE_STATE permission, or that the calling app has carrier
 * privileges (see {@link #hasCarrierPrivileges}). The profile owner is an app that owns a
 * managed profile on the device; for more details see <a
 * href="https://developer.android.com/work/managed-profiles">Work profiles</a>. Profile owner
 * access is deprecated and will be removed in a future release.
 *
 * <p>If the calling app does not meet one of these requirements then this method will behave
 * as follows:
 *
 * <ul>
 * <li>If the calling app's target SDK is API level 28 or lower and the app has the
 * READ_PHONE_STATE permission then null is returned.</li>
 * <li>If the calling app's target SDK is API level 28 or lower and the app does not have
 * the READ_PHONE_STATE permission, or if the calling app is targeting API level 29 or
 * higher, then a SecurityException is thrown.</li>
 * </ul>
 *
 * @deprecated Use {@link #getImei} which returns IMEI for GSM or {@link #getMeid} which returns
 * MEID for CDMA.
 */
====>[PUBLIC]<android.telephony.TelephonyManager: String getDeviceId()>    ---->    #getImei
<android.net.ConnectivityManager: LinkProperties getActiveLinkProperties()>
/**
 * Returns the IP information for the current default network.
 *
 * @return a {@link LinkProperties} object describing the IP info
 * for the current default network, or {@code null} if there
 * is no current default network.
 *
 * {@hide}
 * @deprecated please use {@link #getLinkProperties(Network)} on the return
 * value of {@link #getActiveNetwork()} instead. In particular,
 * this method will return non-null LinkProperties even if the
 * app is blocked by policy from using this network.
 */
====>[HIDDEN]<android.net.ConnectivityManager: LinkProperties getActiveLinkProperties()>    ---->    #getLinkProperties(Network)
<android.graphics.ImageDecoder: ImageDecoder setRequireUnpremultiplied(boolean)>
/**
 * @removed
 * @deprecated Renamed to {@link #setUnpremultipliedRequired}.
 */
====>[HIDDEN]<android.graphics.ImageDecoder: ImageDecoder setRequireUnpremultiplied(boolean)>    ---->    #setUnpremultipliedRequired
<android.webkit.WebView.PictureListener: void onNewPicture(WebView,Picture)>
/**
 * Used to provide notification that the WebView's picture has changed.
 * See {@link WebView#capturePicture} for details of the picture.
 *
 * @param view the WebView that owns the picture
 * @param picture the new picture. Applications targeting
 * {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2} or above
 * will always receive a {@code null} Picture.
 * @deprecated Deprecated due to internal changes.
 */
====>[PUBLIC]<android.webkit.WebView.PictureListener: void onNewPicture(WebView,Picture)>    ---->    
Inconsistency (Non-Documentation):<com.android.server.pm.BaseShortcutManagerTest: ShortcutInfo makeShortcutWithTitle(String,String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//services/tests/servicestests/src/com/android/server/pm/BaseShortcutManagerTest.java
<com.android.server.pm.BaseShortcutManagerTest: ShortcutInfo makeShortcutWithTitle(String,String)>

====>[PUBLIC]<com.android.server.pm.BaseShortcutManagerTest: ShortcutInfo makeShortcutWithTitle(String,String)>    ---->    
<android.content.pm.PackageManager: void replacePreferredActivityAsUser(IntentFilter,int,ComponentName[],ComponentName,int)>
/**
 * @hide
 *
 * @deprecated This function no longer does anything. It is the platform's
 * responsibility to assign preferred activities and this cannot be modified
 * directly. To determine the activities resolved by the platform, use
 * {@link #resolveActivity} or {@link #queryIntentActivities}. To configure
 * an app to be responsible for a particular role and to check current role
 * holders, see {@link android.app.role.RoleManager}.
 */
====>[HIDDEN]<android.content.pm.PackageManager: void replacePreferredActivityAsUser(IntentFilter,int,ComponentName[],ComponentName,int)>    ---->    #resolveActivity
<android.telephony.SmsMessage: int getStatusOnSim()>
/**
 * Returns the status of the message on the SIM (read, unread, sent, unsent).
 *
 * @return the status of the message on the SIM.  These are:
 * SmsManager.STATUS_ON_SIM_FREE
 * SmsManager.STATUS_ON_SIM_READ
 * SmsManager.STATUS_ON_SIM_UNREAD
 * SmsManager.STATUS_ON_SIM_SEND
 * SmsManager.STATUS_ON_SIM_UNSENT
 * @deprecated Use getStatusOnIcc instead.
 */
====>[PUBLIC]<android.telephony.SmsMessage: int getStatusOnSim()>    ---->    getStatusOnIcc
<android.os.FileUtils: long copyInternalUserspace(FileDescriptor,FileDescriptor,ProgressListener,CancellationSignal,long)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.os.FileUtils: long copyInternalUserspace(FileDescriptor,FileDescriptor,ProgressListener,CancellationSignal,long)>    ---->    
<android.graphics.Canvas: int save(int)>
/**
 * Based on saveFlags, can save the current matrix and clip onto a private
 * stack.
 * <p class="note"><strong>Note:</strong> if possible, use the
 * parameter-less save(). It is simpler and faster than individually
 * disabling the saving of matrix or clip with this method.
 * <p>
 * Subsequent calls to translate,scale,rotate,skew,concat or clipRect,
 * clipPath will all operate as usual, but when the balancing call to
 * restore() is made, those calls will be forgotten, and the settings that
 * existed before the save() will be reinstated.
 *
 * @removed
 * @deprecated Use {@link #save()} instead.
 * @param saveFlags flag bits that specify which parts of the Canvas state
 * to save/restore
 * @return The value to pass to restoreToCount() to balance this save()
 */
====>[HIDDEN]<android.graphics.Canvas: int save(int)>    ---->    #save()
<android.content.Context: void sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)>
/**
 * <p>Version of
 * {@link #sendStickyOrderedBroadcast(Intent, BroadcastReceiver, Handler, int, String, Bundle)}
 * that allows you to specify the
 * user the broadcast will be sent to.  This is not available to applications
 * that are not pre-installed on the system image.
 *
 * <p>See {@link BroadcastReceiver} for more information on Intent broadcasts.
 *
 * @deprecated Sticky broadcasts should not be used.  They provide no security (anyone
 * can access them), no protection (anyone can modify them), and many other problems.
 * The recommended pattern is to use a non-sticky broadcast to report that <em>something</em>
 * has changed, with another mechanism for apps to retrieve the current value whenever
 * desired.
 *
 * @param intent The Intent to broadcast; all receivers matching this
 * Intent will receive the broadcast.
 * @param user UserHandle to send the intent to.
 * @param resultReceiver Your own BroadcastReceiver to treat as the final
 * receiver of the broadcast.
 * @param scheduler A custom Handler with which to schedule the
 * resultReceiver callback; if null it will be
 * scheduled in the Context's main thread.
 * @param initialCode An initial value for the result code.  Often
 * Activity.RESULT_OK.
 * @param initialData An initial value for the result data.  Often
 * null.
 * @param initialExtras An initial value for the result extras.  Often
 * null.
 *
 * @see #sendStickyOrderedBroadcast(Intent, BroadcastReceiver, Handler, int, String, Bundle)
 */
====>[PUBLIC]<android.content.Context: void sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)>    ---->    #sendStickyOrderedBroadcast(Intent,
<android.telephony.data.ApnSetting: InetAddress getMmsProxyAddress()>
/**
 * Gets the MMS proxy address configured for the APN. The MMS proxy address might be an IP
 * address or hostname. This method returns {@code null} if system networking (typically DNS)
 * isn’t available to resolve a hostname value—values set as IP addresses don’t have this
 * restriction. This is a known problem and will be addressed in a future release.
 *
 * @return the MMS proxy address or {@code null} if DNS isn’t available to resolve a hostname
 * @deprecated use {@link #getMmsProxyAddressAsString()} instead.
 */
====>[PUBLIC]<android.telephony.data.ApnSetting: InetAddress getMmsProxyAddress()>    ---->    #getMmsProxyAddressAsString()
<android.telephony.SubscriptionInfo: int getMnc()>
/**
 * @return the MNC.
 * @deprecated Use {@link #getMncString()} instead.
 */
====>[PUBLIC]<android.telephony.SubscriptionInfo: int getMnc()>    ---->    #getMncString()
<android.webkit.WebView: void clearView()>
/**
 * Clears this WebView so that onDraw() will draw nothing but white background,
 * and onMeasure() will return 0 if MeasureSpec is not MeasureSpec.EXACTLY.
 * @deprecated Use WebView.loadUrl("about:blank") to reliably reset the view state
 * and release page resources (including any running JavaScript).
 */
====>[PUBLIC]<android.webkit.WebView: void clearView()>    ---->    
<android.content.pm.PackageInstaller.SessionInfo: Intent getDetailsIntent()>
/**
 * {@hide}
 */
====>[HIDDEN]<android.content.pm.PackageInstaller.SessionInfo: Intent getDetailsIntent()>    ---->    
<android.app.ActivityManagerNative: void noteAlarmStart(PendingIntent,int,String)>
/**
 * @deprecated use ActivityManager.noteAlarmStart instead.
 */
====>[PUBLIC]<android.app.ActivityManagerNative: void noteAlarmStart(PendingIntent,int,String)>    ---->    ActivityManager.noteAlarmStart
<android.graphics.ImageDecoder: ImageDecoder setAsAlphaMask(boolean)>
/**
 * @removed
 * @deprecated Renamed to {@link #setDecodeAsAlphaMaskEnabled}.
 */
====>[HIDDEN]<android.graphics.ImageDecoder: ImageDecoder setAsAlphaMask(boolean)>    ---->    #setDecodeAsAlphaMaskEnabled
<android.content.pm.PackageParser.Package: void setApplicationInfoResourcePath(String)>
/**
 * @deprecated Forward locked apps no longer supported. Resource path not needed.
 */
====>[PUBLIC]<android.content.pm.PackageParser.Package: void setApplicationInfoResourcePath(String)>    ---->    
<android.telecom.TelecomManager: ComponentName getDefaultPhoneApp()>
/**
 * @deprecated - Use {@link TelecomManager#getDefaultDialerPackage} to directly access
 * the default dialer's package name instead.
 * @hide
 */
====>[HIDDEN]<android.telecom.TelecomManager: ComponentName getDefaultPhoneApp()>    ---->    TelecomManager#getDefaultDialerPackage
<android.drm.DrmStore: void <init>()>
/**
 * @deprecated This class should have been an interface instead.
 * The default constuctor should have not been exposed.
 */
====>[PUBLIC]<android.drm.DrmStore: void <init>()>    ---->    
<android.renderscript.Mesh: int getPrimitiveCount()>
/**
 * @deprecated in API 16
 * @return number of primitives or index sets in the mesh
 */
====>[PUBLIC]<android.renderscript.Mesh: int getPrimitiveCount()>    ---->    
<android.os.Debug: void resetThreadGcInvocationCount()>
/**
 * Clears the thread-local count of non-concurrent GC invocations.
 * @see #getThreadGcInvocationCount()
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void resetThreadGcInvocationCount()>    ---->    
<android.net.SSLCertificateSocketFactory: SSLSocketFactory getHttpSocketFactory(int,SSLSessionCache)>
/**
 * Returns a socket factory (also named SSLSocketFactory, but in a different
 * namespace) for use with the Apache HTTP stack.
 *
 * @param handshakeTimeoutMillis to use for SSL connection handshake, or 0
 * for none.  The socket timeout is reset to 0 after the handshake.
 * @param cache The {@link SSLSessionCache} to use, or null for no cache.
 * @return a new SocketFactory with the specified parameters
 *
 * @deprecated Use {@link #getDefault()} along with a {@link javax.net.ssl.HttpsURLConnection}
 * instead. The Apache HTTP client is no longer maintained and may be removed in a future
 * release. Please visit <a href="http://android-developers.blogspot.com/2011/09/androids-http-clients.html">this webpage</a>
 * for further details.
 *
 * @removed
 */
====>[HIDDEN]<android.net.SSLCertificateSocketFactory: SSLSocketFactory getHttpSocketFactory(int,SSLSessionCache)>    ---->    #getDefault()
<android.view.ViewGroup: void setChildrenDrawnWithCacheEnabled(boolean)>
/**
 * Tells the ViewGroup to draw its children using their drawing cache. This property
 * is ignored when {@link #isAlwaysDrawnWithCacheEnabled()} is true. A child's drawing cache
 * will be used only if it has been enabled.
 *
 * Subclasses should call this method to start and stop using the drawing cache when
 * they perform performance sensitive operations, like scrolling or animating.
 *
 * @param enabled true if children should be drawn with their cache, false otherwise
 *
 * @see #setAlwaysDrawnWithCacheEnabled(boolean)
 * @see #isChildrenDrawnWithCacheEnabled()
 *
 * @deprecated As of {@link android.os.Build.VERSION_CODES#M}, this property is ignored.
 * Child views may no longer be forced to cache their rendering state by their parents.
 * Use {@link View#setLayerType(int, Paint)} on individual Views instead.
 */
====>[PUBLIC]<android.view.ViewGroup: void setChildrenDrawnWithCacheEnabled(boolean)>    ---->    View#setLayerType(int, Paint)
<android.speech.tts.TextToSpeech: int playSilence(long,int,HashMap<String, String>)>
/**
 * Plays silence for the specified amount of time using the specified
 * queue mode.
 * This method is asynchronous, i.e. the method just adds the request to the queue of TTS
 * requests and then returns. The synthesis might not have finished (or even started!) at the
 * time when this method returns. In order to reliably detect errors during synthesis,
 * we recommend setting an utterance progress listener (see
 * {@link #setOnUtteranceProgressListener}) and using the
 * {@link Engine#KEY_PARAM_UTTERANCE_ID} parameter.
 *
 * @param durationInMs The duration of the silence.
 * @param queueMode {@link #QUEUE_ADD} or {@link #QUEUE_FLUSH}.
 * @param params Parameters for the request. Can be null.
 * Supported parameter names:
 * {@link Engine#KEY_PARAM_UTTERANCE_ID}.
 * Engine specific parameters may be passed in but the parameter keys
 * must be prefixed by the name of the engine they are intended for. For example
 * the keys "com.svox.pico_foo" and "com.svox.pico:bar" will be passed to the
 * engine named "com.svox.pico" if it is being used.
 *
 * @return {@link #ERROR} or {@link #SUCCESS} of <b>queuing</b> the playSilence operation.
 * @deprecated As of API level 21, replaced by
 * {@link #playSilentUtterance(long, int, String)}.
 */
====>[PUBLIC]<android.speech.tts.TextToSpeech: int playSilence(long,int,HashMap<String, String>)>    ---->    #playSilentUtterance(long, int, String)
Inconsistency (Non-Documentation):<android.app.Notification.Builder: Builder setTicker(CharSequence,RemoteViews)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.Builder: Builder setTicker(CharSequence,RemoteViews)>
/**
 * Obsolete version of {@link #setTicker(CharSequence)}.
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder setTicker(CharSequence,RemoteViews)>    ---->    
<android.os.FileUtils: boolean copyToFile(InputStream,File)>
/**
 * @deprecated use {@link #copy(InputStream, OutputStream)} instead.
 * @hide
 */
====>[HIDDEN]<android.os.FileUtils: boolean copyToFile(InputStream,File)>    ---->    #copy(InputStream, OutputStream)
<android.view.View: void setBackgroundDrawable(Drawable)>
/**
 * @deprecated use {@link #setBackground(Drawable)} instead
 */
====>[PUBLIC]<android.view.View: void setBackgroundDrawable(Drawable)>    ---->    #setBackground(Drawable)
<android.webkit.WebHistoryItem: int getId()>
/**
 * Return an identifier for this history item. If an item is a copy of
 * another item, the identifiers will be the same even if they are not the
 * same object.
 * @return The id for this item.
 * @deprecated This method is now obsolete.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebHistoryItem: int getId()>    ---->    
<android.webkit.CookieSyncManager: void sync()>
/**
 * sync() forces sync manager to sync now
 * @deprecated Use {@link CookieManager#flush} instead.
 */
====>[PUBLIC]<android.webkit.CookieSyncManager: void sync()>    ---->    CookieManager#flush
<com.android.internal.widget.LockPatternChecker: AsyncTask<?, ?, ?> checkPassword(LockPatternUtils,String,int,OnCheckCallback)>
/**
 * Checks a password asynchronously.
 *
 * @param utils The LockPatternUtils instance to use.
 * @param password The password to check.
 * @param userId The user to check against the pattern.
 * @param callback The callback to be invoked with the check result.
 * @deprecated Pass passwords as byte[]
 */
====>[PUBLIC]<com.android.internal.widget.LockPatternChecker: AsyncTask<?, ?, ?> checkPassword(LockPatternUtils,String,int,OnCheckCallback)>    ---->    
<android.speech.tts.TextToSpeech: int speak(String,int,HashMap<String, String>)>
/**
 * Speaks the string using the specified queuing strategy and speech parameters.
 * This method is asynchronous, i.e. the method just adds the request to the queue of TTS
 * requests and then returns. The synthesis might not have finished (or even started!) at the
 * time when this method returns. In order to reliably detect errors during synthesis,
 * we recommend setting an utterance progress listener (see
 * {@link #setOnUtteranceProgressListener}) and using the
 * {@link Engine#KEY_PARAM_UTTERANCE_ID} parameter.
 *
 * @param text The string of text to be spoken. No longer than
 * {@link #getMaxSpeechInputLength()} characters.
 * @param queueMode The queuing strategy to use, {@link #QUEUE_ADD} or {@link #QUEUE_FLUSH}.
 * @param params Parameters for the request. Can be null.
 * Supported parameter names:
 * {@link Engine#KEY_PARAM_STREAM},
 * {@link Engine#KEY_PARAM_UTTERANCE_ID},
 * {@link Engine#KEY_PARAM_VOLUME},
 * {@link Engine#KEY_PARAM_PAN}.
 * Engine specific parameters may be passed in but the parameter keys
 * must be prefixed by the name of the engine they are intended for. For example
 * the keys "com.svox.pico_foo" and "com.svox.pico:bar" will be passed to the
 * engine named "com.svox.pico" if it is being used.
 *
 * @return {@link #ERROR} or {@link #SUCCESS} of <b>queuing</b> the speak operation.
 * @deprecated As of API level 21, replaced by
 * {@link #speak(CharSequence, int, Bundle, String)}.
 */
====>[PUBLIC]<android.speech.tts.TextToSpeech: int speak(String,int,HashMap<String, String>)>    ---->    #speak(CharSequence, int, Bundle, String)
<android.widget.CalendarView: void setUnfocusedMonthDateColor(int)>
/**
 * Sets the color for the dates of a not focused month.
 *
 * @param color A not focused month date color.
 *
 * @attr ref android.R.styleable#CalendarView_unfocusedMonthDateColor
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: void setUnfocusedMonthDateColor(int)>    ---->    
<android.webkit.WebViewClient: boolean shouldOverrideUrlLoading(WebView,String)>
/**
 * Give the host application a chance to take control when a URL is about to be loaded in the
 * current WebView. If a WebViewClient is not provided, by default WebView will ask Activity
 * Manager to choose the proper handler for the URL. If a WebViewClient is provided, returning
 * {@code true} causes the current WebView to abort loading the URL, while returning
 * {@code false} causes the WebView to continue loading the URL as usual.
 *
 * <p class="note"><b>Note:</b> Do not call {@link WebView#loadUrl(String)} with the same
 * URL and then return {@code true}. This unnecessarily cancels the current load and starts a
 * new load with the same URL. The correct way to continue loading a given URL is to simply
 * return {@code false}, without calling {@link WebView#loadUrl(String)}.
 *
 * <p class="note"><b>Note:</b> This method is not called for POST requests.
 *
 * <p class="note"><b>Note:</b> This method may be called for subframes and with non-HTTP(S)
 * schemes; calling {@link WebView#loadUrl(String)} with such a URL will fail.
 *
 * @param view The WebView that is initiating the callback.
 * @param url The URL to be loaded.
 * @return {@code true} to cancel the current load, otherwise return {@code false}.
 * @deprecated Use {@link #shouldOverrideUrlLoading(WebView, WebResourceRequest)
 * shouldOverrideUrlLoading(WebView, WebResourceRequest)} instead.
 */
====>[PUBLIC]<android.webkit.WebViewClient: boolean shouldOverrideUrlLoading(WebView,String)>    ---->    #shouldOverrideUrlLoading(WebView, WebResourceRequest)  shouldOverrideUrlLoading(WebView, WebResourceRequest)
<android.renderscript.ProgramRaster.Builder: ProgramRaster create()>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.ProgramRaster.Builder: ProgramRaster create()>    ---->    
<android.webkit.WebView: void emulateShiftHeld()>
/**
 * Puts this WebView into text selection mode. Do not rely on this
 * functionality; it will be deprecated in the future.
 *
 * @deprecated This method is now obsolete.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebView: void emulateShiftHeld()>    ---->    
<android.webkit.WebView: PrintDocumentAdapter createPrintDocumentAdapter()>
/**
 * @deprecated Use {@link #createPrintDocumentAdapter(String)} which requires user
 * to provide a print document name.
 */
====>[PUBLIC]<android.webkit.WebView: PrintDocumentAdapter createPrintDocumentAdapter()>    ---->    #createPrintDocumentAdapter(String)
<android.view.textclassifier.TextClassification: CharSequence getLabel()>
/**
 * Returns a label that may be rendered on a widget used to act on the classified text.
 *
 * <p><strong>NOTE: </strong>This field is not parcelable and only represents the label of the
 * first {@link RemoteAction} (if one exists) when this object is read from a parcel.
 *
 * @deprecated Use {@link #getActions()} instead.
 */
====>[PUBLIC]<android.view.textclassifier.TextClassification: CharSequence getLabel()>    ---->    #getActions()
<android.os.Vibrator: void vibrate(long[],int)>
/**
 * Vibrate with a given pattern.
 *
 * <p>
 * Pass in an array of ints that are the durations for which to turn on or off
 * the vibrator in milliseconds.  The first value indicates the number of milliseconds
 * to wait before turning the vibrator on.  The next value indicates the number of milliseconds
 * for which to keep the vibrator on before turning it off.  Subsequent values alternate
 * between durations in milliseconds to turn the vibrator off or to turn the vibrator on.
 * </p><p>
 * To cause the pattern to repeat, pass the index into the pattern array at which
 * to start the repeat, or -1 to disable repeating.
 * </p>
 *
 * @param pattern an array of longs of times for which to turn the vibrator on or off.
 * @param repeat the index into pattern at which to repeat, or -1 if
 * you don't want to repeat.
 *
 * @deprecated Use {@link #vibrate(VibrationEffect)} instead.
 */
====>[PUBLIC]<android.os.Vibrator: void vibrate(long[],int)>    ---->    #vibrate(VibrationEffect)
<android.app.Notification.MessagingStyle: void <init>(CharSequence)>
/**
 * @param userDisplayName Required - the name to be displayed for any replies sent by the
 * user before the posting app reposts the notification with those messages after they've
 * been actually sent and in previous messages sent by the user added in
 * {@link #addMessage(Notification.MessagingStyle.Message)}
 *
 * @deprecated use {@code MessagingStyle(Person)}
 */
====>[PUBLIC]<android.app.Notification.MessagingStyle: void <init>(CharSequence)>    ---->    
<android.hardware.HardwareBuffer: void destroy()>
/**
 * @removed replaced by {@link #close()}
 */
====>[HIDDEN]<android.hardware.HardwareBuffer: void destroy()>    ---->    
<android.location.GnssMeasurement: boolean hasCarrierCycles()>
/**
 * Returns {@code true} if {@link #getCarrierCycles()} is available, {@code false} otherwise.
 *
 * @deprecated use {@link #getAccumulatedDeltaRangeState()} instead.
 */
====>[PUBLIC]<android.location.GnssMeasurement: boolean hasCarrierCycles()>    ---->    #getAccumulatedDeltaRangeState()
<android.os.Debug: void startAllocCounting()>
/**
 * Start counting the number and aggregate size of memory allocations.
 *
 * <p>The {@link #startAllocCounting() start} method resets the counts and enables counting.
 * The {@link #stopAllocCounting() stop} method disables the counting so that the analysis
 * code doesn't cause additional allocations.  The various <code>get</code> methods return
 * the specified value. And the various <code>reset</code> methods reset the specified
 * count.</p>
 *
 * <p>Counts are kept for the system as a whole (global) and for each thread.
 * The per-thread counts for threads other than the current thread
 * are not cleared by the "reset" or "start" calls.</p>
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void startAllocCounting()>    ---->    
<android.os.Debug: void resetGlobalExternalAllocSize()>
/**
 * This method exists for compatibility and has no effect.
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: void resetGlobalExternalAllocSize()>    ---->    
<android.location.LocationManager: boolean addGpsMeasurementListener(Listener)>
/**
 * No-op method to keep backward-compatibility.
 * Don't use it. Use {@link #registerGnssMeasurementsCallback} instead.
 * @hide
 * @deprecated Not supported anymore.
 * @removed
 */
====>[HIDDEN]<android.location.LocationManager: boolean addGpsMeasurementListener(Listener)>    ---->    
<android.app.slice.SliceItem: long getTimestamp()>
/**
 * @deprecated replaced by {@link #getLong()}
 * @removed
 */
====>[HIDDEN]<android.app.slice.SliceItem: long getTimestamp()>    ---->    #getLong()
<android.telephony.SubscriptionInfo: boolean canManageSubscription(Context)>
/**
 * Checks whether the app with the given context is authorized to manage this subscription
 * according to its metadata. Only supported for embedded subscriptions (if {@link #isEmbedded}
 * returns true).
 *
 * @param context Context of the application to check.
 * @return whether the app is authorized to manage this subscription per its metadata.
 * @throws UnsupportedOperationException if this subscription is not embedded.
 * @hide
 * @deprecated - Do not use.
 */
====>[HIDDEN]<android.telephony.SubscriptionInfo: boolean canManageSubscription(Context)>    ---->    
Inconsistency (Non-Documentation):<com.android.internal.content.PackageHelper: long calculateInstalledSize(PackageLite,boolean,String)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/com/android/internal/content/PackageHelper.java
<com.android.internal.content.PackageHelper: long calculateInstalledSize(PackageLite,boolean,String)>

====>[PUBLIC]<com.android.internal.content.PackageHelper: long calculateInstalledSize(PackageLite,boolean,String)>    ---->    
<com.android.systemui.statusbar.SysuiStatusBarStateController: void addCallback(StateListener,int)>
/**
 * Add a listener and a rank based on the priority of this message
 * @param listener the listener
 * @param rank the order in which you'd like to be called. Ranked listeners will be
 * notified before unranked, and we will sort ranked listeners from low to high
 *
 * @deprecated This method exists only to solve latent inter-dependencies from refactoring
 * StatusBarState out of StatusBar.java. Any new listeners should be built not to need ranking
 * (i.e., they are non-dependent on the order of operations of StatusBarState listeners).
 */
====>[PUBLIC]<com.android.systemui.statusbar.SysuiStatusBarStateController: void addCallback(StateListener,int)>    ---->    
<android.net.wifi.WifiManager: boolean startScan()>
/**
 * Request a scan for access points. Returns immediately. The availability
 * of the results is made known later by means of an asynchronous event sent
 * on completion of the scan.
 * <p>
 * To initiate a Wi-Fi scan, declare the
 * {@link android.Manifest.permission#CHANGE_WIFI_STATE}
 * permission in the manifest, and perform these steps:
 * </p>
 * <ol style="1">
 * <li>Invoke the following method:
 * {@code ((WifiManager) getSystemService(WIFI_SERVICE)).startScan()}</li>
 * <li>
 * Register a BroadcastReceiver to listen to
 * {@code SCAN_RESULTS_AVAILABLE_ACTION}.</li>
 * <li>When a broadcast is received, call:
 * {@code ((WifiManager) getSystemService(WIFI_SERVICE)).getScanResults()}</li>
 * </ol>
 * @return {@code true} if the operation succeeded, i.e., the scan was initiated.
 * @deprecated The ability for apps to trigger scan requests will be removed in a future
 * release.
 */
====>[PUBLIC]<android.net.wifi.WifiManager: boolean startScan()>    ---->    
<android.telephony.TelephonyManager: int setAllowedCarriers(int,List<CarrierIdentifier>)>
/**
 * Set the allowed carrier list for slotIndex
 * Require system privileges. In the future we may add this to carrier APIs.
 *
 * <p>Requires Permission:
 * {@link android.Manifest.permission#MODIFY_PHONE_STATE}
 *
 * <p>This method works only on devices with {@link
 * android.content.pm.PackageManager#FEATURE_TELEPHONY_CARRIERLOCK} enabled.
 *
 * @deprecated use setCarrierRestrictionRules instead
 *
 * @return The number of carriers set successfully. Should be length of
 * carrierList on success; -1 if carrierList null or on error.
 * @hide
 */
====>[HIDDEN]<android.telephony.TelephonyManager: int setAllowedCarriers(int,List<CarrierIdentifier>)>    ---->    setCarrierRestrictionRules
<android.view.WindowInsets: WindowInsets inset(Rect)>
/**
 * Returns a copy of this instance inset in the given directions.
 *
 * @see #inset(int, int, int, int)
 * @deprecated use {@link #inset(Insets)}
 * @hide
 */
====>[HIDDEN]<android.view.WindowInsets: WindowInsets inset(Rect)>    ---->    #inset(Insets)
<android.net.http.SslError: void <init>(int,X509Certificate)>
/**
 * Creates a new SslError object using the supplied error and certificate.
 * The URL will be set to the empty string.
 * @param error The SSL error
 * @param certificate The associated SSL certificate
 * @deprecated Use {@link #SslError(int, X509Certificate, String)}
 */
====>[PUBLIC]<android.net.http.SslError: void <init>(int,X509Certificate)>    ---->    #SslError(int, X509Certificate, String)
<android.app.Activity: void startActivityFromFragment(Fragment,Intent,int,Bundle)>
/**
 * This is called when a Fragment in this activity calls its
 * {@link Fragment#startActivity} or {@link Fragment#startActivityForResult}
 * method.
 *
 * <p>This method throws {@link android.content.ActivityNotFoundException}
 * if there was no Activity found to run the given Intent.
 *
 * @param fragment The fragment making the call.
 * @param intent The intent to start.
 * @param requestCode Reply request code.  < 0 if reply is not requested.
 * @param options Additional options for how the Activity should be started.
 * See {@link android.content.Context#startActivity(Intent, Bundle)}
 * Context.startActivity(Intent, Bundle)} for more details.
 *
 * @throws android.content.ActivityNotFoundException
 *
 * @see Fragment#startActivity
 * @see Fragment#startActivityForResult
 *
 * @deprecated Use {@link android.support.v4.app.FragmentActivity#startActivityFromFragment(
 * android.support.v4.app.Fragment,Intent,int,Bundle)}
 */
====>[PUBLIC]<android.app.Activity: void startActivityFromFragment(Fragment,Intent,int,Bundle)>    ---->    android.support.v4.app.FragmentActivity#startActivityFromFragment(  android.support.v4.app.Fragment,Intent,int,Bundle)
<android.renderscript.ProgramVertex.Builder: ProgramVertex create()>
/**
 * @deprecated in API 16
 * Creates ProgramVertex from the current state of the builder
 *
 * @return  ProgramVertex
 */
====>[PUBLIC]<android.renderscript.ProgramVertex.Builder: ProgramVertex create()>    ---->    
<android.telecom.InCallService: void onPhoneCreated(Phone)>
/**
 * Invoked when the {@code Phone} has been created. This is a signal to the in-call experience
 * to start displaying in-call information to the user. Each instance of {@code InCallService}
 * will have only one {@code Phone}, and this method will be called exactly once in the lifetime
 * of the {@code InCallService}.
 *
 * @param phone The {@code Phone} object associated with this {@code InCallService}.
 * @hide
 * @deprecated Use direct methods on InCallService instead of {@link Phone}.
 */
====>[HIDDEN]<android.telecom.InCallService: void onPhoneCreated(Phone)>    ---->    direct methods on InCallService
<android.app.AlertDialog: void setButton3(CharSequence,OnClickListener)>
/**
 * Set a listener to be invoked when button 3 of the dialog is pressed.
 * @param text The text to display in button 3.
 * @param listener The {@link DialogInterface.OnClickListener} to use.
 * @deprecated Use
 * {@link #setButton(int, CharSequence, android.content.DialogInterface.OnClickListener)}
 * with {@link DialogInterface#BUTTON_NEUTRAL}
 */
====>[PUBLIC]<android.app.AlertDialog: void setButton3(CharSequence,OnClickListener)>    ---->    #setButton(int, CharSequence, android.content.DialogInterface.OnClickListener)
<android.renderscript.RSTextureView: void <init>(Context)>
/**
 * @deprecated in API 16
 * Standard View constructor. In order to render something, you
 * must call {@link android.opengl.GLSurfaceView#setRenderer} to
 * register a renderer.
 */
====>[PUBLIC]<android.renderscript.RSTextureView: void <init>(Context)>    ---->    android.opengl.GLSurfaceView#setRenderer
<android.app.ActivityManager.TaskDescription: void <init>(String,Bitmap,int)>
/**
 * Creates the TaskDescription to the specified values.
 *
 * @param label A label and description of the current state of this task.
 * @param icon An icon that represents the current state of this task.
 * @param colorPrimary A color to override the theme's primary color.  This color must be
 * opaque.
 * @deprecated use TaskDescription constructor with icon resource instead
 */
====>[PUBLIC]<android.app.ActivityManager.TaskDescription: void <init>(String,Bitmap,int)>    ---->    TaskDescription constructor with icon resource
<android.telephony.ims.ImsSsInfo: void <init>(int,String)>
/**
 * @param status The status of the service registration of activation/deactiviation.
 * @param icbNum The Incoming barring number.
 * @deprecated use {@link ImsSsInfo.Builder} instead.
 */
====>[PUBLIC]<android.telephony.ims.ImsSsInfo: void <init>(int,String)>    ---->    ImsSsInfo.Builder
<android.util.proto.ProtoOutputStream: void writeRepeatedBool(long,boolean)>
/**
 * Write a single repeated proto "bool" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedBool(long,boolean)>    ---->    #write
<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int,int)>
/**
 * Helper for saveLayerAlpha() that takes 4 values instead of a RectF.
 *
 * As of API Level API level {@value Build.VERSION_CODES#P} the only valid
 * {@code saveFlags} is {@link #ALL_SAVE_FLAG}.  All other flags are ignored.
 *
 * @deprecated Use {@link #saveLayerAlpha(float, float, float, float, int)} instead.
 */
====>[PUBLIC]<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int,int)>    ---->    #saveLayerAlpha(float, float, float, float, int)
<android.util.proto.ProtoOutputStream: void writePackedEnum(long,int[])>
/**
 * Write a list of packed proto enum type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedEnum(long,int[])>    ---->    #write
<com.android.server.am.ActivityManagerService: void requestWifiBugReport(String,String)>
/**
 * @deprecated This method is only used by a few internal components and it will soon be
 * replaced by a proper bug report API (which will be restricted to a few, pre-defined apps).
 * No new code should be calling it.
 */
====>[PUBLIC]<com.android.server.am.ActivityManagerService: void requestWifiBugReport(String,String)>    ---->    
<android.provider.Contacts.ContactMethods: String lookupProviderNameFromId(int)>
/**
 * This looks up the provider name defined in
 * from the predefined IM protocol id.
 * This is used for interacting with the IM application.
 *
 * @param protocol the protocol ID
 * @return the provider name the IM app uses for the given protocol, or null if no
 * provider is defined for the given protocol
 * @deprecated see {@link android.provider.ContactsContract}
 * @hide
 */
====>[HIDDEN]<android.provider.Contacts.ContactMethods: String lookupProviderNameFromId(int)>    ---->    android.provider.ContactsContract
<android.accounts.AccountManager: AccountManagerFuture<Bundle> getAuthToken(Account,String,boolean,AccountManagerCallback<Bundle>,Handler)>
/**
 * Gets an auth token of the specified type for a particular account,
 * optionally raising a notification if the user must enter credentials.
 * This method is intended for background tasks and services where the
 * user should not be immediately interrupted with a password prompt.
 *
 * <p>If a previously generated auth token is cached for this account and
 * type, then it is returned.  Otherwise, if a saved password is
 * available, it is sent to the server to generate a new auth token.
 * Otherwise, an {@link Intent} is returned which, when started, will
 * prompt the user for a password.  If the notifyAuthFailure parameter is
 * set, a status bar notification is also created with the same Intent,
 * alerting the user that they need to enter a password at some point.
 *
 * <p>In that case, you may need to wait until the user responds, which
 * could take hours or days or forever.  When the user does respond and
 * supply a new password, the account manager will broadcast the
 * {@link #LOGIN_ACCOUNTS_CHANGED_ACTION} Intent and
 * notify {@link OnAccountsUpdateListener} which applications can
 * use to try again.
 *
 * <p>If notifyAuthFailure is not set, it is the application's
 * responsibility to launch the returned Intent at some point.
 * Either way, the result from this call will not wait for user action.
 *
 * <p>Some authenticators have auth token <em>types</em>, whose value
 * is authenticator-dependent.  Some services use different token types to
 * access different functionality -- for example, Google uses different auth
 * tokens to access Gmail and Google Calendar for the same account.
 *
 * <p>This method may be called from any thread, but the returned
 * {@link AccountManagerFuture} must not be used on the main thread.
 *
 * @param account The account to fetch an auth token for
 * @param authTokenType The auth token type, an authenticator-dependent
 * string token, must not be null
 * @param notifyAuthFailure True to add a notification to prompt the
 * user for a password if necessary, false to leave that to the caller
 * @param callback Callback to invoke when the request completes,
 * null for no callback
 * @param handler {@link Handler} identifying the callback thread,
 * null for the main thread
 * @return An {@link AccountManagerFuture} which resolves to a Bundle with
 * at least the following fields on success:
 * <ul>
 * <li> {@link #KEY_ACCOUNT_NAME} - the name of the account you supplied
 * <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account
 * <li> {@link #KEY_AUTHTOKEN} - the auth token you wanted
 * </ul>
 *
 * (Other authenticator-specific values may be returned.)  If the user
 * must enter credentials, the returned Bundle contains only
 * {@link #KEY_INTENT} with the {@link Intent} needed to launch a prompt.
 *
 * If an error occurred, {@link AccountManagerFuture#getResult()} throws:
 * <ul>
 * <li> {@link AuthenticatorException} if the authenticator failed to respond
 * <li> {@link OperationCanceledException} if the operation is canceled for
 * any reason, incluidng the user canceling a credential request
 * <li> {@link IOException} if the authenticator experienced an I/O problem
 * creating a new auth token, usually because of network trouble
 * </ul>
 * If the account is no longer present on the device, the return value is
 * authenticator-dependent.  The caller should verify the validity of the
 * account before requesting an auth token.
 * @deprecated use {@link #getAuthToken(Account, String, android.os.Bundle,
 * boolean, AccountManagerCallback, android.os.Handler)} instead
 */
====>[PUBLIC]<android.accounts.AccountManager: AccountManagerFuture<Bundle> getAuthToken(Account,String,boolean,AccountManagerCallback<Bundle>,Handler)>    ---->    #getAuthToken(Account, String, android.os.Bundle,  boolean, AccountManagerCallback, android.os.Handler)
<android.app.slice.Slice.Builder: Builder setSpec(SliceSpec)>
/**
 * @deprecated TO BE REMOVED
 * @removed
 */
====>[HIDDEN]<android.app.slice.Slice.Builder: Builder setSpec(SliceSpec)>    ---->    
<android.provider.MediaStore.Images.Thumbnails: void cancelThumbnailRequest(ContentResolver,long)>
/**
 * Cancel any outstanding {@link #getThumbnail} requests, causing
 * them to return by throwing a {@link OperationCanceledException}.
 * <p>
 * This method has no effect on
 * {@link ContentResolver#loadThumbnail} calls, since they provide
 * their own {@link CancellationSignal}.
 *
 * @deprecated Callers should migrate to using
 * {@link ContentResolver#loadThumbnail}, since it
 * offers richer control over requested thumbnail sizes
 * and cancellation behavior.
 */
====>[PUBLIC]<android.provider.MediaStore.Images.Thumbnails: void cancelThumbnailRequest(ContentResolver,long)>    ---->    
<android.os.TestLooperManager: MessageQueue getQueue()>
/**
 * @removed
 */
====>[HIDDEN]<android.os.TestLooperManager: MessageQueue getQueue()>    ---->    
<android.renderscript.RenderScriptGL: void bindProgramStore(ProgramStore)>
/**
 * @deprecated in API 16
 * Set the default ProgramStore object seen as the parent state by the root
 * rendering script.
 *
 * @param p
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL: void bindProgramStore(ProgramStore)>    ---->    
<android.webkit.WebViewDelegate: void callDrawGlFunction(Canvas,long,Runnable)>
/**
 * Calls the function specified with the nativeDrawGLFunctor functor pointer. This
 * functionality is used by the WebView for calling into their renderer from the
 * framework display lists.
 *
 * @param canvas a hardware accelerated canvas (see {@link Canvas#isHardwareAccelerated()})
 * @param nativeDrawGLFunctor the pointer to the native functor that implements
 * system/core/include/utils/Functor.h
 * @param releasedRunnable Called when this nativeDrawGLFunctor is no longer referenced by this
 * canvas, so is safe to be destroyed.
 * @throws IllegalArgumentException if the canvas is not hardware accelerated
 * @deprecated Use {@link #drawWebViewFunctor(Canvas, int)}
 */
====>[PUBLIC]<android.webkit.WebViewDelegate: void callDrawGlFunction(Canvas,long,Runnable)>    ---->    #drawWebViewFunctor(Canvas, int)
<android.net.wifi.WifiManager: boolean disconnect()>
/**
 * Disassociate from the currently active access point. This may result
 * in the asynchronous delivery of state change events.
 * @return {@code true} if the operation succeeded
 *
 * @deprecated
 * a) See {@link WifiNetworkSpecifier.Builder#build()} for new
 * mechanism to trigger connection to a Wi-Fi network.
 * b) See {@link #addNetworkSuggestions(List)},
 * {@link #removeNetworkSuggestions(List)} for new API to add Wi-Fi networks for consideration
 * when auto-connecting to wifi.
 * <b>Compatibility Note:</b> For applications targeting
 * {@link android.os.Build.VERSION_CODES#Q} or above, this API will always return false.
 */
====>[PUBLIC]<android.net.wifi.WifiManager: boolean disconnect()>    ---->    WifiNetworkSpecifier.Builder#build()
<android.webkit.WebView: PluginList getPluginList()>
/**
 * Gets the list of currently loaded plugins.
 *
 * @return the list of currently loaded plugins
 * @deprecated This was used for Gears, which has been deprecated.
 * @hide
 */
====>[HIDDEN]<android.webkit.WebView: PluginList getPluginList()>    ---->    
<android.text.TextUtils: boolean isGraphic(char)>
/**
 * Returns whether this character is a printable character.
 *
 * This does not support non-BMP characters and should not be used.
 *
 * @deprecated Use {@link #isGraphic(CharSequence)} instead.
 */
====>[PUBLIC]<android.text.TextUtils: boolean isGraphic(char)>    ---->    #isGraphic(CharSequence)
<android.telephony.PhoneNumberUtils: void formatNanpNumber(Editable)>
/**
 * Formats a phone number in-place using the NANP formatting rules. Numbers will be formatted
 * as:
 *
 * <p><code>
 * xxxxx
 * xxx-xxxx
 * xxx-xxx-xxxx
 * 1-xxx-xxx-xxxx
 * +1-xxx-xxx-xxxx
 * </code></p>
 *
 * @param text the number to be formatted, will be modified with the formatting
 *
 * @deprecated Use link #formatNumber(String phoneNumber, String defaultCountryIso) instead
 */
====>[PUBLIC]<android.telephony.PhoneNumberUtils: void formatNanpNumber(Editable)>    ---->    link #formatNumber(String phoneNumber, String defaultCountryIso)
<android.webkit.WebView: void setHorizontalScrollbarOverlay(boolean)>
/**
 * Specifies whether the horizontal scrollbar has overlay style.
 *
 * @deprecated This method has no effect.
 * @param overlay {@code true} if horizontal scrollbar should have overlay style
 */
====>[PUBLIC]<android.webkit.WebView: void setHorizontalScrollbarOverlay(boolean)>    ---->    
Inconsistency (Non-Documentation):<android.content.ContextWrapper: void setWallpaper(Bitmap)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/content/ContextWrapper.java
<android.content.ContextWrapper: void setWallpaper(Bitmap)>

====>[PUBLIC]<android.content.ContextWrapper: void setWallpaper(Bitmap)>    ---->    
<com.android.ims.ImsConfig: String getProvisionedStringValue(int)>
/**
 * @deprecated see {@link #getConfigString(int)} instead
 */
====>[PUBLIC]<com.android.ims.ImsConfig: String getProvisionedStringValue(int)>    ---->    #getConfigString(int)
<android.app.backup.BackupManager: int requestRestore(RestoreObserver,BackupManagerMonitor)>
/**
 * @deprecated Since Android P app can no longer request restoring of its backup.
 *
 * <p>Restore the calling application from backup.  The data will be restored from the
 * current backup dataset if the application has stored data there, or from
 * the dataset used during the last full device setup operation if the current
 * backup dataset has no matching data.  If no backup data exists for this application
 * in either source, a nonzero value will be returned.
 *
 * <p>If this method returns zero (meaning success), the OS will attempt to retrieve
 * a backed-up dataset from the remote transport, instantiate the application's
 * backup agent, and pass the dataset to the agent's
 * {@link android.app.backup.BackupAgent#onRestore(BackupDataInput, int, android.os.ParcelFileDescriptor) onRestore()}
 * method.
 *
 * @param observer The {@link RestoreObserver} to receive callbacks during the restore
 * operation. This must not be null.
 *
 * @param monitor the {@link BackupManagerMonitor} to receive callbacks during the restore
 * operation.
 *
 * @return Zero on success; nonzero on error.
 *
 * @hide
 */
====>[HIDDEN]<android.app.backup.BackupManager: int requestRestore(RestoreObserver,BackupManagerMonitor)>    ---->    
<android.renderscript.FileA3D.IndexEntry: String getName()>
/**
 * @deprecated in API 16
 * Returns the name of a renderscript object the index entry
 * describes
 *
 * @return name of a renderscript object the index entry
 * describes
 */
====>[PUBLIC]<android.renderscript.FileA3D.IndexEntry: String getName()>    ---->    
Inconsistency (Non-Documentation):<android.content.ContextWrapper: void sendStickyBroadcast(Intent)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/content/ContextWrapper.java
<android.content.ContextWrapper: void sendStickyBroadcast(Intent)>

====>[PUBLIC]<android.content.ContextWrapper: void sendStickyBroadcast(Intent)>    ---->    
<android.util.proto.ProtoOutputStream: void writeBytes(long,byte[])>
/**
 * Write a single proto "bytes" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeBytes(long,byte[])>    ---->    #write
<android.graphics.RenderNode: void end(RecordingCanvas)>
/**
 * @hide
 * @deprecated use {@link #endRecording()} instead
 */
====>[HIDDEN]<android.graphics.RenderNode: void end(RecordingCanvas)>    ---->    #endRecording()
<android.content.pm.PackageManager: int getPreferredActivities(List<IntentFilter>,List<ComponentName>,String)>
/**
 * Retrieve all preferred activities, previously added with
 * {@link #addPreferredActivity}, that are
 * currently registered with the system.
 *
 * @param outFilters A required list in which to place the filters of all of the
 * preferred activities.
 * @param outActivities A required list in which to place the component names of
 * all of the preferred activities.
 * @param packageName An optional package in which you would like to limit
 * the list.  If null, all activities will be returned; if non-null, only
 * those activities in the given package are returned.
 *
 * @return Returns the total number of registered preferred activities
 * (the number of distinct IntentFilter records, not the number of unique
 * activity components) that were found.
 *
 * @deprecated This function no longer does anything. It is the platform's
 * responsibility to assign preferred activities and this cannot be modified
 * directly. To determine the activities resolved by the platform, use
 * {@link #resolveActivity} or {@link #queryIntentActivities}. To configure
 * an app to be responsible for a particular role and to check current role
 * holders, see {@link android.app.role.RoleManager}.
 */
====>[PUBLIC]<android.content.pm.PackageManager: int getPreferredActivities(List<IntentFilter>,List<ComponentName>,String)>    ---->    #resolveActivity
<android.webkit.WebSettings: ZoomDensity getDefaultZoom()>
/**
 * Gets the default zoom density of the page. This should be called from
 * the UI thread.
 *
 * This setting is not recommended for use in new applications.
 *
 * @return the zoom density
 * @see #setDefaultZoom
 * @deprecated Will only return the default value.
 */
====>[PUBLIC]<android.webkit.WebSettings: ZoomDensity getDefaultZoom()>    ---->    
<android.app.job.JobInfo: long getEstimatedNetworkBytes()>
/**
 * @deprecated replaced by {@link #getEstimatedNetworkDownloadBytes()} and
 * {@link #getEstimatedNetworkUploadBytes()}.
 * @removed
 */
====>[HIDDEN]<android.app.job.JobInfo: long getEstimatedNetworkBytes()>    ---->    #getEstimatedNetworkDownloadBytes()
<android.os.Debug: int setAllocationLimit(int)>
/**
 * Establish an object allocation limit in the current thread.
 * This feature was never enabled in release builds.  The
 * allocation limits feature was removed in Honeycomb.  This
 * method exists for compatibility and always returns -1 and has
 * no effect.
 *
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: int setAllocationLimit(int)>    ---->    
<android.view.inputmethod.InputMethodManager: void notifySuggestionPicked(SuggestionSpan,String,int)>
/**
 * This hidden API is deprecated in {@link android.os.Build.VERSION_CODES#Q}. Does nothing.
 *
 * @deprecated Do not use.
 * @hide
 */
====>[HIDDEN]<android.view.inputmethod.InputMethodManager: void notifySuggestionPicked(SuggestionSpan,String,int)>    ---->    
<android.webkit.WebChromeClient: void openFileChooser(ValueCallback<Uri>,String,String)>
/**
 * Tell the client to open a file chooser.
 * @param uploadFile A ValueCallback to set the URI of the file to upload.
 * onReceiveValue must be called to wake up the thread.a
 * @param acceptType The value of the 'accept' attribute of the input tag
 * associated with this file picker.
 * @param capture The value of the 'capture' attribute of the input tag
 * associated with this file picker.
 *
 * @deprecated Use {@link #onShowFileChooser} instead.
 * @hide This method was not published in any SDK version.
 */
====>[HIDDEN]<android.webkit.WebChromeClient: void openFileChooser(ValueCallback<Uri>,String,String)>    ---->    #onShowFileChooser
<android.content.ContentProviderClient: void closeQuietly(ContentProviderClient)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.content.ContentProviderClient: void closeQuietly(ContentProviderClient)>    ---->    
<android.location.LocationManager: boolean addGpsNavigationMessageListener(Listener)>
/**
 * No-op method to keep backward-compatibility.
 * Don't use it. Use {@link #registerGnssNavigationMessageCallback} instead.
 * @hide
 * @deprecated Not supported anymore.
 * @removed
 */
====>[HIDDEN]<android.location.LocationManager: boolean addGpsNavigationMessageListener(Listener)>    ---->    
<android.graphics.Typeface: Typeface createFromFamiliesWithDefault(FontFamily[],String,int,int)>
/**
 * Create a new typeface from an array of font families, including
 * also the font families in the fallback list.
 * @param fallbackName the family name. If given families don't support characters, the
 * characters will be rendered with this family.
 * @param weight the weight for this family. In that case, the table information in the first
 * family's font is used. If the first family has multiple fonts, the closest to
 * the regular weight and upright font is used.
 * @param italic the italic information for this family. In that case, the table information in
 * the first family's font is used. If the first family has multiple fonts, the
 * closest to the regular weight and upright font is used.
 * @param families array of font families
 *
 * @deprecated Use {@link android.graphics.fonts.FontFamily} instead.
 */
====>[PUBLIC]<android.graphics.Typeface: Typeface createFromFamiliesWithDefault(FontFamily[],String,int,int)>    ---->    android.graphics.fonts.FontFamily
<android.telephony.PhoneNumberUtils: CharSequence ttsSpanAsPhoneNumber(CharSequence)>
/**
 * Wrap the supplied {@code CharSequence} with a {@code TtsSpan}, annotating it as
 * containing a phone number in its entirety.
 *
 * @param phoneNumber A {@code CharSequence} the entirety of which represents a phone number.
 * @return A {@code CharSequence} with appropriate annotations.
 * @deprecated Renamed {@link #createTtsSpannable}.
 *
 * @hide
 */
====>[HIDDEN]<android.telephony.PhoneNumberUtils: CharSequence ttsSpanAsPhoneNumber(CharSequence)>    ---->    #createTtsSpannable
<android.database.sqlite.SQLiteQueryBuilder: void setProjectionAggregationAllowed(boolean)>
/**
 * @deprecated Projection aggregation is now always allowed
 *
 * @hide
 */
====>[HIDDEN]<android.database.sqlite.SQLiteQueryBuilder: void setProjectionAggregationAllowed(boolean)>    ---->    
<android.telephony.SignalStrength: int getLteCqi()>
/**
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthLte#getCqi}.
 *
 * @see android.telephony#CellSignalStrengthLte
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getLteCqi()>    ---->    android.telephony#CellSignalStrengthLte
<android.service.notification.StatusBarNotification: void <init>(String,String,int,String,int,int,int,Notification,UserHandle,long)>
/**
 * @deprecated Non-system apps should not need to create StatusBarNotifications.
 */
====>[PUBLIC]<android.service.notification.StatusBarNotification: void <init>(String,String,int,String,int,int,int,Notification,UserHandle,long)>    ---->    
<android.provider.MediaStore.Images.Thumbnails: Bitmap getThumbnail(ContentResolver,long,int,Options)>
/**
 * Return thumbnail representing a specific image item. If a
 * thumbnail doesn't exist, this method will block until it's
 * generated. Callers are responsible for their own in-memory
 * caching of returned values.
 *
 * @param imageId the image item to obtain a thumbnail for.
 * @param kind optimal thumbnail size desired.
 * @return decoded thumbnail, or {@code null} if problem was
 * encountered.
 * @deprecated Callers should migrate to using
 * {@link ContentResolver#loadThumbnail}, since it
 * offers richer control over requested thumbnail sizes
 * and cancellation behavior.
 */
====>[PUBLIC]<android.provider.MediaStore.Images.Thumbnails: Bitmap getThumbnail(ContentResolver,long,int,Options)>    ---->    
Inconsistency (Non-Documentation):<android.opengl.GLSurfaceView: void surfaceRedrawNeeded(SurfaceHolder)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//opengl/java/android/opengl/GLSurfaceView.java
<android.opengl.GLSurfaceView: void surfaceRedrawNeeded(SurfaceHolder)>
/**
 * This method is part of the SurfaceHolder.Callback2 interface, and is
 * not normally called or subclassed by clients of GLSurfaceView.
 */
====>[PUBLIC]<android.opengl.GLSurfaceView: void surfaceRedrawNeeded(SurfaceHolder)>    ---->    
<android.net.NetworkInfo: void setRoaming(boolean)>
/**
 * @deprecated Use {@link NetworkCapabilities#NET_CAPABILITY_NOT_ROAMING} instead.
 * {@hide}
 */
====>[HIDDEN]<android.net.NetworkInfo: void setRoaming(boolean)>    ---->    NetworkCapabilities#NET_CAPABILITY_NOT_ROAMING
<android.os.Debug: int getThreadAllocCount()>
/**
 * Returns the thread-local count of objects allocated by the runtime between a
 * {@link #startAllocCounting() start} and {@link #stopAllocCounting() stop}.
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: int getThreadAllocCount()>    ---->    
<com.android.systemui.bubbles.BubbleStackView: void collapseStack()>
/**
 * Collapses the stack of bubbles.
 * <p>
 * Must be called from the main thread.
 *
 * @deprecated use {@link #setExpanded(boolean)} and {@link #setSelectedBubble(Bubble)}
 */
====>[PUBLIC]<com.android.systemui.bubbles.BubbleStackView: void collapseStack()>    ---->    #setExpanded(boolean)
Inconsistency (Non-Documentation):<androidx.media.filterfw.CameraStreamer: Camera getCamera()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//tests/Camera2Tests/SmartCamera/SimpleCamera/src/androidx/media/filterfw/CameraStreamer.java
<androidx.media.filterfw.CameraStreamer: Camera getCamera()>
/**
 * Expose the underlying android.hardware.Camera object.
 * Use the returned object with care: some camera functions may break the functionality
 * of CameraStreamer.
 * @return the Camera object.
 */
====>[PUBLIC]<androidx.media.filterfw.CameraStreamer: Camera getCamera()>    ---->    
<android.provider.Contacts.ContactMethods: CharSequence getDisplayLabel(Context,int,int,CharSequence)>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.ContactMethods: CharSequence getDisplayLabel(Context,int,int,CharSequence)>    ---->    android.provider.ContactsContract
<android.app.ActionBar: void removeTab(Tab)>
/**
 * Remove a tab from the action bar. If the removed tab was selected it will be deselected
 * and another tab will be selected if present.
 *
 * @param tab The tab to remove
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: void removeTab(Tab)>    ---->    
<com.android.internal.widget.RecyclerView.LayoutParams: int getViewPosition()>
/**
 * @deprecated use {@link #getViewLayoutPosition()} or {@link #getViewAdapterPosition()}
 */
====>[PUBLIC]<com.android.internal.widget.RecyclerView.LayoutParams: int getViewPosition()>    ---->    #getViewLayoutPosition()
<android.media.AsyncPlayer: void play(Context,Uri,boolean,int)>
/**
 * Start playing the sound.  It will actually start playing at some
 * point in the future.  There are no guarantees about latency here.
 * Calling this before another audio file is done playing will stop
 * that one and start the new one.
 *
 * @param context Your application's context.
 * @param uri The URI to play.  (see {@link MediaPlayer#setDataSource(Context, Uri)})
 * @param looping Whether the audio should loop forever.
 * (see {@link MediaPlayer#setLooping(boolean)})
 * @param stream the AudioStream to use.
 * (see {@link MediaPlayer#setAudioStreamType(int)})
 * @deprecated use {@link #play(Context, Uri, boolean, AudioAttributes)} instead
 */
====>[PUBLIC]<android.media.AsyncPlayer: void play(Context,Uri,boolean,int)>    ---->    #play(Context, Uri, boolean, AudioAttributes)
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: WearableExtender setHintAvoidBackgroundClipping(boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.WearableExtender: WearableExtender setHintAvoidBackgroundClipping(boolean)>
/**
 * Set a hint that this notification's background should not be clipped if possible,
 * and should instead be resized to fully display on the screen, retaining the aspect
 * ratio of the image. This can be useful for images like barcodes or qr codes.
 * @param hintAvoidBackgroundClipping {@code true} to avoid clipping if possible.
 * @return this object for method chaining
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: WearableExtender setHintAvoidBackgroundClipping(boolean)>    ---->    
<android.content.pm.PackageParser.Package: void setApplicationInfoSplitResourcePaths(String[])>
/**
 * @deprecated Forward locked apps no longer supported. Resource path not needed.
 */
====>[PUBLIC]<android.content.pm.PackageParser.Package: void setApplicationInfoSplitResourcePaths(String[])>    ---->    
Inconsistency (Non-Documentation):<com.android.systemui.shared.recents.model.Task: void removeCallback(TaskCallbacks)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//packages/SystemUI/shared/src/com/android/systemui/shared/recents/model/Task.java
<com.android.systemui.shared.recents.model.Task: void removeCallback(TaskCallbacks)>
/**
 * Remove a callback.
 */
====>[PUBLIC]<com.android.systemui.shared.recents.model.Task: void removeCallback(TaskCallbacks)>    ---->    
<android.app.ActionBar: int getNavigationItemCount()>
/**
 * Get the number of navigation items present in the current navigation mode.
 *
 * @return Number of navigation items.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: int getNavigationItemCount()>    ---->    
<android.renderscript.ProgramVertexFixedFunction.Builder: void <init>(RenderScript)>
/**
 * @deprecated in API 16
 * Creates a builder for fixed function vertex program
 *
 * @param rs Context to which the program will belong.
 */
====>[PUBLIC]<android.renderscript.ProgramVertexFixedFunction.Builder: void <init>(RenderScript)>    ---->    
<android.provider.MediaStore: void untrash(Context,Uri)>
/**
 * Mark the given item as being "untrashed", meaning it should no longer be
 * deleted as previously requested through {@link #trash(Context, Uri)}.
 *
 * @see MediaColumns#IS_TRASHED
 * @see MediaStore#setIncludeTrashed(Uri)
 * @see MediaStore#trash(Context, Uri)
 * @see MediaStore#untrash(Context, Uri)
 * @removed
 */
====>[HIDDEN]<android.provider.MediaStore: void untrash(Context,Uri)>    ---->    
<android.service.textclassifier.TextClassifierService: TextClassifier getLocalTextClassifier()>
/**
 * Returns a TextClassifier that runs in this service's process.
 * If the local TextClassifier is disabled, this returns {@link TextClassifier#NO_OP}.
 *
 * @deprecated Use {@link #getDefaultTextClassifierImplementation(Context)} instead.
 */
====>[PUBLIC]<android.service.textclassifier.TextClassifierService: TextClassifier getLocalTextClassifier()>    ---->    #getDefaultTextClassifierImplementation(Context)
<android.hardware.usb.UsbAccessory: void <init>(String,String,String,String,String,String)>
/**
 * DO NOT USE. Only for backwards compatibility with
 * {@link com.android.future.usb.UsbAccessory}.
 *
 * @hide
 * @deprecated use {@link UsbAccessory#UsbAccessory(String, String, String, String, String,
 * IUsbSerialReader) instead}
 */
====>[HIDDEN]<android.hardware.usb.UsbAccessory: void <init>(String,String,String,String,String,String)>    ---->    UsbAccessory#UsbAccessory(String, String, String, String, String,  IUsbSerialReader)
Inconsistency (Non-Documentation):<com.android.systemui.shared.recents.model.Task: void notifyTaskDataLoaded(ThumbnailData,Drawable)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//packages/SystemUI/shared/src/com/android/systemui/shared/recents/model/Task.java
<com.android.systemui.shared.recents.model.Task: void notifyTaskDataLoaded(ThumbnailData,Drawable)>
/**
 * Notifies the callback listeners that this task has been loaded
 */
====>[PUBLIC]<com.android.systemui.shared.recents.model.Task: void notifyTaskDataLoaded(ThumbnailData,Drawable)>    ---->    
<android.app.job.JobInfo.Builder: Builder setIsPrefetch(boolean)>
/**
 * @removed
 * @deprecated replaced with {@link #setPrefetch(boolean)}
 */
====>[HIDDEN]<android.app.job.JobInfo.Builder: Builder setIsPrefetch(boolean)>    ---->    #setPrefetch(boolean)
Inconsistency (Non-Documentation):<com.android.server.pm.PackageInstallerService: File allocateStageDirLegacy(String,boolean)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//services/core/java/com/android/server/pm/PackageInstallerService.java
<com.android.server.pm.PackageInstallerService: File allocateStageDirLegacy(String,boolean)>

====>[PUBLIC]<com.android.server.pm.PackageInstallerService: File allocateStageDirLegacy(String,boolean)>    ---->    
<android.webkit.CacheManager: File getCacheFileBaseDir()>
/**
 * Gets the base directory in which the files used to store the contents of
 * cache entries are placed. See
 * {@link CacheManager.CacheResult#getLocalPath CacheManager.CacheResult.getLocalPath()}.
 *
 * @return the base directory of the cache
 * @deprecated This method no longer has any effect and always returns {@code null}.
 */
====>[PUBLIC]<android.webkit.CacheManager: File getCacheFileBaseDir()>    ---->    
<android.app.Notification.TvExtender: String getChannel()>
/**
 * @removed
 */
====>[HIDDEN]<android.app.Notification.TvExtender: String getChannel()>    ---->    
<android.telephony.SmsMessage: int getIndexOnSim()>
/**
 * Returns the record index of the message on the SIM (1-based index).
 * @return the record index of the message on the SIM, or -1 if this
 * SmsMessage was not created from a SIM SMS EF record.
 * @deprecated Use getIndexOnIcc instead.
 */
====>[PUBLIC]<android.telephony.SmsMessage: int getIndexOnSim()>    ---->    getIndexOnIcc
<com.android.internal.logging.MetricsLogger: void action(Context,int,int)>
/**
 * @deprecated because untestable; use {@link #action(int, int)}
 */
====>[PUBLIC]<com.android.internal.logging.MetricsLogger: void action(Context,int,int)>    ---->    #action(int, int)
<android.media.MediaScanner.FileEntry: void <init>(long,String,long,int)>
/**
 * @deprecated kept intact for lame apps using reflection
 */
====>[PUBLIC]<android.media.MediaScanner.FileEntry: void <init>(long,String,long,int)>    ---->    
<android.content.pm.PackageManager: void addPackageToPreferred(String)>
/**
 * @deprecated This function no longer does anything. It is the platform's
 * responsibility to assign preferred activities and this cannot be modified
 * directly. To determine the activities resolved by the platform, use
 * {@link #resolveActivity} or {@link #queryIntentActivities}. To configure
 * an app to be responsible for a particular role and to check current role
 * holders, see {@link android.app.role.RoleManager}.
 */
====>[PUBLIC]<android.content.pm.PackageManager: void addPackageToPreferred(String)>    ---->    #resolveActivity
Inconsistency (Non-Documentation):<android.content.ContextWrapper: int getWallpaperDesiredMinimumHeight()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/content/ContextWrapper.java
<android.content.ContextWrapper: int getWallpaperDesiredMinimumHeight()>

====>[PUBLIC]<android.content.ContextWrapper: int getWallpaperDesiredMinimumHeight()>    ---->    
<android.renderscript.ProgramVertexFixedFunction.Constants: void destroy()>
/**
 * @deprecated in API 16
 * Forces deallocation of memory backing the contant matrices.
 * Normally, this is unnecessary and will be garbage collected
 */
====>[PUBLIC]<android.renderscript.ProgramVertexFixedFunction.Constants: void destroy()>    ---->    
<android.webkit.WebView: String[] getHttpAuthUsernamePassword(String,String)>
/**
 * Retrieves HTTP authentication credentials for a given host and realm from the {@link
 * WebViewDatabase} instance.
 * @param host the host to which the credentials apply
 * @param realm the realm to which the credentials apply
 * @return the credentials as a String array, if found. The first element
 * is the username and the second element is the password. {@code null} if
 * no credentials are found.
 * @deprecated Use {@link WebViewDatabase#getHttpAuthUsernamePassword} instead
 */
====>[PUBLIC]<android.webkit.WebView: String[] getHttpAuthUsernamePassword(String,String)>    ---->    WebViewDatabase#getHttpAuthUsernamePassword
<com.android.location.provider.LocationProviderBase: int onGetStatus(Bundle)>
/**
 * This method will no longer be invoked.
 *
 * Returns a information on the status of this provider.
 * <p>{@link android.location.LocationProvider#OUT_OF_SERVICE} is returned if the provider is
 * out of service, and this is not expected to change in the near
 * future; {@link android.location.LocationProvider#TEMPORARILY_UNAVAILABLE} is returned if
 * the provider is temporarily unavailable but is expected to be
 * available shortly; and {@link android.location.LocationProvider#AVAILABLE} is returned
 * if the provider is currently available.
 *
 * <p>If extras is non-null, additional status information may be
 * added to it in the form of provider-specific key/value pairs.
 *
 * @deprecated This callback will be never be invoked on Android Q and above. This method should
 * only be implemented in location providers that need to support SDKs below Android Q. This
 * method may be removed in the future.
 */
====>[PUBLIC]<com.android.location.provider.LocationProviderBase: int onGetStatus(Bundle)>    ---->    
<android.view.View: Bitmap getDrawingCache(boolean)>
/**
 * <p>Returns the bitmap in which this view drawing is cached. The returned bitmap
 * is null when caching is disabled. If caching is enabled and the cache is not ready,
 * this method will create it. Calling {@link #draw(android.graphics.Canvas)} will not
 * draw from the cache when the cache is enabled. To benefit from the cache, you must
 * request the drawing cache by calling this method and draw it on screen if the
 * returned bitmap is not null.</p>
 *
 * <p>Note about auto scaling in compatibility mode: When auto scaling is not enabled,
 * this method will create a bitmap of the same size as this view. Because this bitmap
 * will be drawn scaled by the parent ViewGroup, the result on screen might show
 * scaling artifacts. To avoid such artifacts, you should call this method by setting
 * the auto scaling to true. Doing so, however, will generate a bitmap of a different
 * size than the view. This implies that your application must be able to handle this
 * size.</p>
 *
 * @param autoScale Indicates whether the generated bitmap should be scaled based on
 * the current density of the screen when the application is in compatibility
 * mode.
 *
 * @return A bitmap representing this view or null if cache is disabled.
 *
 * @see #setDrawingCacheEnabled(boolean)
 * @see #isDrawingCacheEnabled()
 * @see #buildDrawingCache(boolean)
 * @see #destroyDrawingCache()
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: Bitmap getDrawingCache(boolean)>    ---->    #setLayerType(int, Paint)
<android.telephony.SignalStrength: int getLteLevel()>
/**
 * Get LTE as level 0..4
 *
 * @deprecated this information should be retrieved from
 * {@link CellSignalStrengthLte#getLevel}.
 *
 * @see android.telephony#CellSignalStrengthLte
 * @see android.telephony.SignalStrength#getCellSignalStrengths()
 * @hide
 */
====>[HIDDEN]<android.telephony.SignalStrength: int getLteLevel()>    ---->    android.telephony#CellSignalStrengthLte
<android.telecom.InCallService: void onPhoneDestroyed(Phone)>
/**
 * Invoked when a {@code Phone} has been destroyed. This is a signal to the in-call experience
 * to stop displaying in-call information to the user. This method will be called exactly once
 * in the lifetime of the {@code InCallService}, and it will always be called after a previous
 * call to {@link #onPhoneCreated(Phone)}.
 *
 * @param phone The {@code Phone} object associated with this {@code InCallService}.
 * @hide
 * @deprecated Use direct methods on InCallService instead of {@link Phone}.
 */
====>[HIDDEN]<android.telecom.InCallService: void onPhoneDestroyed(Phone)>    ---->    direct methods on InCallService
<android.net.ConnectivityManager: int getNetworkPreference()>
/**
 * Retrieves the current preferred network type.
 *
 * @return an integer representing the preferred network type
 *
 * @deprecated Functionality has been removed as it no longer makes sense,
 * with many more than two networks - we'd need an array to express
 * preference.  Instead we use dynamic network properties of
 * the networks to describe their precedence.
 */
====>[PUBLIC]<android.net.ConnectivityManager: int getNetworkPreference()>    ---->    
<android.app.StatsManager: boolean removeConfiguration(long)>
/**
 * @deprecated Use {@link #removeConfig(long)}
 */
====>[PUBLIC]<android.app.StatsManager: boolean removeConfiguration(long)>    ---->    #removeConfig(long)
<android.location.GnssMeasurement: boolean hasCarrierPhaseUncertainty()>
/**
 * Returns {@code true} if {@link #getCarrierPhaseUncertainty()} is available, {@code false}
 * otherwise.
 *
 * @deprecated use {@link #getAccumulatedDeltaRangeState()} instead.
 */
====>[PUBLIC]<android.location.GnssMeasurement: boolean hasCarrierPhaseUncertainty()>    ---->    #getAccumulatedDeltaRangeState()
<android.graphics.Canvas: void getMatrix(Matrix)>
/**
 * Return, in ctm, the current transformation matrix. This does not alter
 * the matrix in the canvas, but just returns a copy of it.
 *
 * @deprecated {@link #isHardwareAccelerated() Hardware accelerated} canvases may have any
 * matrix when passed to a View or Drawable, as it is implementation defined where in the
 * hierarchy such canvases are created. It is recommended in such cases to either draw contents
 * irrespective of the current matrix, or to track relevant transform state outside of the
 * canvas.
 */
====>[PUBLIC]<android.graphics.Canvas: void getMatrix(Matrix)>    ---->    #isHardwareAccelerated() Hardware accelerated
<android.provider.MediaStore.Images.Media: String insertImage(ContentResolver,Bitmap,String,String)>
/**
 * Insert an image and create a thumbnail for it.
 *
 * @param cr The content resolver to use
 * @param source The stream to use for the image
 * @param title The name of the image
 * @param description The description of the image
 * @return The URL to the newly created image, or <code>null</code> if the image failed to be stored
 * for any reason.
 * @deprecated inserting of images should be performed using
 * {@link MediaColumns#IS_PENDING}, which offers richer
 * control over lifecycle.
 */
====>[PUBLIC]<android.provider.MediaStore.Images.Media: String insertImage(ContentResolver,Bitmap,String,String)>    ---->    MediaColumns#IS_PENDING
<android.transition.Scene: void <init>(ViewGroup,ViewGroup)>
/**
 * @deprecated use {@link #Scene(ViewGroup, View)}.
 */
====>[PUBLIC]<android.transition.Scene: void <init>(ViewGroup,ViewGroup)>    ---->    #Scene(ViewGroup, View)
<android.net.wifi.WifiManager: int updateNetwork(WifiConfiguration)>
/**
 * Update the network description of an existing configured network.
 *
 * @param config the set of variables that describe the configuration,
 * contained in a {@link WifiConfiguration} object. It may
 * be sparse, so that only the items that are being changed
 * are non-<code>null</code>. The {@code networkId} field
 * must be set to the ID of the existing network being updated.
 * If the {@link WifiConfiguration} has an Http Proxy set
 * the calling app must be System, or be provisioned as the Profile or Device Owner.
 * @return Returns the {@code networkId} of the supplied
 * {@code WifiConfiguration} on success.
 * <br/>
 * Returns {@code -1} on failure, including when the {@code networkId}
 * field of the {@code WifiConfiguration} does not refer to an
 * existing network.
 *
 * @deprecated
 * a) See {@link WifiNetworkSpecifier.Builder#build()} for new
 * mechanism to trigger connection to a Wi-Fi network.
 * b) See {@link #addNetworkSuggestions(List)},
 * {@link #removeNetworkSuggestions(List)} for new API to add Wi-Fi networks for consideration
 * when auto-connecting to wifi.
 * <b>Compatibility Note:</b> For applications targeting
 * {@link android.os.Build.VERSION_CODES#Q} or above, this API will always return {@code -1}.
 */
====>[PUBLIC]<android.net.wifi.WifiManager: int updateNetwork(WifiConfiguration)>    ---->    WifiNetworkSpecifier.Builder#build()
<android.os.Parcel: T[] readTypedArray(Creator<T>)>
/**
 * @deprecated
 * @hide
 */
====>[HIDDEN]<android.os.Parcel: T[] readTypedArray(Creator<T>)>    ---->    
Inconsistency (Non-Documentation):<android.content.ContextWrapper: void setWallpaper(InputStream)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/content/ContextWrapper.java
<android.content.ContextWrapper: void setWallpaper(InputStream)>

====>[PUBLIC]<android.content.ContextWrapper: void setWallpaper(InputStream)>    ---->    
Inconsistency (Non-Documentation):<com.android.internal.widget.LockPatternUtils: boolean isLegacyLockPatternEnabled(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/com/android/internal/widget/LockPatternUtils.java
<com.android.internal.widget.LockPatternUtils: boolean isLegacyLockPatternEnabled(int)>

====>[PUBLIC]<com.android.internal.widget.LockPatternUtils: boolean isLegacyLockPatternEnabled(int)>    ---->    
<android.content.pm.ShortcutInfo: int getTextResId()>
/**
 * @hide -- old signature, the internal code still uses it.
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo: int getTextResId()>    ---->    
<android.view.accessibility.AccessibilityNodeInfo: int getActions()>
/**
 * Gets the actions that can be performed on the node.
 *
 * @return The bit mask of with actions.
 *
 * @see AccessibilityNodeInfo#ACTION_FOCUS
 * @see AccessibilityNodeInfo#ACTION_CLEAR_FOCUS
 * @see AccessibilityNodeInfo#ACTION_SELECT
 * @see AccessibilityNodeInfo#ACTION_CLEAR_SELECTION
 * @see AccessibilityNodeInfo#ACTION_ACCESSIBILITY_FOCUS
 * @see AccessibilityNodeInfo#ACTION_CLEAR_ACCESSIBILITY_FOCUS
 * @see AccessibilityNodeInfo#ACTION_CLICK
 * @see AccessibilityNodeInfo#ACTION_LONG_CLICK
 * @see AccessibilityNodeInfo#ACTION_NEXT_AT_MOVEMENT_GRANULARITY
 * @see AccessibilityNodeInfo#ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY
 * @see AccessibilityNodeInfo#ACTION_NEXT_HTML_ELEMENT
 * @see AccessibilityNodeInfo#ACTION_PREVIOUS_HTML_ELEMENT
 * @see AccessibilityNodeInfo#ACTION_SCROLL_FORWARD
 * @see AccessibilityNodeInfo#ACTION_SCROLL_BACKWARD
 *
 * @deprecated Use {@link #getActionList()}.
 */
====>[PUBLIC]<android.view.accessibility.AccessibilityNodeInfo: int getActions()>    ---->    #getActionList()
Inconsistency (Non-Documentation):<android.media.ThumbnailUtils: void closeSilently(ParcelFileDescriptor)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//media/java/android/media/ThumbnailUtils.java
<android.media.ThumbnailUtils: void closeSilently(ParcelFileDescriptor)>

====>[PUBLIC]<android.media.ThumbnailUtils: void closeSilently(ParcelFileDescriptor)>    ---->    
Inconsistency (Non-Documentation):<android.os.Environment.UserEnvironment: File getExternalStorageDirectory()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/os/Environment.java
<android.os.Environment.UserEnvironment: File getExternalStorageDirectory()>

====>[PUBLIC]<android.os.Environment.UserEnvironment: File getExternalStorageDirectory()>    ---->    
<android.app.Notification.WearableExtender: WearableExtender setHintAmbientBigPicture(boolean)>
/**
 * Set a hint that this notification's {@link BigPictureStyle} (if present) should be
 * converted to low-bit and displayed in ambient mode, especially useful for barcodes and
 * qr codes, as well as other simple black-and-white tickets.
 * @param hintAmbientBigPicture {@code true} to enable converstion and ambient.
 * @return this object for method chaining
 * @deprecated This feature is no longer supported.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: WearableExtender setHintAmbientBigPicture(boolean)>    ---->    
<android.view.ViewDebug: void trace(View,RecyclerTraceType,int)>
/**
 * @deprecated This method is now unused and invoking it is a no-op
 */
====>[PUBLIC]<android.view.ViewDebug: void trace(View,RecyclerTraceType,int)>    ---->    
<android.content.pm.PackageManager: void addPreferredActivityAsUser(IntentFilter,int,ComponentName[],ComponentName,int)>
/**
 * Same as {@link #addPreferredActivity(IntentFilter, int,
 * ComponentName[], ComponentName)}, but with a specific userId to apply the preference
 * to.
 * @hide
 *
 * @deprecated This function no longer does anything. It is the platform's
 * responsibility to assign preferred activities and this cannot be modified
 * directly. To determine the activities resolved by the platform, use
 * {@link #resolveActivity} or {@link #queryIntentActivities}. To configure
 * an app to be responsible for a particular role and to check current role
 * holders, see {@link android.app.role.RoleManager}.
 */
====>[HIDDEN]<android.content.pm.PackageManager: void addPreferredActivityAsUser(IntentFilter,int,ComponentName[],ComponentName,int)>    ---->    #resolveActivity
<android.hardware.location.ContextHubManager: int registerCallback(Callback)>
/**
 * Set a callback to receive messages from the context hub
 *
 * @param callback Callback object
 *
 * @see Callback
 *
 * @return int 0 on success, -1 otherwise
 *
 * @deprecated Use {@link #createClient(ContextHubInfo, ContextHubClientCallback, Executor)}
 * or {@link #createClient(ContextHubInfo, ContextHubClientCallback)} instead to
 * register a {@link android.hardware.location.ContextHubClientCallback}.
 */
====>[PUBLIC]<android.hardware.location.ContextHubManager: int registerCallback(Callback)>    ---->    #createClient(ContextHubInfo, ContextHubClientCallback, Executor)
<com.android.server.am.ActivityManagerService: void requestBugReport(int)>
/**
 * @deprecated This method is only used by a few internal components and it will soon be
 * replaced by a proper bug report API (which will be restricted to a few, pre-defined apps).
 * No new code should be calling it.
 */
====>[PUBLIC]<com.android.server.am.ActivityManagerService: void requestBugReport(int)>    ---->    
Inconsistency (Non-Documentation):<android.app.ContextImpl: Drawable peekWallpaper()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/ContextImpl.java
<android.app.ContextImpl: Drawable peekWallpaper()>

====>[PUBLIC]<android.app.ContextImpl: Drawable peekWallpaper()>    ---->    
<android.hardware.radio.RadioTuner: boolean isAntennaConnected()>
/**
 * Get current antenna connection state for current configuration.
 * Only valid if a configuration has been applied.
 * @return {@code true} if the antenna is connected, {@code false} otherwise.
 *
 * @deprecated Use {@link onAntennaState} callback instead
 */
====>[PUBLIC]<android.hardware.radio.RadioTuner: boolean isAntennaConnected()>    ---->    onAntennaState
<android.util.proto.ProtoOutputStream: void writeEnum(long,int)>
/**
 * Write a single proto enum type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeEnum(long,int)>    ---->    #write
<android.net.TrafficStats: long getUidTcpRxSegments(int)>
/**
 * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},
 * transport layer statistics are no longer available, and will
 * always return {@link #UNSUPPORTED}.
 * @see #getUidRxPackets(int)
 */
====>[PUBLIC]<android.net.TrafficStats: long getUidTcpRxSegments(int)>    ---->    #getUidRxPackets(int)
<android.hardware.radio.ProgramSelector: long[] getVendorIds()>
/**
 * Vendor identifiers are passed as-is to the HAL implementation,
 * preserving elements order.
 *
 * @return an array of vendor identifiers, must not be modified.
 * @deprecated for HAL 1.x compatibility;
 * HAL 2.x uses standard primary/secondary lists for vendor IDs
 */
====>[PUBLIC]<android.hardware.radio.ProgramSelector: long[] getVendorIds()>    ---->    
<android.content.pm.SharedLibraryInfo: int getVersion()>
/**
 * @deprecated Use {@link #getLongVersion()} instead.
 */
====>[PUBLIC]<android.content.pm.SharedLibraryInfo: int getVersion()>    ---->    #getLongVersion()
<android.webkit.CookieSyncManager: void stopSync()>
/**
 * stopSync() requests sync manager to stop sync. remove any SYNC_MESSAGE in
 * the queue to break the sync loop
 * @deprecated Calling stopSync is no longer useful as the WebView
 * automatically syncs cookies.
 */
====>[PUBLIC]<android.webkit.CookieSyncManager: void stopSync()>    ---->    
<android.telephony.CellIdentityLte: int getMcc()>
/**
 * @return 3-digit Mobile Country Code, 0..999,
 * {@link android.telephony.CellInfo#UNAVAILABLE UNAVAILABLE} if unavailable.
 * @deprecated Use {@link #getMccString} instead.
 */
====>[PUBLIC]<android.telephony.CellIdentityLte: int getMcc()>    ---->    #getMccString
<android.app.DownloadManager.Request: Request setShowRunningNotification(boolean)>
/**
 * Control whether a system notification is posted by the download manager while this
 * download is running. If enabled, the download manager posts notifications about downloads
 * through the system {@link android.app.NotificationManager}. By default, a notification is
 * shown.
 *
 * If set to false, this requires the permission
 * android.permission.DOWNLOAD_WITHOUT_NOTIFICATION.
 *
 * @param show whether the download manager should show a notification for this download.
 * @return this object
 * @deprecated use {@link #setNotificationVisibility(int)}
 */
====>[PUBLIC]<android.app.DownloadManager.Request: Request setShowRunningNotification(boolean)>    ---->    #setNotificationVisibility(int)
<android.nfc.NfcAdapter: boolean invokeBeam(Activity)>
/**
 * Manually invoke Android Beam to share data.
 *
 * <p>The Android Beam animation is normally only shown when two NFC-capable
 * devices come into range.
 * By calling this method, an Activity can invoke the Beam animation directly
 * even if no other NFC device is in range yet. The Beam animation will then
 * prompt the user to tap another NFC-capable device to complete the data
 * transfer.
 *
 * <p>The main advantage of using this method is that it avoids the need for the
 * user to tap the screen to complete the transfer, as this method already
 * establishes the direction of the transfer and the consent of the user to
 * share data. Callers are responsible for making sure that the user has
 * consented to sharing data on NFC tap.
 *
 * <p>Note that to use this method, the passed in Activity must have already
 * set data to share over Beam by using method calls such as
 * {@link #setNdefPushMessageCallback} or
 * {@link #setBeamPushUrisCallback}.
 *
 * @param activity the current foreground Activity that has registered data to share
 * @return whether the Beam animation was successfully invoked
 * @throws UnsupportedOperationException if FEATURE_NFC is unavailable.
 * @deprecated this feature is deprecated. File sharing can work using other technology like
 * Bluetooth.
 */
====>[PUBLIC]<android.nfc.NfcAdapter: boolean invokeBeam(Activity)>    ---->    
<android.app.AlertDialog: void setButton3(CharSequence,Message)>
/**
 * @deprecated Use {@link #setButton(int, CharSequence, Message)} with
 * {@link DialogInterface#BUTTON_NEUTRAL}.
 */
====>[PUBLIC]<android.app.AlertDialog: void setButton3(CharSequence,Message)>    ---->    #setButton(int, CharSequence, Message)
<android.app.Activity: void setProgressBarIndeterminate(boolean)>
/**
 * Sets whether the horizontal progress bar in the title should be indeterminate (the circular
 * is always indeterminate).
 * <p>
 * In order for the progress bar to be shown, the feature must be requested
 * via {@link #requestWindowFeature(int)}.
 *
 * @param indeterminate Whether the horizontal progress bar should be indeterminate.
 * @deprecated No longer supported starting in API 21.
 */
====>[PUBLIC]<android.app.Activity: void setProgressBarIndeterminate(boolean)>    ---->    
<android.app.Notification.WearableExtender: WearableExtender setBackground(Bitmap)>
/**
 * Set a background image to be displayed behind the notification content.
 * Contrary to the {@link android.app.Notification.BigPictureStyle}, this background
 * will work with any notification style.
 *
 * @param background the background bitmap
 * @return this object for method chaining
 * @see android.app.Notification.WearableExtender#getBackground
 * @deprecated Background images are no longer supported.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: WearableExtender setBackground(Bitmap)>    ---->    
<android.view.SurfaceControl: void mergeToGlobalTransaction(Transaction)>
/**
 * Merge the supplied transaction in to the deprecated "global" transaction.
 * This clears the supplied transaction in an identical fashion to {@link Transaction#merge}.
 * <p>
 * This is a utility for interop with legacy-code and will go away with the Global Transaction.
 * @hide
 */
====>[HIDDEN]<android.view.SurfaceControl: void mergeToGlobalTransaction(Transaction)>    ---->    
<android.bluetooth.BluetoothHealthAppConfiguration: int getDataType()>
/**
 * Return the data type associated with this application configuration.
 *
 * @return dataType
 *
 * @deprecated Health Device Profile (HDP) and MCAP protocol are no longer used. New
 * apps should use Bluetooth Low Energy based solutions such as {@link BluetoothGatt},
 * {@link BluetoothAdapter#listenUsingL2capChannel()(int)}, or
 * {@link BluetoothDevice#createL2capChannel(int)}
 */
====>[PUBLIC]<android.bluetooth.BluetoothHealthAppConfiguration: int getDataType()>    ---->    BluetoothGatt
<android.widget.CalendarView: int getWeekNumberColor()>
/**
 * Gets the color for the week numbers.
 *
 * @return The week number color.
 *
 * @attr ref android.R.styleable#CalendarView_weekNumberColor
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: int getWeekNumberColor()>    ---->    
<android.app.FragmentController: void restoreAllState(Parcelable,List<Fragment>)>
/**
 * Restores the saved state for all Fragments. The given Fragment list are Fragment
 * instances retained across configuration changes.
 *
 * @see #retainNonConfig()
 *
 * @deprecated use {@link #restoreAllState(Parcelable, FragmentManagerNonConfig)}
 */
====>[PUBLIC]<android.app.FragmentController: void restoreAllState(Parcelable,List<Fragment>)>    ---->    #restoreAllState(Parcelable, FragmentManagerNonConfig)
<android.service.euicc.EuiccProfileInfo: void <init>(String,UiccAccessRule[],String)>
/**
 * @hide
 * @deprecated - Do not use.
 */
====>[HIDDEN]<android.service.euicc.EuiccProfileInfo: void <init>(String,UiccAccessRule[],String)>    ---->    
<android.telephony.TelephonyManager: String getDeviceId(int)>
/**
 * Returns the unique device ID of a subscription, for example, the IMEI for
 * GSM and the MEID for CDMA phones. Return null if device ID is not available.
 *
 * <p>Requires Permission: READ_PRIVILEGED_PHONE_STATE, for the calling app to be the device or
 * profile owner and have the READ_PHONE_STATE permission, or that the calling app has carrier
 * privileges (see {@link #hasCarrierPrivileges}). The profile owner is an app that owns a
 * managed profile on the device; for more details see <a
 * href="https://developer.android.com/work/managed-profiles">Work profiles</a>. Profile owner
 * access is deprecated and will be removed in a future release.
 *
 * <p>If the calling app does not meet one of these requirements then this method will behave
 * as follows:
 *
 * <ul>
 * <li>If the calling app's target SDK is API level 28 or lower and the app has the
 * READ_PHONE_STATE permission then null is returned.</li>
 * <li>If the calling app's target SDK is API level 28 or lower and the app does not have
 * the READ_PHONE_STATE permission, or if the calling app is targeting API level 29 or
 * higher, then a SecurityException is thrown.</li>
 * </ul>
 *
 * @param slotIndex of which deviceID is returned
 *
 * @deprecated Use {@link #getImei} which returns IMEI for GSM or {@link #getMeid} which returns
 * MEID for CDMA.
 */
====>[PUBLIC]<android.telephony.TelephonyManager: String getDeviceId(int)>    ---->    #getImei
Inconsistency (Non-Documentation):<android.app.ContextImpl: void clearWallpaper()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/ContextImpl.java
<android.app.ContextImpl: void clearWallpaper()>

====>[PUBLIC]<android.app.ContextImpl: void clearWallpaper()>    ---->    
<android.webkit.WebView: int getVisibleTitleHeight()>
/**
 * Gets the visible height (in pixels) of the embedded title bar (if any).
 *
 * @deprecated This method is now obsolete.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebView: int getVisibleTitleHeight()>    ---->    
<android.media.MediaScanner.MyMediaScannerClient: int getFileTypeFromDrm(String)>
/**
 * @deprecated file types no longer exist
 */
====>[PUBLIC]<android.media.MediaScanner.MyMediaScannerClient: int getFileTypeFromDrm(String)>    ---->    
<android.content.pm.PackageManager: void clearPackagePreferredActivities(String)>
/**
 * Remove all preferred activity mappings, previously added with
 * {@link #addPreferredActivity}, from the
 * system whose activities are implemented in the given package name.
 * An application can only clear its own package(s).
 *
 * @param packageName The name of the package whose preferred activity
 * mappings are to be removed.
 *
 * @deprecated This function no longer does anything. It is the platform's
 * responsibility to assign preferred activities and this cannot be modified
 * directly. To determine the activities resolved by the platform, use
 * {@link #resolveActivity} or {@link #queryIntentActivities}. To configure
 * an app to be responsible for a particular role and to check current role
 * holders, see {@link android.app.role.RoleManager}.
 */
====>[PUBLIC]<android.content.pm.PackageManager: void clearPackagePreferredActivities(String)>    ---->    #resolveActivity
<android.net.http.SslCertificate: String getValidNotAfter()>
/**
 * @return Not-after date from the certificate validity period in
 * ISO 8601 format or "" if none has been set
 *
 * @deprecated Use {@link #getValidNotAfterDate()}
 */
====>[PUBLIC]<android.net.http.SslCertificate: String getValidNotAfter()>    ---->    #getValidNotAfterDate()
<android.telecom.InCallService: Phone getPhone()>
/**
 * Obtain the {@code Phone} associated with this {@code InCallService}.
 *
 * @return The {@code Phone} object associated with this {@code InCallService}, or {@code null}
 * if the {@code InCallService} is not in a state where it has an associated
 * {@code Phone}.
 * @hide
 * @deprecated Use direct methods on InCallService instead of {@link Phone}.
 */
====>[HIDDEN]<android.telecom.InCallService: Phone getPhone()>    ---->    direct methods on InCallService
<android.app.FragmentManager: FragmentTransaction openTransaction()>
/**
 * @hide -- remove once prebuilts are in.
 */
====>[HIDDEN]<android.app.FragmentManager: FragmentTransaction openTransaction()>    ---->    
<android.text.format.DateUtils: String getDayOfWeekString(int,int)>
/**
 * Return a string for the day of the week.
 * @param dayOfWeek One of {@link Calendar#SUNDAY Calendar.SUNDAY},
 * {@link Calendar#MONDAY Calendar.MONDAY}, etc.
 * @param abbrev One of {@link #LENGTH_LONG}, {@link #LENGTH_SHORT},
 * {@link #LENGTH_MEDIUM}, or {@link #LENGTH_SHORTEST}.
 * Note that in most languages, {@link #LENGTH_SHORT}
 * will return the same as {@link #LENGTH_MEDIUM}.
 * Undefined lengths will return {@link #LENGTH_MEDIUM}
 * but may return something different in the future.
 * @throws IndexOutOfBoundsException if the dayOfWeek is out of bounds.
 * @deprecated Use {@link java.text.SimpleDateFormat} instead.
 */
====>[PUBLIC]<android.text.format.DateUtils: String getDayOfWeekString(int,int)>    ---->    java.text.SimpleDateFormat
<android.telephony.PhoneNumberUtils: boolean isPotentialEmergencyNumber(int,String,String)>
/**
 * Checks if a given number might *potentially* result in a call to an
 * emergency service, for a specific country.
 *
 * Specifically, this method will return true if the specified number
 * is an emergency number in the specified country, *or* if the number
 * simply starts with the same digits as any emergency number for that
 * country.
 *
 * This method is intended for internal use by the phone app when
 * deciding whether to allow ACTION_CALL intents from 3rd party apps
 * (where we're required to *not* allow emergency calls to be placed.)
 *
 * @param subId the subscription id of the SIM.
 * @param number the number to look up.
 * @param defaultCountryIso the specific country which the number should be checked against
 * @return true if the number is an emergency number for the specific
 * country, *or* if the number starts with the same digits as
 * any of those emergency numbers.
 *
 * @deprecated Please use {@link TelephonyManager#isPotentialEmergencyNumber(String)}
 * instead.
 *
 * @hide
 */
====>[HIDDEN]<android.telephony.PhoneNumberUtils: boolean isPotentialEmergencyNumber(int,String,String)>    ---->    TelephonyManager#isPotentialEmergencyNumber(String)
<android.hardware.hdmi.HdmiControlManager: void requestRemoteDeviceToBecomeActiveSource(HdmiDeviceInfo)>
/**
 * @removed
 * @hide
 * @deprecated Please use {@link #setActiveSource(deviceInfo)} instead.
 */
====>[HIDDEN]<android.hardware.hdmi.HdmiControlManager: void requestRemoteDeviceToBecomeActiveSource(HdmiDeviceInfo)>    ---->    #setActiveSource(deviceInfo)
<android.widget.TimePicker: void setCurrentMinute(Integer)>
/**
 * Sets the currently selected minute.
 *
 * @param currentMinute the minute to set, in the range (0-59)
 * @deprecated Use {@link #setMinute(int)}
 */
====>[PUBLIC]<android.widget.TimePicker: void setCurrentMinute(Integer)>    ---->    #setMinute(int)
<android.widget.RemoteViews: void setRemoteAdapter(int,int,Intent)>
/**
 * Equivalent to calling {@link android.widget.AbsListView#setRemoteViewsAdapter(Intent)}.
 *
 * @param appWidgetId The id of the app widget which contains the specified view. (This
 * parameter is ignored in this deprecated method)
 * @param viewId The id of the {@link AdapterView}
 * @param intent The intent of the service which will be
 * providing data to the RemoteViewsAdapter
 * @deprecated This method has been deprecated. See
 * {@link android.widget.RemoteViews#setRemoteAdapter(int, Intent)}
 */
====>[PUBLIC]<android.widget.RemoteViews: void setRemoteAdapter(int,int,Intent)>    ---->    android.widget.RemoteViews#setRemoteAdapter(int, Intent)
<android.app.SearchManager: void onDismiss(DialogInterface)>
/**
 * @deprecated This method is an obsolete internal implementation detail. Do not use.
 */
====>[PUBLIC]<android.app.SearchManager: void onDismiss(DialogInterface)>    ---->    
<android.text.method.TimeKeyListener: void <init>()>
/**
 * @deprecated Use {@link #TimeKeyListener(Locale)} instead.
 */
====>[PUBLIC]<android.text.method.TimeKeyListener: void <init>()>    ---->    #TimeKeyListener(Locale)
<android.security.KeyChain: boolean isBoundKeyAlgorithm(String)>
/**
 * Returns {@code true} if the current device's {@code KeyChain} binds any
 * {@code PrivateKey} of the given {@code algorithm} to the device once
 * imported or generated. This can be used to tell if there is special
 * hardware support that can be used to bind keys to the device in a way
 * that makes it non-exportable.
 *
 * @deprecated Whether the key is bound to the secure hardware is known only
 * once the key has been imported. To find out, use:
 * <pre>{@code
 * PrivateKey key = ...; // private key from KeyChain
 *
 * KeyFactory keyFactory =
 * KeyFactory.getInstance(key.getAlgorithm(), "AndroidKeyStore");
 * KeyInfo keyInfo = keyFactory.getKeySpec(key, KeyInfo.class);
 * if (keyInfo.isInsideSecureHardware()) {
 * // The key is bound to the secure hardware of this Android
 * }}</pre>
 */
====>[PUBLIC]<android.security.KeyChain: boolean isBoundKeyAlgorithm(String)>    ---->    
<android.util.proto.ProtoOutputStream: long startObject(long)>
/**
 * Start a child object.
 *
 * Returns a token which should be passed to endObject.  Calls to endObject must be
 * nested properly.
 *
 * @deprecated Use #start() instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: long startObject(long)>    ---->    #start()
<android.view.animation.Animation: boolean getDetachWallpaper()>
/**
 * Return value of {@link #setDetachWallpaper(boolean)}.
 * @attr ref android.R.styleable#Animation_detachWallpaper
 *
 * @deprecated All window animations are running with detached wallpaper.
 */
====>[PUBLIC]<android.view.animation.Animation: boolean getDetachWallpaper()>    ---->    
<android.view.inputmethod.InputMethodManager: void hideSoftInputFromInputMethod(IBinder,int)>
/**
 * Close/hide the input method's soft input area, so the user no longer
 * sees it or can interact with it.  This can only be called
 * from the currently active input method, as validated by the given token.
 *
 * @param token Supplies the identifying token given to an input method
 * when it was started, which allows it to perform this operation on
 * itself.
 * @param flags Provides additional operating flags.  Currently may be
 * 0 or have the {@link #HIDE_IMPLICIT_ONLY},
 * {@link #HIDE_NOT_ALWAYS} bit set.
 * @deprecated Use {@link InputMethodService#requestHideSelf(int)} instead. This method was
 * intended for IME developers who should be accessing APIs through the service. APIs in this
 * class are intended for app developers interacting with the IME.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodManager: void hideSoftInputFromInputMethod(IBinder,int)>    ---->    InputMethodService#requestHideSelf(int)
<android.app.slice.SliceProvider: Slice onBindSlice(Uri,List<SliceSpec>)>
/**
 * @deprecated TO BE REMOVED
 * @removed
 */
====>[HIDDEN]<android.app.slice.SliceProvider: Slice onBindSlice(Uri,List<SliceSpec>)>    ---->    
<android.view.View: void buildDrawingCache(boolean)>
/**
 * <p>Forces the drawing cache to be built if the drawing cache is invalid.</p>
 *
 * <p>If you call {@link #buildDrawingCache()} manually without calling
 * {@link #setDrawingCacheEnabled(boolean) setDrawingCacheEnabled(true)}, you
 * should cleanup the cache by calling {@link #destroyDrawingCache()} afterwards.</p>
 *
 * <p>Note about auto scaling in compatibility mode: When auto scaling is not enabled,
 * this method will create a bitmap of the same size as this view. Because this bitmap
 * will be drawn scaled by the parent ViewGroup, the result on screen might show
 * scaling artifacts. To avoid such artifacts, you should call this method by setting
 * the auto scaling to true. Doing so, however, will generate a bitmap of a different
 * size than the view. This implies that your application must be able to handle this
 * size.</p>
 *
 * <p>You should avoid calling this method when hardware acceleration is enabled. If
 * you do not need the drawing cache bitmap, calling this method will increase memory
 * usage and cause the view to be rendered in software once, thus negatively impacting
 * performance.</p>
 *
 * @see #getDrawingCache()
 * @see #destroyDrawingCache()
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: void buildDrawingCache(boolean)>    ---->    #setLayerType(int, Paint)
<com.android.internal.widget.RecyclerView.SmoothScroller: void instantScrollToPosition(int)>
/**
 * @see RecyclerView#scrollToPosition(int)
 * @deprecated Use {@link Action#jumpTo(int)}.
 */
====>[PUBLIC]<com.android.internal.widget.RecyclerView.SmoothScroller: void instantScrollToPosition(int)>    ---->    Action#jumpTo(int)
<android.app.slice.SliceManager: Slice bindSlice(Uri,List<SliceSpec>)>
/**
 * @deprecated TO BE REMOVED
 * @removed
 */
====>[HIDDEN]<android.app.slice.SliceManager: Slice bindSlice(Uri,List<SliceSpec>)>    ---->    
<android.webkit.CookieSyncManager: void syncFromRamToFlash()>
/**
 * @deprecated Use {@link CookieManager#flush} instead.
 */
====>[PUBLIC]<android.webkit.CookieSyncManager: void syncFromRamToFlash()>    ---->    CookieManager#flush
<android.graphics.RecordingCanvas: void callDrawGLFunction2(long)>
/**
 * Records the functor specified with the drawGLFunction function pointer. This is
 * functionality used by webview for calling into their renderer from our display lists.
 *
 * @param drawGLFunction A native function pointer
 *
 * @hide
 * @deprecated Use {@link #drawWebViewFunctor(int)}
 */
====>[HIDDEN]<android.graphics.RecordingCanvas: void callDrawGLFunction2(long)>    ---->    #drawWebViewFunctor(int)
<android.provider.Contacts.Intents: void <init>()>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.Intents: void <init>()>    ---->    android.provider.ContactsContract
<android.view.KeyCharacterMap: boolean getKeyData(int,KeyData)>
/**
 * Get the character conversion data for a given key code.
 *
 * @param keyCode The keyCode to query.
 * @param results A {@link KeyData} instance that will be filled with the results.
 * @return True if the key was mapped.  If the key was not mapped, results is not modified.
 *
 * @deprecated instead use {@link KeyCharacterMap#getDisplayLabel(int)},
 * {@link KeyCharacterMap#getNumber(int)} or {@link KeyCharacterMap#get(int, int)}.
 */
====>[PUBLIC]<android.view.KeyCharacterMap: boolean getKeyData(int,KeyData)>    ---->    KeyCharacterMap#getDisplayLabel(int)
<android.renderscript.RenderScriptGL: void pause()>
/**
 * @deprecated in API 16
 * Temporarly halt calls to the root rendering script.
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL: void pause()>    ---->    
<android.net.ConnectivityManager: PacketKeepalive startNattKeepalive(Network,int,PacketKeepaliveCallback,InetAddress,int,InetAddress)>
/**
 * Starts an IPsec NAT-T keepalive packet with the specified parameters.
 *
 * @deprecated Use {@link #createSocketKeepalive} instead.
 *
 * @hide
 */
====>[HIDDEN]<android.net.ConnectivityManager: PacketKeepalive startNattKeepalive(Network,int,PacketKeepaliveCallback,InetAddress,int,InetAddress)>    ---->    #createSocketKeepalive
<android.app.DownloadManager: long addCompletedDownload(String,String,boolean,String,String,long,boolean,Uri,Uri)>
/**
 * Adds a file to the downloads database system, so it could appear in Downloads App
 * (and thus become eligible for management by the Downloads App).
 * <p>
 * It is helpful to make the file scannable by MediaScanner by setting the param
 * isMediaScannerScannable to true. It makes the file visible in media managing
 * applications such as Gallery App, which could be a useful purpose of using this API.
 *
 * <p> For applications targeting {@link android.os.Build.VERSION_CODES#Q} or above,
 * {@code path} must be within directories owned by the application
 * {e.g. {@link Context#getExternalFilesDir(String)}} or if the application is running under
 * the legacy storage model (see
 * {@link android.R.styleable#AndroidManifestApplication_requestLegacyExternalStorage
 * android:requestLegacyExternalStorage}), {@code path} can also be within the top-level
 * Downloads directory (as returned by
 * {@link Environment#getExternalStoragePublicDirectory(String)} with
 * {@link Environment#DIRECTORY_DOWNLOADS}).
 *
 * @param title the title that would appear for this file in Downloads App.
 * @param description the description that would appear for this file in Downloads App.
 * @param isMediaScannerScannable true if the file is to be scanned by MediaScanner. Files
 * scanned by MediaScanner appear in the applications used to view media (for example,
 * Gallery app).
 * @param mimeType mimetype of the file.
 * @param path absolute pathname to the file. The file should be world-readable, so that it can
 * be managed by the Downloads App and any other app that is used to read it (for example,
 * Gallery app to display the file, if the file contents represent a video/image).
 * @param length length of the downloaded file
 * @param showNotification true if a notification is to be sent, false otherwise
 * @param uri the original HTTP URI of the download
 * @param referer the HTTP Referer for the download
 * @return  an ID for the download entry added to the downloads app, unique across the system
 * This ID is used to make future calls related to this download.
 *
 * @deprecated Apps should instead contribute files to
 * {@link android.provider.MediaStore.Downloads} collection to make them available to user
 * as part of Downloads.
 */
====>[PUBLIC]<android.app.DownloadManager: long addCompletedDownload(String,String,boolean,String,String,long,boolean,Uri,Uri)>    ---->    android.provider.MediaStore.Downloads
<android.renderscript.ScriptGroup: void setOutput(KernelID,Allocation)>
/**
 * Sets an output of the ScriptGroup. This specifies an
 * Allocation to be used for the kernels that require an output
 * Allocation visible after the ScriptGroup is executed.
 *
 * @deprecated Use return value of {@link #execute(Object...)} instead.
 *
 * @param s The ID of the kernel where the allocation should be
 * connected.
 * @param a The allocation to connect.
 */
====>[PUBLIC]<android.renderscript.ScriptGroup: void setOutput(KernelID,Allocation)>    ---->    #execute(Object...)
<android.webkit.WebSettings: void setDatabasePath(String)>
/**
 * Sets the path to where database storage API databases should be saved.
 * In order for the database storage API to function correctly, this method
 * must be called with a path to which the application can write. This
 * method should only be called once: repeated calls are ignored.
 *
 * @param databasePath a path to the directory where databases should be
 * saved.
 * @deprecated Database paths are managed by the implementation and calling this method
 * will have no effect.
 */
====>[PUBLIC]<android.webkit.WebSettings: void setDatabasePath(String)>    ---->    
<android.view.inputmethod.InputMethodManager: boolean setCurrentInputMethodSubtype(InputMethodSubtype)>
/**
 * Switch to a new input method subtype of the current input method.
 * @param subtype A new input method subtype to switch.
 * @return true if the current subtype was successfully switched. When the specified subtype is
 * null, this method returns false.
 * @deprecated If the calling process is an IME, use
 * {@link InputMethodService#switchInputMethod(String, InputMethodSubtype)}, which
 * does not require any permission as long as the caller is the current IME.
 * If the calling process is some privileged app that already has
 * {@link android.Manifest.permission#WRITE_SECURE_SETTINGS} permission, just
 * directly update {@link Settings.Secure#SELECTED_INPUT_METHOD_SUBTYPE}.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodManager: boolean setCurrentInputMethodSubtype(InputMethodSubtype)>    ---->    InputMethodService#switchInputMethod(String, InputMethodSubtype)
<com.android.internal.logging.MetricsLogger: void count(Context,String,int)>
/**
 * Add an integer value to the monotonically increasing counter with the given name.
 * @deprecated because untestable; use {@link #count(String, int)}
 */
====>[PUBLIC]<com.android.internal.logging.MetricsLogger: void count(Context,String,int)>    ---->    #count(String, int)
<android.webkit.WebViewDelegate: void detachDrawGlFunctor(View,long)>
/**
 * Detaches the draw GL functor.
 *
 * @param nativeDrawGLFunctor the pointer to the native functor that implements
 * system/core/include/utils/Functor.h
 * @deprecated Use {@link #drawWebViewFunctor(Canvas, int)}
 */
====>[PUBLIC]<android.webkit.WebViewDelegate: void detachDrawGlFunctor(View,long)>    ---->    #drawWebViewFunctor(Canvas, int)
<android.webkit.UrlInterceptRegistry: boolean urlInterceptDisabled()>
/**
 * get the state of the url intercept, enabled or disabled
 *
 * @return return if it is disabled
 *
 * @hide
 * @deprecated This class was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.UrlInterceptRegistry: boolean urlInterceptDisabled()>    ---->    
<android.webkit.PluginList: void pluginClicked(Context,int)>
/**
 * Dispatches the click event to the appropriate plugin.
 *
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.PluginList: void pluginClicked(Context,int)>    ---->    
<android.service.voice.VoiceInteractionSession: void onHandleAssist(Bundle,AssistStructure,AssistContent)>
/**
 * Called to receive data from the application that the user was currently viewing when
 * an assist session is started.  If the original show request did not specify
 * {@link #SHOW_WITH_ASSIST}, this method will not be called.
 *
 * @param data Arbitrary data supplied by the app through
 * {@link android.app.Activity#onProvideAssistData Activity.onProvideAssistData}.
 * May be null if assist data has been disabled by the user or device policy.
 * @param structure If available, the structure definition of all windows currently
 * displayed by the app.  May be null if assist data has been disabled by the user
 * or device policy; will be an empty stub if the application has disabled assist
 * by marking its window as secure.
 * @param content Additional content data supplied by the app through
 * {@link android.app.Activity#onProvideAssistContent Activity.onProvideAssistContent}.
 * May be null if assist data has been disabled by the user or device policy; will
 * not be automatically filled in with data from the app if the app has marked its
 * window as secure.
 *
 * @deprecated use {@link #onHandleAssist(AssistState)}
 */
====>[PUBLIC]<android.service.voice.VoiceInteractionSession: void onHandleAssist(Bundle,AssistStructure,AssistContent)>    ---->    #onHandleAssist(AssistState)
<android.media.MediaFile: boolean isVideoFileType(int)>
/**
 * @deprecated file types no longer exist
 */
====>[PUBLIC]<android.media.MediaFile: boolean isVideoFileType(int)>    ---->    
<android.provider.MediaStore.Video.Thumbnails: Bitmap getThumbnail(ContentResolver,long,long,int,Options)>
/**
 * Return thumbnail representing a specific video item. If a
 * thumbnail doesn't exist, this method will block until it's
 * generated. Callers are responsible for their own in-memory
 * caching of returned values.
 *
 * @param videoId the video item to obtain a thumbnail for.
 * @param kind optimal thumbnail size desired.
 * @return decoded thumbnail, or {@code null} if problem was
 * encountered.
 * @deprecated Callers should migrate to using
 * {@link ContentResolver#loadThumbnail}, since it
 * offers richer control over requested thumbnail sizes
 * and cancellation behavior.
 */
====>[PUBLIC]<android.provider.MediaStore.Video.Thumbnails: Bitmap getThumbnail(ContentResolver,long,long,int,Options)>    ---->    
<android.os.storage.StorageVolume: Intent createAccessIntent(String)>
/**
 * Builds an intent to give access to a standard storage directory or entire volume after
 * obtaining the user's approval.
 * <p>
 * When invoked, the system will ask the user to grant access to the requested directory (and
 * its descendants). The result of the request will be returned to the activity through the
 * {@code onActivityResult} method.
 * <p>
 * To gain access to descendants (child, grandchild, etc) documents, use
 * {@link DocumentsContract#buildDocumentUriUsingTree(Uri, String)}, or
 * {@link DocumentsContract#buildChildDocumentsUriUsingTree(Uri, String)} with the returned URI.
 * <p>
 * If your application only needs to store internal data, consider using
 * {@link Context#getExternalFilesDirs(String) Context.getExternalFilesDirs},
 * {@link Context#getExternalCacheDirs()}, or {@link Context#getExternalMediaDirs()}, which
 * require no permissions to read or write.
 * <p>
 * Access to the entire volume is only available for non-primary volumes (for the primary
 * volume, apps can use the {@link android.Manifest.permission#READ_EXTERNAL_STORAGE} and
 * {@link android.Manifest.permission#WRITE_EXTERNAL_STORAGE} permissions) and should be used
 * with caution, since users are more likely to deny access when asked for entire volume access
 * rather than specific directories.
 *
 * @param directoryName must be one of {@link Environment#DIRECTORY_MUSIC},
 * {@link Environment#DIRECTORY_PODCASTS}, {@link Environment#DIRECTORY_RINGTONES},
 * {@link Environment#DIRECTORY_ALARMS}, {@link Environment#DIRECTORY_NOTIFICATIONS},
 * {@link Environment#DIRECTORY_PICTURES}, {@link Environment#DIRECTORY_MOVIES},
 * {@link Environment#DIRECTORY_DOWNLOADS}, {@link Environment#DIRECTORY_DCIM}, or
 * {@link Environment#DIRECTORY_DOCUMENTS}, or {@code null} to request access to the
 * entire volume.
 * @return intent to request access, or {@code null} if the requested directory is invalid for
 * that volume.
 * @see DocumentsContract
 * @deprecated Callers should migrate to using {@link Intent#ACTION_OPEN_DOCUMENT_TREE} instead.
 * Launching this {@link Intent} on devices running
 * {@link android.os.Build.VERSION_CODES#Q} or higher, will immediately finish
 * with a result code of {@link android.app.Activity#RESULT_CANCELED}.
 */
====>[PUBLIC]<android.os.storage.StorageVolume: Intent createAccessIntent(String)>    ---->    Intent#ACTION_OPEN_DOCUMENT_TREE
<android.service.euicc.EuiccService: int onDownloadSubscription(int,DownloadableSubscription,boolean,boolean)>
/**
 * Download the given subscription.
 *
 * @param slotId ID of the SIM slot to use for the operation.
 * @param subscription The subscription to download.
 * @param switchAfterDownload If true, the subscription should be enabled upon successful
 * download.
 * @param forceDeactivateSim If true, and if an active SIM must be deactivated to access the
 * eUICC, perform this action automatically. Otherwise, {@link #RESULT_MUST_DEACTIVATE_SIM}
 * should be returned to allow the user to consent to this operation first.
 * @return the result of the download operation. May be one of the predefined {@code RESULT_}
 * constants or any implementation-specific code starting with {@link #RESULT_FIRST_USER}.
 * @see android.telephony.euicc.EuiccManager#downloadSubscription
 *
 * @deprecated From Q, a subclass should use and override the above
 * {@link #onDownloadSubscription(int, DownloadableSubscription, boolean, boolean, Bundle)}. The
 * default return value for this one is Integer.MIN_VALUE.
 */
====>[PUBLIC]<android.service.euicc.EuiccService: int onDownloadSubscription(int,DownloadableSubscription,boolean,boolean)>    ---->    #onDownloadSubscription(int, DownloadableSubscription, boolean, boolean, Bundle)
<android.webkit.Plugin: void setDescription(String)>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin: void setDescription(String)>    ---->    
<android.graphics.drawable.AnimatedImageDrawable: int getLoopCount(int)>
/**
 * @removed
 * @deprecated Replaced with getRepeatCount to match other APIs.
 */
====>[HIDDEN]<android.graphics.drawable.AnimatedImageDrawable: int getLoopCount(int)>    ---->    
<android.os.PowerManager: boolean isScreenOn()>
/**
 * Returns true if the device is in an interactive state.
 * <p>
 * For historical reasons, the name of this method refers to the power state of
 * the screen but it actually describes the overall interactive state of
 * the device.  This method has been replaced by {@link #isInteractive}.
 * </p><p>
 * The value returned by this method only indicates whether the device is
 * in an interactive state which may have nothing to do with the screen being
 * on or off.  To determine the actual state of the screen,
 * use {@link android.view.Display#getState}.
 * </p>
 *
 * @return True if the device is in an interactive state.
 *
 * @deprecated Use {@link #isInteractive} instead.
 */
====>[PUBLIC]<android.os.PowerManager: boolean isScreenOn()>    ---->    #isInteractive
<android.widget.AutoCompleteTextView: OnItemClickListener getItemClickListener()>
/**
 * <p>Returns the listener that is notified whenever the user clicks an item
 * in the drop down list.</p>
 *
 * @return the item click listener
 *
 * @deprecated Use {@link #getOnItemClickListener()} intead
 */
====>[PUBLIC]<android.widget.AutoCompleteTextView: OnItemClickListener getItemClickListener()>    ---->    #getOnItemClickListener()
<android.app.KeyguardManager: KeyguardLock newKeyguardLock(String)>
/**
 * Enables you to lock or unlock the keyguard. Get an instance of this class by
 * calling {@link android.content.Context#getSystemService(java.lang.String) Context.getSystemService()}.
 * This class is wrapped by {@link android.app.KeyguardManager KeyguardManager}.
 * @param tag A tag that informally identifies who you are (for debugging who
 * is disabling the keyguard).
 *
 * @return A {@link KeyguardLock} handle to use to disable and reenable the
 * keyguard.
 *
 * @deprecated Use {@link LayoutParams#FLAG_DISMISS_KEYGUARD}
 * and/or {@link LayoutParams#FLAG_SHOW_WHEN_LOCKED}
 * instead; this allows you to seamlessly hide the keyguard as your application
 * moves in and out of the foreground and does not require that any special
 * permissions be requested.
 */
====>[PUBLIC]<android.app.KeyguardManager: KeyguardLock newKeyguardLock(String)>    ---->    LayoutParams#FLAG_DISMISS_KEYGUARD
<android.media.AudioManager: int getVibrateSetting(int)>
/**
 * Returns whether the user's vibrate setting for a vibrate type.
 * <p>
 * This shouldn't be needed by most clients that want to vibrate, instead
 * see {@link #shouldVibrate(int)}.
 *
 * @param vibrateType The type of vibrate. One of
 * {@link #VIBRATE_TYPE_NOTIFICATION} or
 * {@link #VIBRATE_TYPE_RINGER}.
 * @return The vibrate setting, one of {@link #VIBRATE_SETTING_ON},
 * {@link #VIBRATE_SETTING_OFF}, or
 * {@link #VIBRATE_SETTING_ONLY_SILENT}.
 * @see #setVibrateSetting(int, int)
 * @see #shouldVibrate(int)
 * @deprecated Applications should maintain their own vibrate policy based on
 * current ringer mode that can be queried via {@link #getRingerMode()}.
 */
====>[PUBLIC]<android.media.AudioManager: int getVibrateSetting(int)>    ---->    #getRingerMode()
<android.util.proto.ProtoOutputStream: void writeUInt32(long,int)>
/**
 * Write a single proto "uint32" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeUInt32(long,int)>    ---->    #write
<android.content.pm.PackageManager: void replacePreferredActivity(IntentFilter,int,ComponentName[],ComponentName)>
/**
 * Replaces an existing preferred activity mapping to the system, and if that were not present
 * adds a new preferred activity.  This will be used
 * to automatically select the given activity component when
 * {@link Context#startActivity(Intent) Context.startActivity()} finds
 * multiple matching activities and also matches the given filter.
 *
 * @param filter The set of intents under which this activity will be
 * made preferred.
 * @param match The IntentFilter match category that this preference
 * applies to.
 * @param set The set of activities that the user was picking from when
 * this preference was made.
 * @param activity The component name of the activity that is to be
 * preferred.
 *
 * @hide
 *
 * @deprecated This function no longer does anything. It is the platform's
 * responsibility to assign preferred activities and this cannot be modified
 * directly. To determine the activities resolved by the platform, use
 * {@link #resolveActivity} or {@link #queryIntentActivities}. To configure
 * an app to be responsible for a particular role and to check current role
 * holders, see {@link android.app.role.RoleManager}.
 */
====>[HIDDEN]<android.content.pm.PackageManager: void replacePreferredActivity(IntentFilter,int,ComponentName[],ComponentName)>    ---->    #resolveActivity
<android.telephony.PhoneNumberUtils: boolean isPotentialLocalEmergencyNumber(Context,int,String)>
/**
 * Checks if a given number might *potentially* result in a call to an
 * emergency service, for the country that the user is in. The current
 * country is determined using the CountryDetector.
 *
 * Specifically, this method will return true if the specified number
 * is an emergency number in the current country, *or* if the number
 * simply starts with the same digits as any emergency number for the
 * current country.
 *
 * This method is intended for internal use by the phone app when
 * deciding whether to allow ACTION_CALL intents from 3rd party apps
 * (where we're required to *not* allow emergency calls to be placed.)
 *
 * @param subId the subscription id of the SIM.
 * @param number the number to look up.
 * @param context the specific context which the number should be checked against
 * @return true if the specified number is an emergency number for a local country, based on the
 * CountryDetector.
 *
 * @deprecated Please use {@link TelephonyManager#isPotentialEmergencyNumber(String)}
 * instead.
 *
 * @hide
 */
====>[HIDDEN]<android.telephony.PhoneNumberUtils: boolean isPotentialLocalEmergencyNumber(Context,int,String)>    ---->    TelephonyManager#isPotentialEmergencyNumber(String)
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onFinishedGoingToSleep(int)>
/**
 * Called when the device has finished going to sleep.
 * @param why either {@link WindowManagerPolicyConstants#OFF_BECAUSE_OF_ADMIN},
 * {@link WindowManagerPolicyConstants#OFF_BECAUSE_OF_USER}, or
 * {@link WindowManagerPolicyConstants#OFF_BECAUSE_OF_TIMEOUT}.
 *
 * @deprecated use {@link com.android.systemui.keyguard.WakefulnessLifecycle}.
 */
====>[PUBLIC]<com.android.keyguard.KeyguardUpdateMonitorCallback: void onFinishedGoingToSleep(int)>    ---->    com.android.systemui.keyguard.WakefulnessLifecycle
<android.media.AudioManager: boolean registerRemoteController(RemoteController)>
/**
 * Registers a {@link RemoteController} instance for it to receive media
 * metadata updates and playback state information from applications using
 * {@link RemoteControlClient}, and control their playback.
 * <p>
 * Registration requires the {@link RemoteController.OnClientUpdateListener} listener to be
 * one of the enabled notification listeners (see
 * {@link android.service.notification.NotificationListenerService}).
 *
 * @param rctlr the object to register.
 * @return true if the {@link RemoteController} was successfully registered,
 * false if an error occurred, due to an internal system error, or
 * insufficient permissions.
 * @deprecated Use
 * {@link MediaSessionManager#addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener, ComponentName)}
 * and {@link MediaController} instead.
 */
====>[PUBLIC]<android.media.AudioManager: boolean registerRemoteController(RemoteController)>    ---->    MediaSessionManager#addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener, ComponentName)
<android.nfc.NfcAdapter: void setOnNdefPushCompleteCallback(OnNdefPushCompleteCallback,Activity,Activity)>
/**
 * Set a callback on successful Android Beam (TM).
 *
 * <p>This method may be called at any time before {@link Activity#onDestroy},
 * but the callback can only occur when the
 * specified activity(s) are in resumed (foreground) state. The recommended
 * approach is to call this method during your Activity's
 * {@link Activity#onCreate} - see sample
 * code below. This method does not immediately perform any I/O or blocking work,
 * so is safe to call on your main thread.
 *
 * <p>The API allows for multiple activities to be specified at a time,
 * but it is strongly recommended to just register one at a time,
 * and to do so during the activity's {@link Activity#onCreate}. For example:
 * <pre>
 * protected void onCreate(Bundle savedInstanceState) {
 * super.onCreate(savedInstanceState);
 * NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this);
 * if (nfcAdapter == null) return;  // NFC not available on this device
 * nfcAdapter.setOnNdefPushCompleteCallback(callback, this);
 * }</pre>
 * And that is it. Only one call per activity is necessary. The Android
 * OS will automatically release its references to the callback and the
 * Activity object when it is destroyed if you follow this pattern.
 *
 * <p class="note">Do not pass in an Activity that has already been through
 * {@link Activity#onDestroy}. This is guaranteed if you call this API
 * during {@link Activity#onCreate}.
 *
 * <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
 *
 * @param callback callback, or null to disable
 * @param activity activity for which the NDEF message will be pushed
 * @param activities optional additional activities, however we strongly recommend
 * to only register one at a time, and to do so in that activity's
 * {@link Activity#onCreate}
 * @throws UnsupportedOperationException if FEATURE_NFC is unavailable.
 * @deprecated this feature is deprecated. File sharing can work using other technology like
 * Bluetooth.
 */
====>[PUBLIC]<android.nfc.NfcAdapter: void setOnNdefPushCompleteCallback(OnNdefPushCompleteCallback,Activity,Activity)>    ---->    
<android.provider.ContactsContract.Contacts: void markAsContacted(ContentResolver,long)>
/**
 * Mark a contact as having been contacted. Updates two fields:
 * {@link #TIMES_CONTACTED} and {@link #LAST_TIME_CONTACTED}. The
 * TIMES_CONTACTED field is incremented by 1 and the LAST_TIME_CONTACTED
 * field is populated with the current system time.
 *
 * <p class="caution"><b>Caution: </b>As of January 7, 2019, this method is obsolete. For
 * more information, see the
 * <a href="/guide/topics/providers/contacts-provider#ObsoleteData">Contacts Provider</a>
 * page.
 *
 * @param resolver the ContentResolver to use
 * @param contactId the person who was contacted
 *
 * @deprecated Contacts affinity information is no longer supported as of
 * Android version {@link android.os.Build.VERSION_CODES#Q}. This method
 * is no-op.
 */
====>[PUBLIC]<android.provider.ContactsContract.Contacts: void markAsContacted(ContentResolver,long)>    ---->    
<android.net.NetworkInfo: String getSubtypeName()>
/**
 * Return a human-readable name describing the subtype of the network.
 * @return the name of the network subtype
 * @deprecated Use {@link android.telephony.TelephonyManager#getDataNetworkType} instead.
 */
====>[PUBLIC]<android.net.NetworkInfo: String getSubtypeName()>    ---->    android.telephony.TelephonyManager#getDataNetworkType
<android.view.inputmethod.InputMethodManager: boolean isWatchingCursor(View)>
/**
 * Return true if the current input method wants to watch the location
 * of the input editor's cursor in its window.
 *
 * @deprecated Use {@link InputConnection#requestCursorUpdates(int)} instead.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodManager: boolean isWatchingCursor(View)>    ---->    InputConnection#requestCursorUpdates(int)
<android.graphics.drawable.NinePatchDrawable: void <init>(Bitmap,byte[],Rect,String)>
/**
 * Create drawable from raw nine-patch data, not dealing with density.
 *
 * @deprecated Use {@link #NinePatchDrawable(Resources, Bitmap, byte[], Rect, String)}
 * to ensure that the drawable has correctly set its target density.
 */
====>[PUBLIC]<android.graphics.drawable.NinePatchDrawable: void <init>(Bitmap,byte[],Rect,String)>    ---->    #NinePatchDrawable(Resources, Bitmap, byte[], Rect, String)
Inconsistency (Non-Documentation):<com.android.internal.policy.PhoneWindow: void setTitleColor(int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/com/android/internal/policy/PhoneWindow.java
<com.android.internal.policy.PhoneWindow: void setTitleColor(int)>

====>[PUBLIC]<com.android.internal.policy.PhoneWindow: void setTitleColor(int)>    ---->    
<android.content.pm.ShortcutInfo.Builder: Builder setLongLabelResId(int)>
/**
 * @hide We don't support resource strings for dynamic shortcuts for now.  (But unit tests
 * use it.)
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo.Builder: Builder setLongLabelResId(int)>    ---->    
<android.test.TouchUtils: int dragViewTo(ActivityInstrumentationTestCase,View,int,int,int)>
/**
 * Simulate touching a view and dragging it to a specified location.
 *
 * @param test The test case that is being run
 * @param v The view that should be dragged
 * @param gravity Which part of the view to use for the initial down event. A combination of
 * (TOP, CENTER_VERTICAL, BOTTOM) and (LEFT, CENTER_HORIZONTAL, RIGHT)
 * @param toX Final location of the view after dragging
 * @param toY Final location of the view after dragging
 *
 * @return distance in pixels covered by the drag
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: int dragViewTo(ActivityInstrumentationTestCase,View,int,int,int)>    ---->    android.test.ActivityInstrumentationTestCase2
<android.app.admin.DeviceAdminReceiver: void onPasswordSucceeded(Context,Intent)>
/**
 * Called after the user has succeeded at entering their device or profile challenge password,
 * as a result of receiving {@link #ACTION_PASSWORD_SUCCEEDED}.  This will
 * only be received the first time they succeed after having previously
 * failed.
 * @param context The running context as per {@link #onReceive}.
 * @param intent The received intent as per {@link #onReceive}.
 *
 * @deprecated From {@link android.os.Build.VERSION_CODES#O}, use
 * {@link #onPasswordSucceeded(Context, Intent, UserHandle)} instead.
 */
====>[PUBLIC]<android.app.admin.DeviceAdminReceiver: void onPasswordSucceeded(Context,Intent)>    ---->    #onPasswordSucceeded(Context, Intent, UserHandle)
<android.security.keystore.recovery.RecoveryController: Key importKey(String,byte[])>
/**
 * Imports a 256-bit recoverable AES key with the given {@code alias} and the raw bytes {@code
 * keyBytes}.
 *
 * @throws InternalRecoveryServiceException if an unexpected error occurred in the recovery
 * service.
 * @throws LockScreenRequiredException if the user does not have a lock screen set. A lock
 * screen is required to generate recoverable keys.
 *
 * @deprecated Use the method {@link #importKey(String, byte[], byte[])} instead.
 */
====>[PUBLIC]<android.security.keystore.recovery.RecoveryController: Key importKey(String,byte[])>    ---->    #importKey(String, byte[], byte[])
<android.test.ActivityInstrumentationTestCase2: void <init>(String,Class<T>)>
/**
 * Creates an {@link ActivityInstrumentationTestCase2}.
 *
 * @param pkg ignored - no longer in use.
 * @param activityClass The activity to test. This must be a class in the instrumentation
 * targetPackage specified in the AndroidManifest.xml
 *
 * @deprecated use {@link #ActivityInstrumentationTestCase2(Class)} instead
 */
====>[PUBLIC]<android.test.ActivityInstrumentationTestCase2: void <init>(String,Class<T>)>    ---->    #ActivityInstrumentationTestCase2(Class)
Inconsistency (Non-Documentation):<android.media.ThumbnailUtils: int computeSampleSize(Options,int,int)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//media/java/android/media/ThumbnailUtils.java
<android.media.ThumbnailUtils: int computeSampleSize(Options,int,int)>

====>[PUBLIC]<android.media.ThumbnailUtils: int computeSampleSize(Options,int,int)>    ---->    
<android.content.res.Resources: Drawable getDrawable(int)>
/**
 * Return a drawable object associated with a particular resource ID.
 * Various types of objects will be returned depending on the underlying
 * resource -- for example, a solid color, PNG image, scalable image, etc.
 * The Drawable API hides these implementation details.
 *
 * <p class="note"><strong>Note:</strong> Prior to
 * {@link android.os.Build.VERSION_CODES#JELLY_BEAN}, this function
 * would not correctly retrieve the final configuration density when
 * the resource ID passed here is an alias to another Drawable resource.
 * This means that if the density configuration of the alias resource
 * is different than the actual resource, the density of the returned
 * Drawable would be incorrect, resulting in bad scaling. To work
 * around this, you can instead manually resolve the aliased reference
 * by using {@link #getValue(int, TypedValue, boolean)} and passing
 * {@code true} for {@code resolveRefs}. The resulting
 * {@link TypedValue#resourceId} value may be passed to this method.</p>
 *
 * <p class="note"><strong>Note:</strong> To obtain a themed drawable, use
 * {@link android.content.Context#getDrawable(int) Context.getDrawable(int)}
 * or {@link #getDrawable(int, Theme)} passing the desired theme.</p>
 *
 * @param id The desired resource identifier, as generated by the aapt
 * tool. This integer encodes the package, type, and resource
 * entry. The value 0 is an invalid identifier.
 * @return Drawable An object that can be used to draw this resource.
 * @throws NotFoundException Throws NotFoundException if the given ID does
 * not exist.
 * @see #getDrawable(int, Theme)
 * @deprecated Use {@link #getDrawable(int, Theme)} instead.
 */
====>[PUBLIC]<android.content.res.Resources: Drawable getDrawable(int)>    ---->    #getDrawable(int, Theme)
<android.webkit.WebView: void <init>(Context,AttributeSet,int,boolean)>
/**
 * Constructs a new WebView with layout parameters and a default style.
 *
 * @param context an Activity Context to access application assets
 * @param attrs an AttributeSet passed to our parent
 * @param defStyleAttr an attribute in the current theme that contains a
 * reference to a style resource that supplies default values for
 * the view. Can be 0 to not look for defaults.
 * @param privateBrowsing whether this WebView will be initialized in
 * private mode
 *
 * @deprecated Private browsing is no longer supported directly via
 * WebView and will be removed in a future release. Prefer using
 * {@link WebSettings}, {@link WebViewDatabase}, {@link CookieManager}
 * and {@link WebStorage} for fine-grained control of privacy data.
 */
====>[PUBLIC]<android.webkit.WebView: void <init>(Context,AttributeSet,int,boolean)>    ---->    WebSettings
<android.app.admin.DevicePolicyManager: boolean setActiveProfileOwner(ComponentName,String)>
/**
 * @hide
 * @deprecated Use #ACTION_SET_PROFILE_OWNER
 * Sets the given component as an active admin and registers the package as the profile
 * owner for this user. The package must already be installed and there shouldn't be
 * an existing profile owner registered for this user. Also, this method must be called
 * before the user setup has been completed.
 * <p>
 * This method can only be called by system apps that hold MANAGE_USERS permission and
 * MANAGE_DEVICE_ADMINS permission.
 * @param admin The component to register as an active admin and profile owner.
 * @param ownerName The user-visible name of the entity that is managing this user.
 * @return whether the admin was successfully registered as the profile owner.
 * @throws IllegalArgumentException if packageName is null, the package isn't installed, or
 * the user has already been set up.
 */
====>[HIDDEN]<android.app.admin.DevicePolicyManager: boolean setActiveProfileOwner(ComponentName,String)>    ---->    
<android.widget.CalendarView: void setWeekNumberColor(int)>
/**
 * Sets the color for the week numbers.
 *
 * @param color The week number color.
 *
 * @attr ref android.R.styleable#CalendarView_weekNumberColor
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: void setWeekNumberColor(int)>    ---->    
<android.app.AlertDialog: void setButton2(CharSequence,OnClickListener)>
/**
 * Set a listener to be invoked when button 2 of the dialog is pressed.
 * @param text The text to display in button 2.
 * @param listener The {@link DialogInterface.OnClickListener} to use.
 * @deprecated Use
 * {@link #setButton(int, CharSequence, android.content.DialogInterface.OnClickListener)}
 * with {@link DialogInterface#BUTTON_NEGATIVE}
 */
====>[PUBLIC]<android.app.AlertDialog: void setButton2(CharSequence,OnClickListener)>    ---->    #setButton(int, CharSequence, android.content.DialogInterface.OnClickListener)
<android.graphics.BaseRecordingCanvas: void drawPosText(char[],int,int,float[],Paint)>
/**
 * @deprecated checkstyle
 */
====>[PUBLIC]<android.graphics.BaseRecordingCanvas: void drawPosText(char[],int,int,float[],Paint)>    ---->    
<android.telecom.TelecomManager: void acceptRingingCall()>
/**
 * If there is a ringing incoming call, this method accepts the call on behalf of the user.
 *
 * If the incoming call is a video call, the call will be answered with the same video state as
 * the incoming call requests.  This means, for example, that an incoming call requesting
 * {@link VideoProfile#STATE_BIDIRECTIONAL} will be answered, accepting that state.
 *
 * Requires permission: {@link android.Manifest.permission#MODIFY_PHONE_STATE} or
 * {@link android.Manifest.permission#ANSWER_PHONE_CALLS}
 *
 * @deprecated Companion apps for wearable devices should use the {@link InCallService} API
 * instead.
 */
====>[PUBLIC]<android.telecom.TelecomManager: void acceptRingingCall()>    ---->    InCallService
<android.renderscript.Mesh.TriangleMeshBuilder: void <init>(RenderScript,int,int)>
/**
 * @deprecated in API 16
 * @param rs Context to which the mesh will belong.
 * @param vtxSize specifies whether the vertex is a float2 or
 * float3
 * @param flags bitfield that is a combination of COLOR, NORMAL,
 * and TEXTURE_0 that specifies what vertex data
 * channels are present in the mesh
 */
====>[PUBLIC]<android.renderscript.Mesh.TriangleMeshBuilder: void <init>(RenderScript,int,int)>    ---->    
<android.graphics.ImageDecoder: ImageDecoder setDecodeAsAlphaMask(boolean)>
/**
 * @removed
 * @deprecated Renamed to {@link #setDecodeAsAlphaMaskEnabled}.
 */
====>[HIDDEN]<android.graphics.ImageDecoder: ImageDecoder setDecodeAsAlphaMask(boolean)>    ---->    #setDecodeAsAlphaMaskEnabled
<android.widget.CalendarView: int getUnfocusedMonthDateColor()>
/**
 * Gets the color for the dates in a not focused month.
 *
 * @return A not focused month date color.
 *
 * @attr ref android.R.styleable#CalendarView_unfocusedMonthDateColor
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: int getUnfocusedMonthDateColor()>    ---->    
<android.graphics.Canvas: boolean clipRegion(Region,Op)>
/**
 * Modify the current clip with the specified region. Note that unlike
 * clipRect() and clipPath() which transform their arguments by the
 * current matrix, clipRegion() assumes its argument is already in the
 * coordinate system of the current layer's bitmap, and so not
 * transformation is performed.
 *
 * @param region The region to operate on the current clip, based on op
 * @param op How the clip is modified
 * @return true if the resulting is non-empty
 *
 * @removed
 * @deprecated Unlike all other clip calls this API does not respect the
 * current matrix. Use {@link #clipRect(Rect)} as an alternative.
 */
====>[HIDDEN]<android.graphics.Canvas: boolean clipRegion(Region,Op)>    ---->    #clipRect(Rect)
<android.webkit.WebSettings: String getDatabasePath()>
/**
 * Gets the path to where database storage API databases are saved.
 *
 * @return the String path to the database storage API databases
 * @see #setDatabasePath
 * @deprecated Database paths are managed by the implementation this method is obsolete.
 */
====>[PUBLIC]<android.webkit.WebSettings: String getDatabasePath()>    ---->    
<android.os.FileUtils: void copyFileOrThrow(File,File)>
/**
 * @deprecated use {@link #copy(File, File)} instead.
 * @hide
 */
====>[HIDDEN]<android.os.FileUtils: void copyFileOrThrow(File,File)>    ---->    #copy(File, File)
<android.webkit.WebSettings: void setRenderPriority(RenderPriority)>
/**
 * Sets the priority of the Render thread. Unlike the other settings, this
 * one only needs to be called once per process. The default value is
 * {@link RenderPriority#NORMAL}.
 *
 * @param priority the priority
 * @deprecated It is not recommended to adjust thread priorities, and this will
 * not be supported in future versions.
 */
====>[PUBLIC]<android.webkit.WebSettings: void setRenderPriority(RenderPriority)>    ---->    
<android.provider.MediaStore.Video.Thumbnails: void cancelThumbnailRequest(ContentResolver,long)>
/**
 * Cancel any outstanding {@link #getThumbnail} requests, causing
 * them to return by throwing a {@link OperationCanceledException}.
 * <p>
 * This method has no effect on
 * {@link ContentResolver#loadThumbnail} calls, since they provide
 * their own {@link CancellationSignal}.
 *
 * @deprecated Callers should migrate to using
 * {@link ContentResolver#loadThumbnail}, since it
 * offers richer control over requested thumbnail sizes
 * and cancellation behavior.
 */
====>[PUBLIC]<android.provider.MediaStore.Video.Thumbnails: void cancelThumbnailRequest(ContentResolver,long)>    ---->    
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: boolean getHintAvoidBackgroundClipping()> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/app/Notification.java
<android.app.Notification.WearableExtender: boolean getHintAvoidBackgroundClipping()>
/**
 * Get a hint that this notification's background should not be clipped if possible,
 * and should instead be resized to fully display on the screen, retaining the aspect
 * ratio of the image. This can be useful for images like barcodes or qr codes.
 * @return {@code true} if it's ok if the background is clipped on the screen, false
 * otherwise. The default value is {@code false} if this was never set.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: boolean getHintAvoidBackgroundClipping()>    ---->    
<android.webkit.Plugin: void setName(String)>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin: void setName(String)>    ---->    
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: String generateKey(String)>
/**
 * Generates a key named {@code alias} in caller's namespace.
 * The key is stored in system service keystore namespace.
 *
 * @param alias the alias provided by caller as a reference to the key.
 * @return grant alias, which caller can use to access the key.
 * @throws RemoteException if certain internal errors occur.
 *
 * @deprecated Use {@link #generateKeyWithMetadata(String, byte[])} instead.
 */
====>[PUBLIC]<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: String generateKey(String)>    ---->    #generateKeyWithMetadata(String, byte[])
<android.database.Cursor: void deactivate()>
/**
 * Deactivates the Cursor, making all calls on it fail until {@link #requery} is called.
 * Inactive Cursors use fewer resources than active Cursors.
 * Calling {@link #requery} will make the cursor active again.
 * @deprecated Since {@link #requery()} is deprecated, so too is this.
 */
====>[PUBLIC]<android.database.Cursor: void deactivate()>    ---->    
<android.content.pm.PackageParser: Package parseMonolithicPackage(File,int)>
/**
 * Parse the given APK file, treating it as as a single monolithic package.
 * <p>
 * Note that this <em>does not</em> perform signature verification; that
 * must be done separately in {@link #collectCertificates(Package, int)}.
 *
 * @deprecated external callers should move to
 * {@link #parsePackage(File, int)}. Eventually this method will
 * be marked private.
 */
====>[PUBLIC]<android.content.pm.PackageParser: Package parseMonolithicPackage(File,int)>    ---->    #parsePackage(File, int)
<android.net.wifi.WifiEnterpriseConfig: String getSubjectMatch()>
/**
 * Get subject match (deprecated)
 * @return the subject match string
 * @deprecated in favor of altSubjectMatch
 */
====>[PUBLIC]<android.net.wifi.WifiEnterpriseConfig: String getSubjectMatch()>    ---->    altSubjectMatch
<android.media.AudioManager: void unregisterRemoteControlClient(RemoteControlClient)>
/**
 * Unregisters the remote control client that was providing information to display on the
 * remote controls.
 * @param rcClient The remote control client to unregister.
 * @see #registerRemoteControlClient(RemoteControlClient)
 * @deprecated Use {@link MediaSession} instead.
 */
====>[PUBLIC]<android.media.AudioManager: void unregisterRemoteControlClient(RemoteControlClient)>    ---->    MediaSession
Inconsistency (Non-Documentation):<android.content.IContentProvider: Bundle call(String,String,String,Bundle)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//core/java/android/content/IContentProvider.java
<android.content.IContentProvider: Bundle call(String,String,String,Bundle)>

====>[PUBLIC]<android.content.IContentProvider: Bundle call(String,String,String,Bundle)>    ---->    
<android.text.TextUtils: CharSequence commaEllipsize(CharSequence,TextPaint,float,String,String)>
/**
 * Converts a CharSequence of the comma-separated form "Andy, Bob,
 * Charles, David" that is too wide to fit into the specified width
 * into one like "Andy, Bob, 2 more".
 *
 * @param text the text to truncate
 * @param p the Paint with which to measure the text
 * @param avail the horizontal width available for the text (in pixels)
 * @param oneMore the string for "1 more" in the current locale
 * @param more the string for "%d more" in the current locale
 *
 * @deprecated Do not use. This is not internationalized, and has known issues
 * with right-to-left text, languages that have more than one plural form, languages
 * that use a different character as a comma-like separator, etc.
 * Use {@link #listEllipsize} instead.
 */
====>[PUBLIC]<android.text.TextUtils: CharSequence commaEllipsize(CharSequence,TextPaint,float,String,String)>    ---->    #listEllipsize
Inconsistency (Non-Documentation):<com.android.systemui.shared.recents.model.Task: void notifyTaskDataUnloaded(Drawable)> | /Users/chenbeining/Downloads/platform_frameworks_base-android-10.0.0_r47//packages/SystemUI/shared/src/com/android/systemui/shared/recents/model/Task.java
<com.android.systemui.shared.recents.model.Task: void notifyTaskDataUnloaded(Drawable)>
/**
 * Notifies the callback listeners that this task has been unloaded
 */
====>[PUBLIC]<com.android.systemui.shared.recents.model.Task: void notifyTaskDataUnloaded(Drawable)>    ---->    
<android.telecom.TelecomManager: void clearAccounts()>
/**
 * Remove all Accounts that belong to the calling package from the system.
 * @deprecated Use {@link #clearPhoneAccounts()} instead.
 * @hide
 */
====>[HIDDEN]<android.telecom.TelecomManager: void clearAccounts()>    ---->    #clearPhoneAccounts()
<android.graphics.BitmapFactory.Options: void requestCancelDecode()>
/**
 * @deprecated As of {@link android.os.Build.VERSION_CODES#N}, this
 * will not affect the decode, though it will still set mCancel.
 *
 * In {@link android.os.Build.VERSION_CODES#M} and below, if this can
 * be called from another thread while this options object is inside
 * a decode... call. Calling this will notify the decoder that it
 * should cancel its operation. This is not guaranteed to cancel the
 * decode, but if it does, the decoder... operation will return null,
 * or if inJustDecodeBounds is true, will set outWidth/outHeight
 * to -1
 */
====>[PUBLIC]<android.graphics.BitmapFactory.Options: void requestCancelDecode()>    ---->    
<android.database.sqlite.SQLiteClosable: void onAllReferencesReleasedFromContainer()>
/**
 * Called when the last reference to the object was released by
 * a call to {@link #releaseReferenceFromContainer()}.
 *
 * @deprecated Do not use.
 */
====>[PUBLIC]<android.database.sqlite.SQLiteClosable: void onAllReferencesReleasedFromContainer()>    ---->    
<android.os.Debug: void resetGlobalClassInitCount()>
/**
 * Clears the count of classes initialized.
 * @see #getGlobalClassInitCount()
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void resetGlobalClassInitCount()>    ---->    
<android.util.proto.ProtoOutputStream: void writeBool(long,boolean)>
/**
 * Write a single proto "bool" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeBool(long,boolean)>    ---->    #write
<android.media.MediaCodecList: MediaCodecInfo getCodecInfoAt(int)>
/**
 * Return the {@link MediaCodecInfo} object for the codec at
 * the given {@code index} in the regular list.
 *
 * @deprecated Use {@link #getCodecInfos} instead.
 *
 * @see #REGULAR_CODECS
 */
====>[PUBLIC]<android.media.MediaCodecList: MediaCodecInfo getCodecInfoAt(int)>    ---->    #getCodecInfos
<android.content.Context: void sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)>
/**
 * <p>Version of {@link #sendStickyBroadcast} that allows you to
 * receive data back from the broadcast.  This is accomplished by
 * supplying your own BroadcastReceiver when calling, which will be
 * treated as a final receiver at the end of the broadcast -- its
 * {@link BroadcastReceiver#onReceive} method will be called with
 * the result values collected from the other receivers.  The broadcast will
 * be serialized in the same way as calling
 * {@link #sendOrderedBroadcast(Intent, String)}.
 *
 * <p>Like {@link #sendBroadcast(Intent)}, this method is
 * asynchronous; it will return before
 * resultReceiver.onReceive() is called.  Note that the sticky data
 * stored is only the data you initially supply to the broadcast, not
 * the result of any changes made by the receivers.
 *
 * <p>See {@link BroadcastReceiver} for more information on Intent broadcasts.
 *
 * @deprecated Sticky broadcasts should not be used.  They provide no security (anyone
 * can access them), no protection (anyone can modify them), and many other problems.
 * The recommended pattern is to use a non-sticky broadcast to report that <em>something</em>
 * has changed, with another mechanism for apps to retrieve the current value whenever
 * desired.
 *
 * @param intent The Intent to broadcast; all receivers matching this
 * Intent will receive the broadcast.
 * @param resultReceiver Your own BroadcastReceiver to treat as the final
 * receiver of the broadcast.
 * @param scheduler A custom Handler with which to schedule the
 * resultReceiver callback; if null it will be
 * scheduled in the Context's main thread.
 * @param initialCode An initial value for the result code.  Often
 * Activity.RESULT_OK.
 * @param initialData An initial value for the result data.  Often
 * null.
 * @param initialExtras An initial value for the result extras.  Often
 * null.
 *
 * @see #sendBroadcast(Intent)
 * @see #sendBroadcast(Intent, String)
 * @see #sendOrderedBroadcast(Intent, String)
 * @see #sendStickyBroadcast(Intent)
 * @see android.content.BroadcastReceiver
 * @see #registerReceiver
 * @see android.app.Activity#RESULT_OK
 */
====>[PUBLIC]<android.content.Context: void sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)>    ---->    #sendBroadcast(Intent)
<android.hardware.hdmi.HdmiControlManager: void powerOnRemoteDevice(HdmiDeviceInfo)>
/**
 * @removed
 * @hide
 * @deprecated Please use {@link #powerOnDevice(deviceInfo)} instead.
 */
====>[HIDDEN]<android.hardware.hdmi.HdmiControlManager: void powerOnRemoteDevice(HdmiDeviceInfo)>    ---->    #powerOnDevice(deviceInfo)
<android.util.proto.ProtoOutputStream: void writeRepeatedEnum(long,int)>
/**
 * Write a single repeated proto enum type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedEnum(long,int)>    ---->    #write
<android.view.SurfaceHolder: void setType(int)>
/**
 * Sets the surface's type.
 *
 * @deprecated this is ignored, this value is set automatically when needed.
 */
====>[PUBLIC]<android.view.SurfaceHolder: void setType(int)>    ---->    
<android.app.ActionBar: Tab newTab()>
/**
 * Create and return a new {@link Tab}.
 * This tab will not be included in the action bar until it is added.
 *
 * <p>Very often tabs will be used to switch between {@link Fragment}
 * objects.  Here is a typical implementation of such tabs:</p>
 *
 * {@sample development/samples/ApiDemos/src/com/example/android/apis/app/FragmentTabs.java
 * complete}
 *
 * @return A new Tab
 *
 * @see #addTab(Tab)
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: Tab newTab()>    ---->    
<android.app.Notification.WearableExtender: Bitmap getBackground()>
/**
 * Get a background image to be displayed behind the notification content.
 * Contrary to the {@link android.app.Notification.BigPictureStyle}, this background
 * will work with any notification style.
 *
 * @return the background image
 * @see android.app.Notification.WearableExtender#setBackground
 * @deprecated Background images are no longer supported.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: Bitmap getBackground()>    ---->    
<com.android.internal.logging.MetricsLogger: void hidden(Context,int)>
/**
 * @deprecated because untestable; use {@link #hidden(int)}
 */
====>[PUBLIC]<com.android.internal.logging.MetricsLogger: void hidden(Context,int)>    ---->    #hidden(int)
<android.net.NetworkInfo: int getType()>
/**
 * Reports the type of network to which the
 * info in this {@code NetworkInfo} pertains.
 * @return one of {@link ConnectivityManager#TYPE_MOBILE}, {@link
 * ConnectivityManager#TYPE_WIFI}, {@link ConnectivityManager#TYPE_WIMAX}, {@link
 * ConnectivityManager#TYPE_ETHERNET},  {@link ConnectivityManager#TYPE_BLUETOOTH}, or other
 * types defined by {@link ConnectivityManager}.
 * @deprecated Callers should switch to checking {@link NetworkCapabilities#hasTransport}
 * instead with one of the NetworkCapabilities#TRANSPORT_* constants :
 * {@link #getType} and {@link #getTypeName} cannot account for networks using
 * multiple transports. Note that generally apps should not care about transport;
 * {@link NetworkCapabilities#NET_CAPABILITY_NOT_METERED} and
 * {@link NetworkCapabilities#getLinkDownstreamBandwidthKbps} are calls that
 * apps concerned with meteredness or bandwidth should be looking at, as they
 * offer this information with much better accuracy.
 */
====>[PUBLIC]<android.net.NetworkInfo: int getType()>    ---->    NetworkCapabilities#hasTransport
<android.media.AudioManager: int requestAudioFocus(OnAudioFocusChangeListener,AudioAttributes,int,int,AudioPolicy)>
/**
 * @hide
 * Request or lock audio focus.
 * This method is to be used by system components that have registered an
 * {@link android.media.audiopolicy.AudioPolicy} to request audio focus, but also to "lock" it
 * so focus granting is temporarily disabled.
 * @param l see the description of the same parameter in
 * {@link #requestAudioFocus(OnAudioFocusChangeListener, AudioAttributes, int, int)}
 * @param requestAttributes non null {@link AudioAttributes} describing the main reason for
 * requesting audio focus.
 * @param durationHint see the description of the same parameter in
 * {@link #requestAudioFocus(OnAudioFocusChangeListener, AudioAttributes, int, int)}
 * @param flags 0 or a combination of {link #AUDIOFOCUS_FLAG_DELAY_OK},
 * {@link #AUDIOFOCUS_FLAG_PAUSES_ON_DUCKABLE_LOSS}, and {@link #AUDIOFOCUS_FLAG_LOCK}.
 * <br>Use 0 when not using any flags for the request, which behaves like
 * {@link #requestAudioFocus(OnAudioFocusChangeListener, int, int)}, where either audio
 * focus is granted immediately, or the grant request fails because the system is in a
 * state where focus cannot change (e.g. a phone call).
 * @param ap a registered {@link android.media.audiopolicy.AudioPolicy} instance when locking
 * focus, or null.
 * @return see the description of the same return value in
 * {@link #requestAudioFocus(OnAudioFocusChangeListener, AudioAttributes, int, int)}
 * @throws IllegalArgumentException
 * @deprecated use {@link #requestAudioFocus(AudioFocusRequest, AudioPolicy)}
 */
====>[HIDDEN]<android.media.AudioManager: int requestAudioFocus(OnAudioFocusChangeListener,AudioAttributes,int,int,AudioPolicy)>    ---->    #requestAudioFocus(AudioFocusRequest, AudioPolicy)
